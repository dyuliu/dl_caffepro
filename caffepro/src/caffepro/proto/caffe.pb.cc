// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include <caffepro/proto/caffe.pb.h>

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267)
#endif

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffepro {

namespace {

const ::google::protobuf::Descriptor* BlobProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobProtoVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobProtoVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* Datum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Datum_reflection_ = NULL;
const ::google::protobuf::Descriptor* FillerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FillerParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LayerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayerParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LayerParameter_UpdateMethod_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ClusterParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClusterParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineKMeansParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineKMeansParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* EltwiseSumParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EltwiseSumParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReluParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReluParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LearnableLeakReluParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LearnableLeakReluParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LearnableLeakReluParameter_ShareParamMethod_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ExpParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoundParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoundParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchNormalizationParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchNormalizationParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BatchNormalizationParameter_RecordOption_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GPUSplitParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPUSplitParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConcatParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConcatParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* GridGeneratorParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridGeneratorParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GridGeneratorParameter_GridSizeOption_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SampleParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SampleParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SampleParameter_ConcatOutputOption_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AnchorParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnchorParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConvolutionParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConvolutionParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CorrelationParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CorrelationParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeightParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeightParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataProcesser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataProcesser_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataParameter_BigFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataParameter_BigFile_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataParameter_BigFile_InterpolationType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DataParameter_BigFile_ScaleJitterType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DataParameter_BigFile_CropPreference_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DataEntryParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataEntryParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DropoutParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropoutParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PaddingParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PaddingParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* InfogainLossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InfogainLossParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LossParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClsLocLossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClsLocLossParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClsLocLossParameter_LocType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ClsLocLossParameter_LossTransform_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InnerProductParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InnerProductParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LRNParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LRNParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LRNParameter_NormRegion_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PoolingParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PoolingParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolMethod_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SPMParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPMParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SPMParameter_PoolMethod_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PowerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PowerParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LayerConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayerConnection_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SolverParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SolverParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SolverState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SolverState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScaleBiasParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScaleBiasParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CropParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CropParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CropParameter_CropType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReduceDimParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReduceDimParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReduceDimParameter_ReduceType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FlipParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlipParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* StepGateParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StepGateParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* HouseholderParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HouseholderParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceSampleParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceSampleParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InstanceSampleParameter_SampleMethod_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MatrixMulParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatrixMulParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatrixMulStackParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatrixMulStackParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransposeParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransposeParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReshapeParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReshapeParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LearnableDropoutParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LearnableDropoutParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DimInnerProductParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DimInnerProductParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoftthrParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoftthrParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DropoutsameParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropoutsameParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiagOperationParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiagOperationParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoftMaxLossOHEMParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoftMaxLossOHEMParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoftMaxOHEMParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoftMaxOHEMParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoftMaxOHEMSplitParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoftMaxOHEMSplitParameter_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_caffe_2eproto() {
  protobuf_AddDesc_caffe_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "caffe.proto");
  GOOGLE_CHECK(file != NULL);
  BlobProto_descriptor_ = file->message_type(0);
  static const int BlobProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, diff_),
  };
  BlobProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobProto_descriptor_,
      BlobProto::default_instance_,
      BlobProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobProto));
  BlobProtoVector_descriptor_ = file->message_type(1);
  static const int BlobProtoVector_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProtoVector, blobs_),
  };
  BlobProtoVector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobProtoVector_descriptor_,
      BlobProtoVector::default_instance_,
      BlobProtoVector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProtoVector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProtoVector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobProtoVector));
  Datum_descriptor_ = file->message_type(2);
  static const int Datum_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, float_data_),
  };
  Datum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Datum_descriptor_,
      Datum::default_instance_,
      Datum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Datum));
  FillerParameter_descriptor_ = file->message_type(3);
  static const int FillerParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, std_),
  };
  FillerParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FillerParameter_descriptor_,
      FillerParameter::default_instance_,
      FillerParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FillerParameter));
  LayerParameter_descriptor_ = file->message_type(4);
  static const int LayerParameter_offsets_[58] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, blobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, blobs_lr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, weight_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, blob_source_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, concat_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, conv_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, data_bigfile_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, dropout_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, infogain_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, inner_product_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, lrn_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, pool_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, power_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, padding_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, spm_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, gpu_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, gpu_split_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, relu_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, learnable_leak_relu_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, update_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, batch_norm_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, record_internel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, eltwise_sum_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, clsloc_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, anchor_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, grid_generator_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, data_entry_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, sample_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, share_weights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, exp_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bound_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, cluster_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, online_kmeans_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, correlation_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, weight_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, scalebias_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, crop_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, reduce_dim_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, flip_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, step_gate_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, householder_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, instance_sample_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, matrix_mul_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, matrix_mul_stack_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, transpose_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, reshape_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, learnable_dropout_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, dim_innerproduct_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, softthr_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, dropoutsame_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, softmaxlossohem_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, softmaxohem_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, softmaxohemsplit_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, diag_operation_param_),
  };
  LayerParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LayerParameter_descriptor_,
      LayerParameter::default_instance_,
      LayerParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LayerParameter));
  LayerParameter_UpdateMethod_descriptor_ = LayerParameter_descriptor_->enum_type(0);
  ClusterParameter_descriptor_ = file->message_type(5);
  static const int ClusterParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterParameter, num_centers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterParameter, weight_filler_),
  };
  ClusterParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClusterParameter_descriptor_,
      ClusterParameter::default_instance_,
      ClusterParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClusterParameter));
  OnlineKMeansParameter_descriptor_ = file->message_type(6);
  static const int OnlineKMeansParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineKMeansParameter, update_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineKMeansParameter, update_iters_),
  };
  OnlineKMeansParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineKMeansParameter_descriptor_,
      OnlineKMeansParameter::default_instance_,
      OnlineKMeansParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineKMeansParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineKMeansParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineKMeansParameter));
  EltwiseSumParameter_descriptor_ = file->message_type(7);
  static const int EltwiseSumParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseSumParameter, coeff_),
  };
  EltwiseSumParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EltwiseSumParameter_descriptor_,
      EltwiseSumParameter::default_instance_,
      EltwiseSumParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseSumParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseSumParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EltwiseSumParameter));
  ReluParameter_descriptor_ = file->message_type(8);
  static const int ReluParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReluParameter, relu_leak_),
  };
  ReluParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReluParameter_descriptor_,
      ReluParameter::default_instance_,
      ReluParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReluParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReluParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReluParameter));
  LearnableLeakReluParameter_descriptor_ = file->message_type(9);
  static const int LearnableLeakReluParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnableLeakReluParameter, relu_leak_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnableLeakReluParameter, share_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnableLeakReluParameter, apply_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnableLeakReluParameter, bound_upper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnableLeakReluParameter, bound_lower_),
  };
  LearnableLeakReluParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LearnableLeakReluParameter_descriptor_,
      LearnableLeakReluParameter::default_instance_,
      LearnableLeakReluParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnableLeakReluParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnableLeakReluParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LearnableLeakReluParameter));
  LearnableLeakReluParameter_ShareParamMethod_descriptor_ = LearnableLeakReluParameter_descriptor_->enum_type(0);
  ExpParameter_descriptor_ = file->message_type(10);
  static const int ExpParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, slope_),
  };
  ExpParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpParameter_descriptor_,
      ExpParameter::default_instance_,
      ExpParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpParameter));
  BoundParameter_descriptor_ = file->message_type(11);
  static const int BoundParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundParameter, max_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundParameter, min_value_),
  };
  BoundParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoundParameter_descriptor_,
      BoundParameter::default_instance_,
      BoundParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoundParameter));
  BatchNormalizationParameter_descriptor_ = file->message_type(12);
  static const int BatchNormalizationParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormalizationParameter, scale_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormalizationParameter, shift_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormalizationParameter, record_option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormalizationParameter, sliding_window_eval_coeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormalizationParameter, keep_mean_),
  };
  BatchNormalizationParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchNormalizationParameter_descriptor_,
      BatchNormalizationParameter::default_instance_,
      BatchNormalizationParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormalizationParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormalizationParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchNormalizationParameter));
  BatchNormalizationParameter_RecordOption_descriptor_ = BatchNormalizationParameter_descriptor_->enum_type(0);
  GPUSplitParameter_descriptor_ = file->message_type(13);
  static const int GPUSplitParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUSplitParameter, split_minibatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUSplitParameter, split_gpu_id_),
  };
  GPUSplitParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPUSplitParameter_descriptor_,
      GPUSplitParameter::default_instance_,
      GPUSplitParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUSplitParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUSplitParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPUSplitParameter));
  ConcatParameter_descriptor_ = file->message_type(14);
  static const int ConcatParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, concat_dim_),
  };
  ConcatParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConcatParameter_descriptor_,
      ConcatParameter::default_instance_,
      ConcatParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConcatParameter));
  GridGeneratorParameter_descriptor_ = file->message_type(15);
  static const int GridGeneratorParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGeneratorParameter, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGeneratorParameter, grid_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGeneratorParameter, scale_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGeneratorParameter, scale_height_),
  };
  GridGeneratorParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GridGeneratorParameter_descriptor_,
      GridGeneratorParameter::default_instance_,
      GridGeneratorParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGeneratorParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGeneratorParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GridGeneratorParameter));
  GridGeneratorParameter_GridSizeOption_descriptor_ = GridGeneratorParameter_descriptor_->enum_type(0);
  SampleParameter_descriptor_ = file->message_type(16);
  static const int SampleParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleParameter, concat_output_),
  };
  SampleParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SampleParameter_descriptor_,
      SampleParameter::default_instance_,
      SampleParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SampleParameter));
  SampleParameter_ConcatOutputOption_descriptor_ = SampleParameter_descriptor_->enum_type(0);
  AnchorParameter_descriptor_ = file->message_type(17);
  static const int AnchorParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorParameter, spatial_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorParameter, spatial_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorParameter, central_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorParameter, spatial_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorParameter, spatial_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorParameter, aspect_ratio_),
  };
  AnchorParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnchorParameter_descriptor_,
      AnchorParameter::default_instance_,
      AnchorParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnchorParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnchorParameter));
  ConvolutionParameter_descriptor_ = file->message_type(18);
  static const int ConvolutionParameter_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, bias_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, bias_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, size_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, block_calc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, use_cudnn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, out_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, out_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, pad_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, pad_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, kernel_size_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, kernel_size_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, stride_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, stride_y_),
  };
  ConvolutionParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConvolutionParameter_descriptor_,
      ConvolutionParameter::default_instance_,
      ConvolutionParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConvolutionParameter));
  CorrelationParameter_descriptor_ = file->message_type(19);
  static const int CorrelationParameter_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrelationParameter, bias_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrelationParameter, pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrelationParameter, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrelationParameter, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrelationParameter, bias_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrelationParameter, size_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrelationParameter, block_calc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrelationParameter, out_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrelationParameter, out_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrelationParameter, pad_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrelationParameter, pad_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrelationParameter, stride_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrelationParameter, stride_y_),
  };
  CorrelationParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CorrelationParameter_descriptor_,
      CorrelationParameter::default_instance_,
      CorrelationParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrelationParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrelationParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CorrelationParameter));
  WeightParameter_descriptor_ = file->message_type(20);
  static const int WeightParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightParameter, weight_dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightParameter, weight_filler_),
  };
  WeightParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeightParameter_descriptor_,
      WeightParameter::default_instance_,
      WeightParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeightParameter));
  DataProcesser_descriptor_ = file->message_type(21);
  static const int DataProcesser_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataProcesser, processer_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataProcesser, binding_output_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataProcesser, threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataProcesser, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataProcesser, beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataProcesser, method_),
  };
  DataProcesser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataProcesser_descriptor_,
      DataProcesser::default_instance_,
      DataProcesser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataProcesser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataProcesser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataProcesser));
  DataParameter_BigFile_descriptor_ = file->message_type(22);
  static const int DataParameter_BigFile_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, mean_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, batch_img_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, channel_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, crop_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, crop_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, color_kl_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, random_shuffle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, overlap_thres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, object_windows_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, crop_ratio_upperbound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, crop_ratio_lowerbound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, interpolation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, aspect_ratio_variation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, scale_jitter_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, additional_data_processer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, cache_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, multilabel_def_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, metadata_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, random_crop_overlap_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, crop_preference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, crop_dim1_segs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, crop_dim2_segs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, crop_box_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, rcnn_pad_),
  };
  DataParameter_BigFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataParameter_BigFile_descriptor_,
      DataParameter_BigFile::default_instance_,
      DataParameter_BigFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter_BigFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataParameter_BigFile));
  DataParameter_BigFile_InterpolationType_descriptor_ = DataParameter_BigFile_descriptor_->enum_type(0);
  DataParameter_BigFile_ScaleJitterType_descriptor_ = DataParameter_BigFile_descriptor_->enum_type(1);
  DataParameter_BigFile_CropPreference_descriptor_ = DataParameter_BigFile_descriptor_->enum_type(2);
  DataEntryParameter_descriptor_ = file->message_type(23);
  static const int DataEntryParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataEntryParameter, entry_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataEntryParameter, entry_index_),
  };
  DataEntryParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataEntryParameter_descriptor_,
      DataEntryParameter::default_instance_,
      DataEntryParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataEntryParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataEntryParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataEntryParameter));
  DropoutParameter_descriptor_ = file->message_type(24);
  static const int DropoutParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, dropout_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, force_random_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, force_same_),
  };
  DropoutParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DropoutParameter_descriptor_,
      DropoutParameter::default_instance_,
      DropoutParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DropoutParameter));
  PaddingParameter_descriptor_ = file->message_type(25);
  static const int PaddingParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaddingParameter, pad_),
  };
  PaddingParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PaddingParameter_descriptor_,
      PaddingParameter::default_instance_,
      PaddingParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaddingParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaddingParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PaddingParameter));
  InfogainLossParameter_descriptor_ = file->message_type(26);
  static const int InfogainLossParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfogainLossParameter, source_),
  };
  InfogainLossParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InfogainLossParameter_descriptor_,
      InfogainLossParameter::default_instance_,
      InfogainLossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfogainLossParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfogainLossParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InfogainLossParameter));
  LossParameter_descriptor_ = file->message_type(27);
  static const int LossParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, coeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, display_result_),
  };
  LossParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LossParameter_descriptor_,
      LossParameter::default_instance_,
      LossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LossParameter));
  ClsLocLossParameter_descriptor_ = file->message_type(28);
  static const int ClsLocLossParameter_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsLocLossParameter, cls_coeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsLocLossParameter, loc_coeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsLocLossParameter, loc_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsLocLossParameter, user_def_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsLocLossParameter, loss_transform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsLocLossParameter, assign_reject_iou_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsLocLossParameter, cls_pos_iou_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsLocLossParameter, cls_neg_iou_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsLocLossParameter, prediction_box_classification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsLocLossParameter, auto_spatial_anchor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsLocLossParameter, expected_pos_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsLocLossParameter, expected_neg_num_),
  };
  ClsLocLossParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClsLocLossParameter_descriptor_,
      ClsLocLossParameter::default_instance_,
      ClsLocLossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsLocLossParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsLocLossParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClsLocLossParameter));
  ClsLocLossParameter_LocType_descriptor_ = ClsLocLossParameter_descriptor_->enum_type(0);
  ClsLocLossParameter_LossTransform_descriptor_ = ClsLocLossParameter_descriptor_->enum_type(1);
  InnerProductParameter_descriptor_ = file->message_type(29);
  static const int InnerProductParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, bias_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, bias_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, update_inplace_),
  };
  InnerProductParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InnerProductParameter_descriptor_,
      InnerProductParameter::default_instance_,
      InnerProductParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InnerProductParameter));
  LRNParameter_descriptor_ = file->message_type(30);
  static const int LRNParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, local_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, norm_region_),
  };
  LRNParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LRNParameter_descriptor_,
      LRNParameter::default_instance_,
      LRNParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LRNParameter));
  LRNParameter_NormRegion_descriptor_ = LRNParameter_descriptor_->enum_type(0);
  PoolingParameter_descriptor_ = file->message_type(31);
  static const int PoolingParameter_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, size_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pad_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pad_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, kernel_size_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, kernel_size_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, stride_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, stride_y_),
  };
  PoolingParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PoolingParameter_descriptor_,
      PoolingParameter::default_instance_,
      PoolingParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PoolingParameter));
  PoolingParameter_PoolMethod_descriptor_ = PoolingParameter_descriptor_->enum_type(0);
  SPMParameter_descriptor_ = file->message_type(32);
  static const int SPMParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPMParameter, pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPMParameter, cell_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPMParameter, cell_y_),
  };
  SPMParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPMParameter_descriptor_,
      SPMParameter::default_instance_,
      SPMParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPMParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPMParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPMParameter));
  SPMParameter_PoolMethod_descriptor_ = SPMParameter_descriptor_->enum_type(0);
  PowerParameter_descriptor_ = file->message_type(33);
  static const int PowerParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, shift_),
  };
  PowerParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PowerParameter_descriptor_,
      PowerParameter::default_instance_,
      PowerParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PowerParameter));
  LayerConnection_descriptor_ = file->message_type(34);
  static const int LayerConnection_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerConnection, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerConnection, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerConnection, top_),
  };
  LayerConnection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LayerConnection_descriptor_,
      LayerConnection::default_instance_,
      LayerConnection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerConnection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerConnection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LayerConnection));
  NetParameter_descriptor_ = file->message_type(35);
  static const int NetParameter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, layers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, input_dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, force_backward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, config_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, data_provider_name_),
  };
  NetParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetParameter_descriptor_,
      NetParameter::default_instance_,
      NetParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetParameter));
  SolverParameter_descriptor_ = file->message_type(36);
  static const int SolverParameter_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, train_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, base_lr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, max_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, lr_policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, momentum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, weight_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, stepsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, solver_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, vstep_lr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, vstep_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, num_threads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, train_primary_output_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_primary_output_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, update_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, ohem_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, dump_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, sim_update_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, data_split_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, bmuf_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, bmuf_lr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, bmuf_momentum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, bmuf_interval_),
  };
  SolverParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SolverParameter_descriptor_,
      SolverParameter::default_instance_,
      SolverParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SolverParameter));
  SolverState_descriptor_ = file->message_type(37);
  static const int SolverState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, learned_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, history_),
  };
  SolverState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SolverState_descriptor_,
      SolverState::default_instance_,
      SolverState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SolverState));
  ScaleBiasParameter_descriptor_ = file->message_type(38);
  static const int ScaleBiasParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleBiasParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleBiasParameter, bias_filler_),
  };
  ScaleBiasParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScaleBiasParameter_descriptor_,
      ScaleBiasParameter::default_instance_,
      ScaleBiasParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleBiasParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleBiasParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScaleBiasParameter));
  CropParameter_descriptor_ = file->message_type(39);
  static const int CropParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, crop_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, crop_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, crop_height_),
  };
  CropParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CropParameter_descriptor_,
      CropParameter::default_instance_,
      CropParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CropParameter));
  CropParameter_CropType_descriptor_ = CropParameter_descriptor_->enum_type(0);
  ReduceDimParameter_descriptor_ = file->message_type(40);
  static const int ReduceDimParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceDimParameter, dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceDimParameter, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceDimParameter, reduce_type_),
  };
  ReduceDimParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReduceDimParameter_descriptor_,
      ReduceDimParameter::default_instance_,
      ReduceDimParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceDimParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceDimParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReduceDimParameter));
  ReduceDimParameter_ReduceType_descriptor_ = ReduceDimParameter_descriptor_->enum_type(0);
  FlipParameter_descriptor_ = file->message_type(41);
  static const int FlipParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlipParameter, keep_original_),
  };
  FlipParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlipParameter_descriptor_,
      FlipParameter::default_instance_,
      FlipParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlipParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlipParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlipParameter));
  StepGateParameter_descriptor_ = file->message_type(42);
  static const int StepGateParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepGateParameter, init_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepGateParameter, step_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepGateParameter, max_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepGateParameter, keep_backward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepGateParameter, keep_forward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepGateParameter, start_iter_),
  };
  StepGateParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StepGateParameter_descriptor_,
      StepGateParameter::default_instance_,
      StepGateParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepGateParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepGateParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StepGateParameter));
  HouseholderParameter_descriptor_ = file->message_type(43);
  static const int HouseholderParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HouseholderParameter, source_),
  };
  HouseholderParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HouseholderParameter_descriptor_,
      HouseholderParameter::default_instance_,
      HouseholderParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HouseholderParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HouseholderParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HouseholderParameter));
  InstanceSampleParameter_descriptor_ = file->message_type(44);
  static const int InstanceSampleParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceSampleParameter, sample_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceSampleParameter, num_),
  };
  InstanceSampleParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceSampleParameter_descriptor_,
      InstanceSampleParameter::default_instance_,
      InstanceSampleParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceSampleParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceSampleParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceSampleParameter));
  InstanceSampleParameter_SampleMethod_descriptor_ = InstanceSampleParameter_descriptor_->enum_type(0);
  MatrixMulParameter_descriptor_ = file->message_type(45);
  static const int MatrixMulParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixMulParameter, trans_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixMulParameter, trans_b_),
  };
  MatrixMulParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatrixMulParameter_descriptor_,
      MatrixMulParameter::default_instance_,
      MatrixMulParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixMulParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixMulParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatrixMulParameter));
  MatrixMulStackParameter_descriptor_ = file->message_type(46);
  static const int MatrixMulStackParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixMulStackParameter, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixMulStackParameter, trans_odd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixMulStackParameter, trans_even_),
  };
  MatrixMulStackParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatrixMulStackParameter_descriptor_,
      MatrixMulStackParameter::default_instance_,
      MatrixMulStackParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixMulStackParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixMulStackParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatrixMulStackParameter));
  TransposeParameter_descriptor_ = file->message_type(47);
  static const int TransposeParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransposeParameter, lead_dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransposeParameter, output_dims_),
  };
  TransposeParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransposeParameter_descriptor_,
      TransposeParameter::default_instance_,
      TransposeParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransposeParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransposeParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransposeParameter));
  ReshapeParameter_descriptor_ = file->message_type(48);
  static const int ReshapeParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, dims_),
  };
  ReshapeParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReshapeParameter_descriptor_,
      ReshapeParameter::default_instance_,
      ReshapeParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReshapeParameter));
  LearnableDropoutParameter_descriptor_ = file->message_type(49);
  static const int LearnableDropoutParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnableDropoutParameter, init_value_),
  };
  LearnableDropoutParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LearnableDropoutParameter_descriptor_,
      LearnableDropoutParameter::default_instance_,
      LearnableDropoutParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnableDropoutParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnableDropoutParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LearnableDropoutParameter));
  DimInnerProductParameter_descriptor_ = file->message_type(50);
  static const int DimInnerProductParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimInnerProductParameter, dim_),
  };
  DimInnerProductParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DimInnerProductParameter_descriptor_,
      DimInnerProductParameter::default_instance_,
      DimInnerProductParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimInnerProductParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimInnerProductParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DimInnerProductParameter));
  SoftthrParameter_descriptor_ = file->message_type(51);
  static const int SoftthrParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftthrParameter, softthr_thr_),
  };
  SoftthrParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoftthrParameter_descriptor_,
      SoftthrParameter::default_instance_,
      SoftthrParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftthrParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftthrParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoftthrParameter));
  DropoutsameParameter_descriptor_ = file->message_type(52);
  static const int DropoutsameParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutsameParameter, dropout_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutsameParameter, force_random_),
  };
  DropoutsameParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DropoutsameParameter_descriptor_,
      DropoutsameParameter::default_instance_,
      DropoutsameParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutsameParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutsameParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DropoutsameParameter));
  DiagOperationParameter_descriptor_ = file->message_type(53);
  static const int DiagOperationParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagOperationParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagOperationParameter, shift_),
  };
  DiagOperationParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiagOperationParameter_descriptor_,
      DiagOperationParameter::default_instance_,
      DiagOperationParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagOperationParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagOperationParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiagOperationParameter));
  SoftMaxLossOHEMParameter_descriptor_ = file->message_type(54);
  static const int SoftMaxLossOHEMParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftMaxLossOHEMParameter, ohem_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftMaxLossOHEMParameter, force_random_),
  };
  SoftMaxLossOHEMParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoftMaxLossOHEMParameter_descriptor_,
      SoftMaxLossOHEMParameter::default_instance_,
      SoftMaxLossOHEMParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftMaxLossOHEMParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftMaxLossOHEMParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoftMaxLossOHEMParameter));
  SoftMaxOHEMParameter_descriptor_ = file->message_type(55);
  static const int SoftMaxOHEMParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftMaxOHEMParameter, ohem_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftMaxOHEMParameter, force_random_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftMaxOHEMParameter, use_max_loss_),
  };
  SoftMaxOHEMParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoftMaxOHEMParameter_descriptor_,
      SoftMaxOHEMParameter::default_instance_,
      SoftMaxOHEMParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftMaxOHEMParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftMaxOHEMParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoftMaxOHEMParameter));
  SoftMaxOHEMSplitParameter_descriptor_ = file->message_type(56);
  static const int SoftMaxOHEMSplitParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftMaxOHEMSplitParameter, ohem_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftMaxOHEMSplitParameter, force_random_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftMaxOHEMSplitParameter, use_max_loss_),
  };
  SoftMaxOHEMSplitParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoftMaxOHEMSplitParameter_descriptor_,
      SoftMaxOHEMSplitParameter::default_instance_,
      SoftMaxOHEMSplitParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftMaxOHEMSplitParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftMaxOHEMSplitParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoftMaxOHEMSplitParameter));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_caffe_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobProto_descriptor_, &BlobProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobProtoVector_descriptor_, &BlobProtoVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Datum_descriptor_, &Datum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FillerParameter_descriptor_, &FillerParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LayerParameter_descriptor_, &LayerParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClusterParameter_descriptor_, &ClusterParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineKMeansParameter_descriptor_, &OnlineKMeansParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EltwiseSumParameter_descriptor_, &EltwiseSumParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReluParameter_descriptor_, &ReluParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LearnableLeakReluParameter_descriptor_, &LearnableLeakReluParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpParameter_descriptor_, &ExpParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoundParameter_descriptor_, &BoundParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchNormalizationParameter_descriptor_, &BatchNormalizationParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPUSplitParameter_descriptor_, &GPUSplitParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConcatParameter_descriptor_, &ConcatParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GridGeneratorParameter_descriptor_, &GridGeneratorParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SampleParameter_descriptor_, &SampleParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnchorParameter_descriptor_, &AnchorParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConvolutionParameter_descriptor_, &ConvolutionParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CorrelationParameter_descriptor_, &CorrelationParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeightParameter_descriptor_, &WeightParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataProcesser_descriptor_, &DataProcesser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataParameter_BigFile_descriptor_, &DataParameter_BigFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataEntryParameter_descriptor_, &DataEntryParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DropoutParameter_descriptor_, &DropoutParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PaddingParameter_descriptor_, &PaddingParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InfogainLossParameter_descriptor_, &InfogainLossParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LossParameter_descriptor_, &LossParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClsLocLossParameter_descriptor_, &ClsLocLossParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InnerProductParameter_descriptor_, &InnerProductParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LRNParameter_descriptor_, &LRNParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PoolingParameter_descriptor_, &PoolingParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPMParameter_descriptor_, &SPMParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PowerParameter_descriptor_, &PowerParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LayerConnection_descriptor_, &LayerConnection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetParameter_descriptor_, &NetParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SolverParameter_descriptor_, &SolverParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SolverState_descriptor_, &SolverState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScaleBiasParameter_descriptor_, &ScaleBiasParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CropParameter_descriptor_, &CropParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReduceDimParameter_descriptor_, &ReduceDimParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlipParameter_descriptor_, &FlipParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StepGateParameter_descriptor_, &StepGateParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HouseholderParameter_descriptor_, &HouseholderParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceSampleParameter_descriptor_, &InstanceSampleParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatrixMulParameter_descriptor_, &MatrixMulParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatrixMulStackParameter_descriptor_, &MatrixMulStackParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransposeParameter_descriptor_, &TransposeParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReshapeParameter_descriptor_, &ReshapeParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LearnableDropoutParameter_descriptor_, &LearnableDropoutParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DimInnerProductParameter_descriptor_, &DimInnerProductParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoftthrParameter_descriptor_, &SoftthrParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DropoutsameParameter_descriptor_, &DropoutsameParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiagOperationParameter_descriptor_, &DiagOperationParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoftMaxLossOHEMParameter_descriptor_, &SoftMaxLossOHEMParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoftMaxOHEMParameter_descriptor_, &SoftMaxOHEMParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoftMaxOHEMSplitParameter_descriptor_, &SoftMaxOHEMSplitParameter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_caffe_2eproto() {
  delete BlobProto::default_instance_;
  delete BlobProto_reflection_;
  delete BlobProtoVector::default_instance_;
  delete BlobProtoVector_reflection_;
  delete Datum::default_instance_;
  delete Datum_reflection_;
  delete FillerParameter::default_instance_;
  delete FillerParameter_reflection_;
  delete LayerParameter::default_instance_;
  delete LayerParameter_reflection_;
  delete ClusterParameter::default_instance_;
  delete ClusterParameter_reflection_;
  delete OnlineKMeansParameter::default_instance_;
  delete OnlineKMeansParameter_reflection_;
  delete EltwiseSumParameter::default_instance_;
  delete EltwiseSumParameter_reflection_;
  delete ReluParameter::default_instance_;
  delete ReluParameter_reflection_;
  delete LearnableLeakReluParameter::default_instance_;
  delete LearnableLeakReluParameter_reflection_;
  delete ExpParameter::default_instance_;
  delete ExpParameter_reflection_;
  delete BoundParameter::default_instance_;
  delete BoundParameter_reflection_;
  delete BatchNormalizationParameter::default_instance_;
  delete BatchNormalizationParameter_reflection_;
  delete GPUSplitParameter::default_instance_;
  delete GPUSplitParameter_reflection_;
  delete ConcatParameter::default_instance_;
  delete ConcatParameter_reflection_;
  delete GridGeneratorParameter::default_instance_;
  delete GridGeneratorParameter_reflection_;
  delete SampleParameter::default_instance_;
  delete SampleParameter_reflection_;
  delete AnchorParameter::default_instance_;
  delete AnchorParameter_reflection_;
  delete ConvolutionParameter::default_instance_;
  delete ConvolutionParameter_reflection_;
  delete CorrelationParameter::default_instance_;
  delete CorrelationParameter_reflection_;
  delete WeightParameter::default_instance_;
  delete WeightParameter_reflection_;
  delete DataProcesser::default_instance_;
  delete DataProcesser_reflection_;
  delete DataParameter_BigFile::default_instance_;
  delete DataParameter_BigFile_reflection_;
  delete DataEntryParameter::default_instance_;
  delete DataEntryParameter_reflection_;
  delete DropoutParameter::default_instance_;
  delete DropoutParameter_reflection_;
  delete PaddingParameter::default_instance_;
  delete PaddingParameter_reflection_;
  delete InfogainLossParameter::default_instance_;
  delete InfogainLossParameter_reflection_;
  delete LossParameter::default_instance_;
  delete LossParameter_reflection_;
  delete ClsLocLossParameter::default_instance_;
  delete ClsLocLossParameter_reflection_;
  delete InnerProductParameter::default_instance_;
  delete InnerProductParameter_reflection_;
  delete LRNParameter::default_instance_;
  delete LRNParameter_reflection_;
  delete PoolingParameter::default_instance_;
  delete PoolingParameter_reflection_;
  delete SPMParameter::default_instance_;
  delete SPMParameter_reflection_;
  delete PowerParameter::default_instance_;
  delete PowerParameter_reflection_;
  delete LayerConnection::default_instance_;
  delete LayerConnection_reflection_;
  delete NetParameter::default_instance_;
  delete NetParameter_reflection_;
  delete SolverParameter::default_instance_;
  delete SolverParameter_reflection_;
  delete SolverState::default_instance_;
  delete SolverState_reflection_;
  delete ScaleBiasParameter::default_instance_;
  delete ScaleBiasParameter_reflection_;
  delete CropParameter::default_instance_;
  delete CropParameter_reflection_;
  delete ReduceDimParameter::default_instance_;
  delete ReduceDimParameter_reflection_;
  delete FlipParameter::default_instance_;
  delete FlipParameter_reflection_;
  delete StepGateParameter::default_instance_;
  delete StepGateParameter_reflection_;
  delete HouseholderParameter::default_instance_;
  delete HouseholderParameter_reflection_;
  delete InstanceSampleParameter::default_instance_;
  delete InstanceSampleParameter_reflection_;
  delete MatrixMulParameter::default_instance_;
  delete MatrixMulParameter_reflection_;
  delete MatrixMulStackParameter::default_instance_;
  delete MatrixMulStackParameter_reflection_;
  delete TransposeParameter::default_instance_;
  delete TransposeParameter_reflection_;
  delete ReshapeParameter::default_instance_;
  delete ReshapeParameter_reflection_;
  delete LearnableDropoutParameter::default_instance_;
  delete LearnableDropoutParameter_reflection_;
  delete DimInnerProductParameter::default_instance_;
  delete DimInnerProductParameter_reflection_;
  delete SoftthrParameter::default_instance_;
  delete SoftthrParameter_reflection_;
  delete DropoutsameParameter::default_instance_;
  delete DropoutsameParameter_reflection_;
  delete DiagOperationParameter::default_instance_;
  delete DiagOperationParameter_reflection_;
  delete SoftMaxLossOHEMParameter::default_instance_;
  delete SoftMaxLossOHEMParameter_reflection_;
  delete SoftMaxOHEMParameter::default_instance_;
  delete SoftMaxOHEMParameter_reflection_;
  delete SoftMaxOHEMSplitParameter::default_instance_;
  delete SoftMaxOHEMSplitParameter_reflection_;
}

void protobuf_AddDesc_caffe_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013caffe.proto\022\010caffepro\"y\n\tBlobProto\022\016\n\003"
    "num\030\001 \001(\005:\0010\022\023\n\010channels\030\002 \001(\005:\0010\022\021\n\006hei"
    "ght\030\003 \001(\005:\0010\022\020\n\005width\030\004 \001(\005:\0010\022\020\n\004data\030\005"
    " \003(\002B\002\020\001\022\020\n\004diff\030\006 \003(\002B\002\020\001\"5\n\017BlobProtoV"
    "ector\022\"\n\005blobs\030\001 \003(\0132\023.caffepro.BlobProt"
    "o\"i\n\005Datum\022\020\n\010channels\030\001 \001(\005\022\016\n\006height\030\002"
    " \001(\005\022\r\n\005width\030\003 \001(\005\022\014\n\004data\030\004 \001(\014\022\r\n\005lab"
    "el\030\005 \001(\005\022\022\n\nfloat_data\030\006 \003(\002\"|\n\017FillerPa"
    "rameter\022\026\n\004type\030\001 \001(\t:\010constant\022\020\n\005value"
    "\030\002 \001(\002:\0010\022\016\n\003min\030\003 \001(\002:\0010\022\016\n\003max\030\004 \001(\002:\001"
    "1\022\017\n\004mean\030\005 \001(\002:\0010\022\016\n\003std\030\006 \001(\002:\0011\"\237\027\n\016L"
    "ayerParameter\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001("
    "\t\022\"\n\005blobs\030\003 \003(\0132\023.caffepro.BlobProto\022\020\n"
    "\010blobs_lr\030\004 \003(\002\022\024\n\014weight_decay\030\005 \003(\002\022\031\n"
    "\021blob_source_layer\030\006 \003(\t\022/\n\014concat_param"
    "\030\010 \001(\0132\031.caffepro.ConcatParameter\0222\n\ncon"
    "v_param\030\t \001(\0132\036.caffepro.ConvolutionPara"
    "meter\022;\n\022data_bigfile_param\030\013 \001(\0132\037.caff"
    "epro.DataParameter_BigFile\0221\n\rdropout_pa"
    "ram\030\014 \001(\0132\032.caffepro.DropoutParameter\022<\n"
    "\023infogain_loss_param\030\020 \001(\0132\037.caffepro.In"
    "fogainLossParameter\022<\n\023inner_product_par"
    "am\030\021 \001(\0132\037.caffepro.InnerProductParamete"
    "r\022)\n\tlrn_param\030\022 \001(\0132\026.caffepro.LRNParam"
    "eter\022.\n\npool_param\030\023 \001(\0132\032.caffepro.Pool"
    "ingParameter\022-\n\013power_param\030\024 \001(\0132\030.caff"
    "epro.PowerParameter\0221\n\rpadding_param\030\027 \001"
    "(\0132\032.caffepro.PaddingParameter\022)\n\tspm_pa"
    "ram\030\030 \001(\0132\026.caffepro.SPMParameter\022\022\n\006gpu"
    "_id\030\036 \001(\005:\002-1\022.\n\tgpu_split\030\037 \001(\0132\033.caffe"
    "pro.GPUSplitParameter\022+\n\nloss_param\030\" \001("
    "\0132\027.caffepro.LossParameter\022\025\n\006record\030# \001"
    "(\010:\005false\022+\n\nrelu_param\030$ \001(\0132\027.caffepro"
    ".ReluParameter\022G\n\031learnable_leak_relu_pa"
    "ram\030% \001(\0132$.caffepro.LearnableLeakReluPa"
    "rameter\022<\n\rupdate_method\030& \003(\0162%.caffepr"
    "o.LayerParameter.UpdateMethod\022\?\n\020batch_n"
    "orm_param\030( \001(\0132%.caffepro.BatchNormaliz"
    "ationParameter\022\036\n\017record_internel\030) \001(\010:"
    "\005false\0228\n\021eltwise_sum_param\030, \001(\0132\035.caff"
    "epro.EltwiseSumParameter\0228\n\021clsloc_loss_"
    "param\0300 \001(\0132\035.caffepro.ClsLocLossParamet"
    "er\022/\n\014anchor_param\0301 \001(\0132\031.caffepro.Anch"
    "orParameter\022>\n\024grid_generator_param\0304 \001("
    "\0132 .caffepro.GridGeneratorParameter\0226\n\020d"
    "ata_entry_param\0305 \001(\0132\034.caffepro.DataEnt"
    "ryParameter\022/\n\014sample_param\0306 \001(\0132\031.caff"
    "epro.SampleParameter\022\025\n\rshare_weights\0307 "
    "\001(\t\022)\n\texp_param\0308 \001(\0132\026.caffepro.ExpPar"
    "ameter\022-\n\013bound_param\0309 \001(\0132\030.caffepro.B"
    "oundParameter\0221\n\rcluster_param\030: \001(\0132\032.c"
    "affepro.ClusterParameter\022<\n\023online_kmean"
    "s_param\030; \001(\0132\037.caffepro.OnlineKMeansPar"
    "ameter\0229\n\021correlation_param\030< \001(\0132\036.caff"
    "epro.CorrelationParameter\022/\n\014weight_para"
    "m\030= \001(\0132\031.caffepro.WeightParameter\0225\n\017sc"
    "alebias_param\030> \001(\0132\034.caffepro.ScaleBias"
    "Parameter\022+\n\ncrop_param\030\? \001(\0132\027.caffepro"
    ".CropParameter\0226\n\020reduce_dim_param\030@ \001(\013"
    "2\034.caffepro.ReduceDimParameter\022+\n\nflip_p"
    "aram\030A \001(\0132\027.caffepro.FlipParameter\0224\n\017s"
    "tep_gate_param\030B \001(\0132\033.caffepro.StepGate"
    "Parameter\0229\n\021householder_param\030C \001(\0132\036.c"
    "affepro.HouseholderParameter\022@\n\025instance"
    "_sample_param\030D \001(\0132!.caffepro.InstanceS"
    "ampleParameter\0226\n\020matrix_mul_param\030E \001(\013"
    "2\034.caffepro.MatrixMulParameter\022A\n\026matrix"
    "_mul_stack_param\030F \001(\0132!.caffepro.Matrix"
    "MulStackParameter\0225\n\017transpose_param\030G \001"
    "(\0132\034.caffepro.TransposeParameter\0221\n\rresh"
    "ape_param\030H \001(\0132\032.caffepro.ReshapeParame"
    "ter\022D\n\027learnable_dropout_param\030I \001(\0132#.c"
    "affepro.LearnableDropoutParameter\022B\n\026dim"
    "_innerproduct_param\030J \001(\0132\".caffepro.Dim"
    "InnerProductParameter\0221\n\rsoftthr_param\030K"
    " \001(\0132\032.caffepro.SoftthrParameter\0225\n\021drop"
    "outsame_param\030L \001(\0132\032.caffepro.DropoutPa"
    "rameter\022A\n\025softmaxlossohem_param\030M \001(\0132\""
    ".caffepro.SoftMaxLossOHEMParameter\0229\n\021so"
    "ftmaxohem_param\030N \001(\0132\036.caffepro.SoftMax"
    "OHEMParameter\022C\n\026softmaxohemsplit_param\030"
    "O \001(\0132#.caffepro.SoftMaxOHEMSplitParamet"
    "er\022>\n\024diag_operation_param\030P \001(\0132 .caffe"
    "pro.DiagOperationParameter\"@\n\014UpdateMeth"
    "od\022\n\n\006NORMAL\020\000\022\013\n\007ADAGRAD\020\001\022\027\n\023ADAGRAD_R"
    "ECORD_ONLY\020\002\"Y\n\020ClusterParameter\022\023\n\013num_"
    "centers\030\001 \002(\005\0220\n\rweight_filler\030\002 \001(\0132\031.c"
    "affepro.FillerParameter\"F\n\025OnlineKMeansP"
    "arameter\022\027\n\017update_interval\030\001 \002(\005\022\024\n\014upd"
    "ate_iters\030\002 \002(\005\"$\n\023EltwiseSumParameter\022\r"
    "\n\005coeff\030\001 \003(\002\"%\n\rReluParameter\022\024\n\trelu_l"
    "eak\030\001 \001(\002:\0010\"\221\002\n\032LearnableLeakReluParame"
    "ter\0222\n\017relu_leak_param\030\001 \002(\0132\031.caffepro."
    "FillerParameter\022J\n\013share_param\030\002 \002(\01625.c"
    "affepro.LearnableLeakReluParameter.Share"
    "ParamMethod\022\031\n\013apply_bound\030\003 \001(\010:\004true\022\026"
    "\n\013bound_upper\030\004 \001(\002:\0011\022\026\n\013bound_lower\030\005 "
    "\001(\002:\0010\"(\n\020ShareParamMethod\022\013\n\007CHANNEL\020\000\022"
    "\007\n\003ALL\020\001\" \n\014ExpParameter\022\020\n\005slope\030\001 \001(\002:"
    "\0011\"6\n\016BoundParameter\022\021\n\tmax_value\030\001 \002(\002\022"
    "\021\n\tmin_value\030\002 \002(\002\"\346\002\n\033BatchNormalizatio"
    "nParameter\022/\n\014scale_filler\030\001 \002(\0132\031.caffe"
    "pro.FillerParameter\022/\n\014shift_filler\030\002 \002("
    "\0132\031.caffepro.FillerParameter\022U\n\rrecord_o"
    "ption\030\003 \001(\01622.caffepro.BatchNormalizatio"
    "nParameter.RecordOption:\nNOT_RECORD\022%\n\031s"
    "liding_window_eval_coeff\030\004 \001(\002:\002-1\022\030\n\tke"
    "ep_mean\030\005 \001(\010:\005false\"M\n\014RecordOption\022\016\n\n"
    "NOT_RECORD\020\000\022\n\n\006RECORD\020\001\022\023\n\017USE_RECORD_N"
    "ORM\020\002\022\014\n\010NOT_CALC\020\003\"B\n\021GPUSplitParameter"
    "\022\027\n\017split_minibatch\030\001 \003(\005\022\024\n\014split_gpu_i"
    "d\030\002 \003(\005\"(\n\017ConcatParameter\022\025\n\nconcat_dim"
    "\030\001 \001(\r:\0011\"\325\001\n\026GridGeneratorParameter\022\016\n\006"
    "method\030\001 \002(\t\022L\n\tgrid_size\030\002 \001(\0162/.caffep"
    "ro.GridGeneratorParameter.GridSizeOption"
    ":\010RELATIVE\022\026\n\013scale_width\030\003 \001(\002:\0011\022\027\n\014sc"
    "ale_height\030\004 \001(\002:\0011\",\n\016GridSizeOption\022\014\n"
    "\010RELATIVE\020\000\022\014\n\010ABSOLUTE\020\001\"\213\001\n\017SamplePara"
    "meter\022L\n\rconcat_output\030\001 \001(\0162,.caffepro."
    "SampleParameter.ConcatOutputOption:\007CHAN"
    "NEL\"*\n\022ConcatOutputOption\022\013\n\007CHANNEL\020\000\022\007"
    "\n\003NUM\020\001\"\232\001\n\017AnchorParameter\022\025\n\rspatial_w"
    "idth\030\001 \002(\005\022\026\n\016spatial_height\030\002 \002(\005\022\025\n\rce"
    "ntral_scale\030\003 \003(\002\022\025\n\rspatial_start\030\004 \001(\002"
    "\022\024\n\014spatial_step\030\005 \001(\002\022\024\n\014aspect_ratio\030\006"
    " \003(\002\"\346\003\n\024ConvolutionParameter\022\022\n\nnum_out"
    "put\030\001 \001(\r\022\027\n\tbias_term\030\002 \001(\010:\004true\022\016\n\003pa"
    "d\030\003 \001(\005:\0010\022\023\n\013kernel_size\030\004 \001(\r\022\020\n\005group"
    "\030\005 \001(\r:\0011\022\021\n\006stride\030\006 \001(\r:\0011\0220\n\rweight_f"
    "iller\030\007 \001(\0132\031.caffepro.FillerParameter\022."
    "\n\013bias_filler\030\010 \001(\0132\031.caffepro.FillerPar"
    "ameter\022\030\n\nsize_floor\030\t \001(\010:\004true\022\022\n\nbloc"
    "k_calc\030\n \003(\r\022\030\n\tuse_cudnn\030\013 \001(\010:\005false\022\024"
    "\n\tout_width\030\014 \001(\005:\0010\022\025\n\nout_height\030\r \001(\005"
    ":\0010\022\020\n\005pad_x\030\016 \001(\005:\0010\022\020\n\005pad_y\030\017 \001(\005:\0010\022"
    "\030\n\rkernel_size_x\030\020 \001(\005:\0010\022\030\n\rkernel_size"
    "_y\030\021 \001(\005:\0010\022\023\n\010stride_x\030\022 \001(\005:\0011\022\023\n\010stri"
    "de_y\030\023 \001(\005:\0011\"\275\002\n\024CorrelationParameter\022\027"
    "\n\tbias_term\030\002 \001(\010:\004true\022\016\n\003pad\030\003 \001(\005:\0010\022"
    "\020\n\005group\030\005 \001(\r:\0011\022\021\n\006stride\030\006 \001(\r:\0011\022.\n\013"
    "bias_filler\030\010 \001(\0132\031.caffepro.FillerParam"
    "eter\022\030\n\nsize_floor\030\t \001(\010:\004true\022\022\n\nblock_"
    "calc\030\n \003(\r\022\024\n\tout_width\030\014 \001(\005:\0010\022\025\n\nout_"
    "height\030\r \001(\005:\0010\022\020\n\005pad_x\030\016 \001(\005:\0010\022\020\n\005pad"
    "_y\030\017 \001(\005:\0010\022\023\n\010stride_x\030\022 \001(\005:\0011\022\023\n\010stri"
    "de_y\030\023 \001(\005:\0011\"W\n\017WeightParameter\022\022\n\nweig"
    "ht_dim\030\001 \003(\r\0220\n\rweight_filler\030\002 \001(\0132\031.ca"
    "ffepro.FillerParameter\"\205\001\n\rDataProcesser"
    "\022\026\n\016processer_type\030\001 \002(\t\022\034\n\024binding_outp"
    "ut_index\030\002 \003(\005\022\021\n\tthreshold\030\003 \003(\002\022\r\n\005alp"
    "ha\030\004 \003(\002\022\014\n\004beta\030\005 \003(\002\022\016\n\006method\030\006 \003(\t\"\347"
    "\010\n\025DataParameter_BigFile\022\016\n\006source\030\001 \001(\t"
    "\022\020\n\005scale\030\002 \001(\002:\0011\022\021\n\tmean_file\030\003 \001(\t\022\022\n"
    "\nbatch_size\030\004 \001(\r\022\031\n\016batch_img_size\030\005 \001("
    "\r:\0010\022\023\n\013channel_num\030\006 \003(\r\022\024\n\tcrop_type\030\007"
    " \001(\r:\0010\022\025\n\ncrop_ratio\030\010 \001(\002:\0011\022\024\n\014color_"
    "kl_dir\030\t \001(\t\022\034\n\016random_shuffle\030\013 \001(\010:\004tr"
    "ue\022\030\n\roverlap_thres\030\014 \001(\002:\0010\022\032\n\022object_w"
    "indows_dir\030\r \001(\t\022!\n\025crop_ratio_upperboun"
    "d\030\016 \001(\002:\002-1\022!\n\025crop_ratio_lowerbound\030\017 \001"
    "(\002:\002-1\022H\n\rinterpolation\030\020 \003(\01621.caffepro"
    ".DataParameter_BigFile.InterpolationType"
    "\022!\n\026aspect_ratio_variation\030\021 \001(\002:\0010\022T\n\021s"
    "cale_jitter_type\030\022 \001(\0162/.caffepro.DataPa"
    "rameter_BigFile.ScaleJitterType:\010UniRati"
    "o\022:\n\031additional_data_processer\030\023 \003(\0132\027.c"
    "affepro.DataProcesser\022\030\n\ncache_data\030\024 \001("
    "\010:\004true\022\033\n\023multilabel_def_file\030\025 \001(\t\022\025\n\r"
    "metadata_file\030\026 \001(\t\022(\n\035random_crop_overl"
    "ap_threshold\030\027 \001(\002:\0010\022Q\n\017crop_preference"
    "\030\030 \001(\0162..caffepro.DataParameter_BigFile."
    "CropPreference:\010IoCThres\022\026\n\016crop_dim1_se"
    "gs\030\031 \001(\005\022\026\n\016crop_dim2_segs\030\032 \001(\005\022\025\n\rcrop"
    "_box_file\030\033 \001(\t\022\020\n\010rcnn_pad\030\034 \001(\002\";\n\021Int"
    "erpolationType\022\014\n\010Bilinear\020\000\022\013\n\007Bicubic\020"
    "\001\022\013\n\007Lanczos\020\002\"J\n\017ScaleJitterType\022\014\n\010Uni"
    "Ratio\020\000\022\r\n\tUniLength\020\001\022\013\n\007UniArea\020\002\022\r\n\tU"
    "niAreaV2\020\003\"L\n\016CropPreference\022\014\n\010IoCThres"
    "\020\000\022\n\n\006IoUMax\020\001\022\014\n\010IoUThres\020\002\022\022\n\016AnchorMa"
    "xThres\020\003\"@\n\022DataEntryParameter\022\022\n\nentry_"
    "name\030\001 \002(\t\022\026\n\013entry_index\030\002 \001(\005:\0010\"f\n\020Dr"
    "opoutParameter\022\032\n\rdropout_ratio\030\001 \001(\002:\0030"
    ".5\022\033\n\014force_random\030\002 \001(\010:\005false\022\031\n\nforce"
    "_same\030\003 \001(\010:\005false\"\"\n\020PaddingParameter\022\016"
    "\n\003pad\030\001 \001(\r:\0010\"\'\n\025InfogainLossParameter\022"
    "\016\n\006source\030\001 \001(\t\"\?\n\rLossParameter\022\020\n\005coef"
    "f\030\001 \001(\002:\0011\022\034\n\016display_result\030\002 \001(\010:\004true"
    "\"\242\004\n\023ClsLocLossParameter\022\024\n\tcls_coeff\030\001 "
    "\001(\002:\0011\022\024\n\tloc_coeff\030\002 \001(\002:\0011\022<\n\010loc_type"
    "\030\003 \001(\0162%.caffepro.ClsLocLossParameter.Lo"
    "cType:\003PCR\022\025\n\ruser_def_file\030\004 \001(\t\022I\n\016los"
    "s_transform\030\005 \001(\0162+.caffepro.ClsLocLossP"
    "arameter.LossTransform:\004LTRB\022\036\n\021assign_r"
    "eject_iou\030\006 \001(\002:\0030.2\022\030\n\013cls_pos_iou\030\007 \001("
    "\002:\0030.5\022\030\n\013cls_neg_iou\030\010 \001(\002:\0030.2\022,\n\035pred"
    "iction_box_classification\030\t \001(\010:\005false\022\""
    "\n\023auto_spatial_anchor\030\n \001(\010:\005false\022\034\n\020ex"
    "pected_pos_num\030\013 \001(\005:\002-1\022\034\n\020expected_neg"
    "_num\030\014 \001(\005:\002-1\"-\n\007LocType\022\007\n\003PCR\020\000\022\007\n\003SC"
    "R\020\001\022\020\n\014USER_DEFINED\020\002\".\n\rLossTransform\022\010"
    "\n\004LTRB\020\000\022\023\n\017CX_CY_LOGW_LOGH\020\001\"\305\001\n\025InnerP"
    "roductParameter\022\022\n\nnum_output\030\001 \001(\r\022\027\n\tb"
    "ias_term\030\002 \001(\010:\004true\0220\n\rweight_filler\030\003 "
    "\001(\0132\031.caffepro.FillerParameter\022.\n\013bias_f"
    "iller\030\004 \001(\0132\031.caffepro.FillerParameter\022\035"
    "\n\016update_inplace\030\005 \001(\010:\005false\"\313\001\n\014LRNPar"
    "ameter\022\025\n\nlocal_size\030\001 \001(\r:\0015\022\020\n\005alpha\030\002"
    " \001(\002:\0011\022\022\n\004beta\030\003 \001(\002:\0040.75\022G\n\013norm_regi"
    "on\030\004 \001(\0162!.caffepro.LRNParameter.NormReg"
    "ion:\017ACROSS_CHANNELS\"5\n\nNormRegion\022\023\n\017AC"
    "ROSS_CHANNELS\020\000\022\022\n\016WITHIN_CHANNEL\020\001\"\321\002\n\020"
    "PoolingParameter\0228\n\004pool\030\001 \001(\0162%.caffepr"
    "o.PoolingParameter.PoolMethod:\003MAX\022\023\n\013ke"
    "rnel_size\030\002 \001(\r\022\021\n\006stride\030\003 \001(\r:\0011\022\031\n\nsi"
    "ze_floor\030\004 \001(\010:\005false\022\016\n\003pad\030\005 \001(\005:\0010\022\020\n"
    "\005pad_x\030\006 \001(\005:\0010\022\020\n\005pad_y\030\007 \001(\005:\0010\022\030\n\rker"
    "nel_size_x\030\010 \001(\005:\0010\022\030\n\rkernel_size_y\030\t \001"
    "(\005:\0010\022\023\n\010stride_x\030\n \001(\005:\0011\022\023\n\010stride_y\030\013"
    " \001(\005:\0011\".\n\nPoolMethod\022\007\n\003MAX\020\000\022\007\n\003AVE\020\001\022"
    "\016\n\nSTOCHASTIC\020\002\"\224\001\n\014SPMParameter\0224\n\004pool"
    "\030\001 \001(\0162!.caffepro.SPMParameter.PoolMetho"
    "d:\003MAX\022\016\n\006cell_x\030\002 \001(\r\022\016\n\006cell_y\030\003 \001(\r\"."
    "\n\nPoolMethod\022\007\n\003MAX\020\000\022\007\n\003AVE\020\001\022\016\n\nSTOCHA"
    "STIC\020\002\"F\n\016PowerParameter\022\020\n\005power\030\001 \001(\002:"
    "\0011\022\020\n\005scale\030\002 \001(\002:\0011\022\020\n\005shift\030\003 \001(\002:\0010\"W"
    "\n\017LayerConnection\022\'\n\005layer\030\001 \001(\0132\030.caffe"
    "pro.LayerParameter\022\016\n\006bottom\030\002 \003(\t\022\013\n\003to"
    "p\030\003 \003(\t\"\271\001\n\014NetParameter\022\014\n\004name\030\001 \001(\t\022)"
    "\n\006layers\030\002 \003(\0132\031.caffepro.LayerConnectio"
    "n\022\r\n\005input\030\003 \003(\t\022\021\n\tinput_dim\030\004 \003(\005\022\035\n\016f"
    "orce_backward\030\005 \001(\010:\005false\022\023\n\013config_fil"
    "e\030\006 \001(\t\022\032\n\022data_provider_name\030\007 \001(\t\"\352\005\n\017"
    "SolverParameter\022\021\n\ttrain_net\030\001 \001(\t\022\020\n\010te"
    "st_net\030\002 \001(\t\022\024\n\ttest_iter\030\003 \001(\005:\0010\022\030\n\rte"
    "st_interval\030\004 \001(\005:\0010\022\017\n\007base_lr\030\005 \001(\002\022\017\n"
    "\007display\030\006 \001(\005\022\020\n\010max_iter\030\007 \001(\005\022\021\n\tlr_p"
    "olicy\030\010 \001(\t\022\r\n\005gamma\030\t \001(\002\022\r\n\005power\030\n \001("
    "\002\022\020\n\010momentum\030\013 \001(\002\022\024\n\014weight_decay\030\014 \001("
    "\002\022\020\n\010stepsize\030\r \001(\005\022\023\n\010snapshot\030\016 \001(\005:\0010"
    "\022\027\n\017snapshot_prefix\030\017 \001(\t\022\034\n\rsnapshot_di"
    "ff\030\020 \001(\010:\005false\022\026\n\013solver_mode\030\021 \001(\005:\0011\022"
    "\024\n\tdevice_id\030\022 \001(\005:\0010\022\020\n\010vstep_lr\030\023 \003(\002\022"
    "\022\n\nvstep_size\030\024 \003(\005\022\026\n\013num_threads\030\025 \001(\005"
    ":\0010\022%\n\032train_primary_output_index\030\026 \001(\005:"
    "\0010\022$\n\031test_primary_output_index\030\027 \001(\005:\0010"
    "\022\032\n\017update_interval\030\030 \001(\005:\0011\022\020\n\010ohem_net"
    "\030\031 \001(\t\022\030\n\rdump_interval\030\032 \001(\005:\0010\022\036\n\023sim_"
    "update_interval\030\033 \001(\005:\0011\022\031\n\ndata_split\030\034"
    " \001(\010:\005false\022\023\n\013bmuf_method\030\035 \001(\t\022\022\n\007bmuf"
    "_lr\030\036 \001(\002:\0011\022\030\n\rbmuf_momentum\030\037 \001(\002:\0010\022\030"
    "\n\rbmuf_interval\030  \001(\005:\0011\"V\n\013SolverState\022"
    "\014\n\004iter\030\001 \001(\005\022\023\n\013learned_net\030\002 \001(\t\022$\n\007hi"
    "story\030\003 \003(\0132\023.caffepro.BlobProto\"v\n\022Scal"
    "eBiasParameter\0220\n\rweight_filler\030\001 \001(\0132\031."
    "caffepro.FillerParameter\022.\n\013bias_filler\030"
    "\002 \001(\0132\031.caffepro.FillerParameter\"\247\001\n\rCro"
    "pParameter\0223\n\tcrop_type\030\001 \002(\0162 .caffepro"
    ".CropParameter.CropType\022\021\n\006stride\030\002 \001(\r:"
    "\0011\022\022\n\ncrop_width\030\003 \002(\r\022\023\n\013crop_height\030\004 "
    "\002(\r\"%\n\010CropType\022\r\n\tViewDense\020\000\022\n\n\006View10"
    "\020\001\"\226\001\n\022ReduceDimParameter\022\013\n\003dim\030\001 \002(\r\022\020"
    "\n\005group\030\002 \001(\r:\0011\022A\n\013reduce_type\030\003 \002(\0162\'."
    "caffepro.ReduceDimParameter.ReduceType:\003"
    "AVE\"\036\n\nReduceType\022\007\n\003AVE\020\000\022\007\n\003SUM\020\001\",\n\rF"
    "lipParameter\022\033\n\rkeep_original\030\001 \001(\010:\004tru"
    "e\"\235\001\n\021StepGateParameter\022\022\n\ninit_value\030\001 "
    "\002(\002\022\022\n\nstep_value\030\002 \002(\002\022\021\n\tmax_value\030\003 \002"
    "(\002\022\034\n\rkeep_backward\030\004 \001(\010:\005false\022\033\n\014keep"
    "_forward\030\005 \001(\010:\005false\022\022\n\nstart_iter\030\006 \001("
    "\r\")\n\024HouseholderParameter\022\021\n\006source\030\001 \001("
    "\r:\0010\"\225\001\n\027InstanceSampleParameter\022J\n\rsamp"
    "le_method\030\001 \001(\0162..caffepro.InstanceSampl"
    "eParameter.SampleMethod:\003SEQ\022\013\n\003num\030\002 \002("
    "\r\"!\n\014SampleMethod\022\007\n\003SEQ\020\000\022\010\n\004RAND\020\001\"C\n\022"
    "MatrixMulParameter\022\026\n\007trans_A\030\001 \001(\010:\005fal"
    "se\022\025\n\007trans_B\030\002 \001(\010:\004true\"Z\n\027MatrixMulSt"
    "ackParameter\022\013\n\003num\030\001 \002(\r\022\030\n\ttrans_odd\030\002"
    " \001(\010:\005false\022\030\n\ntrans_even\030\003 \001(\010:\004true\";\n"
    "\022TransposeParameter\022\020\n\010lead_dim\030\001 \002(\r\022\023\n"
    "\013output_dims\030\002 \003(\005\" \n\020ReshapeParameter\022\014"
    "\n\004dims\030\001 \003(\005\"2\n\031LearnableDropoutParamete"
    "r\022\025\n\ninit_value\030\001 \001(\002:\0010\"\'\n\030DimInnerProd"
    "uctParameter\022\013\n\003dim\030\001 \002(\r\",\n\020SoftthrPara"
    "meter\022\030\n\013softthr_thr\030\001 \001(\002:\0030.1\"O\n\024Dropo"
    "utsameParameter\022\032\n\rdropout_ratio\030\001 \001(\002:\003"
    "0.5\022\033\n\014force_random\030\002 \001(\010:\005false\"<\n\026Diag"
    "OperationParameter\022\020\n\005scale\030\001 \001(\002:\0011\022\020\n\005"
    "shift\030\002 \001(\002:\0010\"N\n\030SoftMaxLossOHEMParamet"
    "er\022\025\n\tohem_size\030\001 \001(\005:\00264\022\033\n\014force_rando"
    "m\030\002 \001(\010:\005false\"g\n\024SoftMaxOHEMParameter\022\025"
    "\n\tohem_size\030\001 \001(\005:\00264\022\033\n\014force_random\030\002 "
    "\001(\010:\005false\022\033\n\014use_max_loss\030\003 \001(\010:\005false\""
    "l\n\031SoftMaxOHEMSplitParameter\022\025\n\tohem_siz"
    "e\030\001 \001(\005:\00264\022\033\n\014force_random\030\002 \001(\010:\005false"
    "\022\033\n\014use_max_loss\030\003 \001(\010:\005false", 11789);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "caffe.proto", &protobuf_RegisterTypes);
  BlobProto::default_instance_ = new BlobProto();
  BlobProtoVector::default_instance_ = new BlobProtoVector();
  Datum::default_instance_ = new Datum();
  FillerParameter::default_instance_ = new FillerParameter();
  LayerParameter::default_instance_ = new LayerParameter();
  ClusterParameter::default_instance_ = new ClusterParameter();
  OnlineKMeansParameter::default_instance_ = new OnlineKMeansParameter();
  EltwiseSumParameter::default_instance_ = new EltwiseSumParameter();
  ReluParameter::default_instance_ = new ReluParameter();
  LearnableLeakReluParameter::default_instance_ = new LearnableLeakReluParameter();
  ExpParameter::default_instance_ = new ExpParameter();
  BoundParameter::default_instance_ = new BoundParameter();
  BatchNormalizationParameter::default_instance_ = new BatchNormalizationParameter();
  GPUSplitParameter::default_instance_ = new GPUSplitParameter();
  ConcatParameter::default_instance_ = new ConcatParameter();
  GridGeneratorParameter::default_instance_ = new GridGeneratorParameter();
  SampleParameter::default_instance_ = new SampleParameter();
  AnchorParameter::default_instance_ = new AnchorParameter();
  ConvolutionParameter::default_instance_ = new ConvolutionParameter();
  CorrelationParameter::default_instance_ = new CorrelationParameter();
  WeightParameter::default_instance_ = new WeightParameter();
  DataProcesser::default_instance_ = new DataProcesser();
  DataParameter_BigFile::default_instance_ = new DataParameter_BigFile();
  DataEntryParameter::default_instance_ = new DataEntryParameter();
  DropoutParameter::default_instance_ = new DropoutParameter();
  PaddingParameter::default_instance_ = new PaddingParameter();
  InfogainLossParameter::default_instance_ = new InfogainLossParameter();
  LossParameter::default_instance_ = new LossParameter();
  ClsLocLossParameter::default_instance_ = new ClsLocLossParameter();
  InnerProductParameter::default_instance_ = new InnerProductParameter();
  LRNParameter::default_instance_ = new LRNParameter();
  PoolingParameter::default_instance_ = new PoolingParameter();
  SPMParameter::default_instance_ = new SPMParameter();
  PowerParameter::default_instance_ = new PowerParameter();
  LayerConnection::default_instance_ = new LayerConnection();
  NetParameter::default_instance_ = new NetParameter();
  SolverParameter::default_instance_ = new SolverParameter();
  SolverState::default_instance_ = new SolverState();
  ScaleBiasParameter::default_instance_ = new ScaleBiasParameter();
  CropParameter::default_instance_ = new CropParameter();
  ReduceDimParameter::default_instance_ = new ReduceDimParameter();
  FlipParameter::default_instance_ = new FlipParameter();
  StepGateParameter::default_instance_ = new StepGateParameter();
  HouseholderParameter::default_instance_ = new HouseholderParameter();
  InstanceSampleParameter::default_instance_ = new InstanceSampleParameter();
  MatrixMulParameter::default_instance_ = new MatrixMulParameter();
  MatrixMulStackParameter::default_instance_ = new MatrixMulStackParameter();
  TransposeParameter::default_instance_ = new TransposeParameter();
  ReshapeParameter::default_instance_ = new ReshapeParameter();
  LearnableDropoutParameter::default_instance_ = new LearnableDropoutParameter();
  DimInnerProductParameter::default_instance_ = new DimInnerProductParameter();
  SoftthrParameter::default_instance_ = new SoftthrParameter();
  DropoutsameParameter::default_instance_ = new DropoutsameParameter();
  DiagOperationParameter::default_instance_ = new DiagOperationParameter();
  SoftMaxLossOHEMParameter::default_instance_ = new SoftMaxLossOHEMParameter();
  SoftMaxOHEMParameter::default_instance_ = new SoftMaxOHEMParameter();
  SoftMaxOHEMSplitParameter::default_instance_ = new SoftMaxOHEMSplitParameter();
  BlobProto::default_instance_->InitAsDefaultInstance();
  BlobProtoVector::default_instance_->InitAsDefaultInstance();
  Datum::default_instance_->InitAsDefaultInstance();
  FillerParameter::default_instance_->InitAsDefaultInstance();
  LayerParameter::default_instance_->InitAsDefaultInstance();
  ClusterParameter::default_instance_->InitAsDefaultInstance();
  OnlineKMeansParameter::default_instance_->InitAsDefaultInstance();
  EltwiseSumParameter::default_instance_->InitAsDefaultInstance();
  ReluParameter::default_instance_->InitAsDefaultInstance();
  LearnableLeakReluParameter::default_instance_->InitAsDefaultInstance();
  ExpParameter::default_instance_->InitAsDefaultInstance();
  BoundParameter::default_instance_->InitAsDefaultInstance();
  BatchNormalizationParameter::default_instance_->InitAsDefaultInstance();
  GPUSplitParameter::default_instance_->InitAsDefaultInstance();
  ConcatParameter::default_instance_->InitAsDefaultInstance();
  GridGeneratorParameter::default_instance_->InitAsDefaultInstance();
  SampleParameter::default_instance_->InitAsDefaultInstance();
  AnchorParameter::default_instance_->InitAsDefaultInstance();
  ConvolutionParameter::default_instance_->InitAsDefaultInstance();
  CorrelationParameter::default_instance_->InitAsDefaultInstance();
  WeightParameter::default_instance_->InitAsDefaultInstance();
  DataProcesser::default_instance_->InitAsDefaultInstance();
  DataParameter_BigFile::default_instance_->InitAsDefaultInstance();
  DataEntryParameter::default_instance_->InitAsDefaultInstance();
  DropoutParameter::default_instance_->InitAsDefaultInstance();
  PaddingParameter::default_instance_->InitAsDefaultInstance();
  InfogainLossParameter::default_instance_->InitAsDefaultInstance();
  LossParameter::default_instance_->InitAsDefaultInstance();
  ClsLocLossParameter::default_instance_->InitAsDefaultInstance();
  InnerProductParameter::default_instance_->InitAsDefaultInstance();
  LRNParameter::default_instance_->InitAsDefaultInstance();
  PoolingParameter::default_instance_->InitAsDefaultInstance();
  SPMParameter::default_instance_->InitAsDefaultInstance();
  PowerParameter::default_instance_->InitAsDefaultInstance();
  LayerConnection::default_instance_->InitAsDefaultInstance();
  NetParameter::default_instance_->InitAsDefaultInstance();
  SolverParameter::default_instance_->InitAsDefaultInstance();
  SolverState::default_instance_->InitAsDefaultInstance();
  ScaleBiasParameter::default_instance_->InitAsDefaultInstance();
  CropParameter::default_instance_->InitAsDefaultInstance();
  ReduceDimParameter::default_instance_->InitAsDefaultInstance();
  FlipParameter::default_instance_->InitAsDefaultInstance();
  StepGateParameter::default_instance_->InitAsDefaultInstance();
  HouseholderParameter::default_instance_->InitAsDefaultInstance();
  InstanceSampleParameter::default_instance_->InitAsDefaultInstance();
  MatrixMulParameter::default_instance_->InitAsDefaultInstance();
  MatrixMulStackParameter::default_instance_->InitAsDefaultInstance();
  TransposeParameter::default_instance_->InitAsDefaultInstance();
  ReshapeParameter::default_instance_->InitAsDefaultInstance();
  LearnableDropoutParameter::default_instance_->InitAsDefaultInstance();
  DimInnerProductParameter::default_instance_->InitAsDefaultInstance();
  SoftthrParameter::default_instance_->InitAsDefaultInstance();
  DropoutsameParameter::default_instance_->InitAsDefaultInstance();
  DiagOperationParameter::default_instance_->InitAsDefaultInstance();
  SoftMaxLossOHEMParameter::default_instance_->InitAsDefaultInstance();
  SoftMaxOHEMParameter::default_instance_->InitAsDefaultInstance();
  SoftMaxOHEMSplitParameter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_caffe_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_caffe_2eproto {
  StaticDescriptorInitializer_caffe_2eproto() {
    protobuf_AddDesc_caffe_2eproto();
  }
} static_descriptor_initializer_caffe_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int BlobProto::kNumFieldNumber;
const int BlobProto::kChannelsFieldNumber;
const int BlobProto::kHeightFieldNumber;
const int BlobProto::kWidthFieldNumber;
const int BlobProto::kDataFieldNumber;
const int BlobProto::kDiffFieldNumber;
#endif  // !_MSC_VER

BlobProto::BlobProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlobProto::InitAsDefaultInstance() {
}

BlobProto::BlobProto(const BlobProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlobProto::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  channels_ = 0;
  height_ = 0;
  width_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobProto::~BlobProto() {
  SharedDtor();
}

void BlobProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobProto_descriptor_;
}

const BlobProto& BlobProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

BlobProto* BlobProto::default_instance_ = NULL;

BlobProto* BlobProto::New() const {
  return new BlobProto;
}

void BlobProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    channels_ = 0;
    height_ = 0;
    width_ = 0;
  }
  data_.Clear();
  diff_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channels;
        break;
      }
      
      // optional int32 channels = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }
      
      // optional int32 height = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }
      
      // optional int32 width = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }
      
      // repeated float data = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42, input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_diff;
        break;
      }
      
      // repeated float diff = 6 [packed = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_diff())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50, input, this->mutable_diff())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlobProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num = 1 [default = 0];
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }
  
  // optional int32 channels = 2 [default = 0];
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channels(), output);
  }
  
  // optional int32 height = 3 [default = 0];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }
  
  // optional int32 width = 4 [default = 0];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }
  
  // repeated float data = 5 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->data(i), output);
  }
  
  // repeated float diff = 6 [packed = true];
  if (this->diff_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_diff_cached_byte_size_);
  }
  for (int i = 0; i < this->diff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->diff(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlobProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num = 1 [default = 0];
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }
  
  // optional int32 channels = 2 [default = 0];
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channels(), target);
  }
  
  // optional int32 height = 3 [default = 0];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }
  
  // optional int32 width = 4 [default = 0];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }
  
  // repeated float data = 5 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data(i), target);
  }
  
  // repeated float diff = 6 [packed = true];
  if (this->diff_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _diff_cached_byte_size_, target);
  }
  for (int i = 0; i < this->diff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->diff(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlobProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1 [default = 0];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
    // optional int32 channels = 2 [default = 0];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }
    
    // optional int32 height = 3 [default = 0];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
    // optional int32 width = 4 [default = 0];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }
    
  }
  // repeated float data = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _data_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated float diff = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->diff_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _diff_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobProto::MergeFrom(const BlobProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  diff_.MergeFrom(from.diff_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobProto::CopyFrom(const BlobProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobProto::IsInitialized() const {
  
  return true;
}

void BlobProto::Swap(BlobProto* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(channels_, other->channels_);
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    data_.Swap(&other->data_);
    diff_.Swap(&other->diff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobProto_descriptor_;
  metadata.reflection = BlobProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobProtoVector::kBlobsFieldNumber;
#endif  // !_MSC_VER

BlobProtoVector::BlobProtoVector()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlobProtoVector::InitAsDefaultInstance() {
}

BlobProtoVector::BlobProtoVector(const BlobProtoVector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlobProtoVector::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobProtoVector::~BlobProtoVector() {
  SharedDtor();
}

void BlobProtoVector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobProtoVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobProtoVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobProtoVector_descriptor_;
}

const BlobProtoVector& BlobProtoVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

BlobProtoVector* BlobProtoVector::default_instance_ = NULL;

BlobProtoVector* BlobProtoVector::New() const {
  return new BlobProtoVector;
}

void BlobProtoVector::Clear() {
  blobs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobProtoVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffepro.BlobProto blobs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blobs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_blobs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlobProtoVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .caffepro.BlobProto blobs = 1;
  for (int i = 0; i < this->blobs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blobs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlobProtoVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .caffepro.BlobProto blobs = 1;
  for (int i = 0; i < this->blobs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blobs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlobProtoVector::ByteSize() const {
  int total_size = 0;
  
  // repeated .caffepro.BlobProto blobs = 1;
  total_size += 1 * this->blobs_size();
  for (int i = 0; i < this->blobs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blobs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobProtoVector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobProtoVector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobProtoVector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobProtoVector::MergeFrom(const BlobProtoVector& from) {
  GOOGLE_CHECK_NE(&from, this);
  blobs_.MergeFrom(from.blobs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobProtoVector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobProtoVector::CopyFrom(const BlobProtoVector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobProtoVector::IsInitialized() const {
  
  return true;
}

void BlobProtoVector::Swap(BlobProtoVector* other) {
  if (other != this) {
    blobs_.Swap(&other->blobs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobProtoVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobProtoVector_descriptor_;
  metadata.reflection = BlobProtoVector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Datum::kChannelsFieldNumber;
const int Datum::kHeightFieldNumber;
const int Datum::kWidthFieldNumber;
const int Datum::kDataFieldNumber;
const int Datum::kLabelFieldNumber;
const int Datum::kFloatDataFieldNumber;
#endif  // !_MSC_VER

Datum::Datum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Datum::InitAsDefaultInstance() {
}

Datum::Datum(const Datum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Datum::SharedCtor() {
  _cached_size_ = 0;
  channels_ = 0;
  height_ = 0;
  width_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  label_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Datum::~Datum() {
  SharedDtor();
}

void Datum::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Datum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Datum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Datum_descriptor_;
}

const Datum& Datum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

Datum* Datum::default_instance_ = NULL;

Datum* Datum::New() const {
  return new Datum;
}

void Datum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channels_ = 0;
    height_ = 0;
    width_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    label_ = 0;
  }
  float_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Datum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channels = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }
      
      // optional int32 height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }
      
      // optional int32 width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }
      
      // optional bytes data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_label;
        break;
      }
      
      // optional int32 label = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
          set_has_label();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_float_data;
        break;
      }
      
      // repeated float float_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_float_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_float_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_float_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_float_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Datum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 channels = 1;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channels(), output);
  }
  
  // optional int32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }
  
  // optional int32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }
  
  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(), output);
  }
  
  // optional int32 label = 5;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->label(), output);
  }
  
  // repeated float float_data = 6;
  for (int i = 0; i < this->float_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->float_data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Datum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 channels = 1;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channels(), target);
  }
  
  // optional int32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }
  
  // optional int32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }
  
  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }
  
  // optional int32 label = 5;
  if (has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->label(), target);
  }
  
  // repeated float float_data = 6;
  for (int i = 0; i < this->float_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->float_data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Datum::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 channels = 1;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }
    
    // optional int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
    // optional int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }
    
    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
    // optional int32 label = 5;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }
    
  }
  // repeated float float_data = 6;
  {
    int data_size = 0;
    data_size = 4 * this->float_data_size();
    total_size += 1 * this->float_data_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Datum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Datum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Datum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Datum::MergeFrom(const Datum& from) {
  GOOGLE_CHECK_NE(&from, this);
  float_data_.MergeFrom(from.float_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Datum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Datum::CopyFrom(const Datum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Datum::IsInitialized() const {
  
  return true;
}

void Datum::Swap(Datum* other) {
  if (other != this) {
    std::swap(channels_, other->channels_);
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    std::swap(data_, other->data_);
    std::swap(label_, other->label_);
    float_data_.Swap(&other->float_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Datum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Datum_descriptor_;
  metadata.reflection = Datum_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string FillerParameter::_default_type_("constant");
#ifndef _MSC_VER
const int FillerParameter::kTypeFieldNumber;
const int FillerParameter::kValueFieldNumber;
const int FillerParameter::kMinFieldNumber;
const int FillerParameter::kMaxFieldNumber;
const int FillerParameter::kMeanFieldNumber;
const int FillerParameter::kStdFieldNumber;
#endif  // !_MSC_VER

FillerParameter::FillerParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FillerParameter::InitAsDefaultInstance() {
}

FillerParameter::FillerParameter(const FillerParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FillerParameter::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&_default_type_);
  value_ = 0;
  min_ = 0;
  max_ = 1;
  mean_ = 0;
  std_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FillerParameter::~FillerParameter() {
  SharedDtor();
}

void FillerParameter::SharedDtor() {
  if (type_ != &_default_type_) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void FillerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FillerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FillerParameter_descriptor_;
}

const FillerParameter& FillerParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

FillerParameter* FillerParameter::default_instance_ = NULL;

FillerParameter* FillerParameter::New() const {
  return new FillerParameter;
}

void FillerParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &_default_type_) {
        type_->assign(_default_type_);
      }
    }
    value_ = 0;
    min_ = 0;
    max_ = 1;
    mean_ = 0;
    std_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FillerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "constant"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_value;
        break;
      }
      
      // optional float value = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_min;
        break;
      }
      
      // optional float min = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_max;
        break;
      }
      
      // optional float max = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_mean;
        break;
      }
      
      // optional float mean = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
          set_has_mean();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_std;
        break;
      }
      
      // optional float std = 6 [default = 1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_std:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &std_)));
          set_has_std();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FillerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string type = 1 [default = "constant"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }
  
  // optional float value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }
  
  // optional float min = 3 [default = 0];
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->min(), output);
  }
  
  // optional float max = 4 [default = 1];
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max(), output);
  }
  
  // optional float mean = 5 [default = 0];
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->mean(), output);
  }
  
  // optional float std = 6 [default = 1];
  if (has_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->std(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FillerParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string type = 1 [default = "constant"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }
  
  // optional float value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }
  
  // optional float min = 3 [default = 0];
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->min(), target);
  }
  
  // optional float max = 4 [default = 1];
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max(), target);
  }
  
  // optional float mean = 5 [default = 0];
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->mean(), target);
  }
  
  // optional float std = 6 [default = 1];
  if (has_std()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->std(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FillerParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1 [default = "constant"];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // optional float value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 + 4;
    }
    
    // optional float min = 3 [default = 0];
    if (has_min()) {
      total_size += 1 + 4;
    }
    
    // optional float max = 4 [default = 1];
    if (has_max()) {
      total_size += 1 + 4;
    }
    
    // optional float mean = 5 [default = 0];
    if (has_mean()) {
      total_size += 1 + 4;
    }
    
    // optional float std = 6 [default = 1];
    if (has_std()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FillerParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FillerParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FillerParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FillerParameter::MergeFrom(const FillerParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_std()) {
      set_std(from.std());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FillerParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FillerParameter::CopyFrom(const FillerParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillerParameter::IsInitialized() const {
  
  return true;
}

void FillerParameter::Swap(FillerParameter* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(mean_, other->mean_);
    std::swap(std_, other->std_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FillerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FillerParameter_descriptor_;
  metadata.reflection = FillerParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LayerParameter_UpdateMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerParameter_UpdateMethod_descriptor_;
}
bool LayerParameter_UpdateMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LayerParameter_UpdateMethod LayerParameter::NORMAL;
const LayerParameter_UpdateMethod LayerParameter::ADAGRAD;
const LayerParameter_UpdateMethod LayerParameter::ADAGRAD_RECORD_ONLY;
const LayerParameter_UpdateMethod LayerParameter::UpdateMethod_MIN;
const LayerParameter_UpdateMethod LayerParameter::UpdateMethod_MAX;
const int LayerParameter::UpdateMethod_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LayerParameter::kNameFieldNumber;
const int LayerParameter::kTypeFieldNumber;
const int LayerParameter::kBlobsFieldNumber;
const int LayerParameter::kBlobsLrFieldNumber;
const int LayerParameter::kWeightDecayFieldNumber;
const int LayerParameter::kBlobSourceLayerFieldNumber;
const int LayerParameter::kConcatParamFieldNumber;
const int LayerParameter::kConvParamFieldNumber;
const int LayerParameter::kDataBigfileParamFieldNumber;
const int LayerParameter::kDropoutParamFieldNumber;
const int LayerParameter::kInfogainLossParamFieldNumber;
const int LayerParameter::kInnerProductParamFieldNumber;
const int LayerParameter::kLrnParamFieldNumber;
const int LayerParameter::kPoolParamFieldNumber;
const int LayerParameter::kPowerParamFieldNumber;
const int LayerParameter::kPaddingParamFieldNumber;
const int LayerParameter::kSpmParamFieldNumber;
const int LayerParameter::kGpuIdFieldNumber;
const int LayerParameter::kGpuSplitFieldNumber;
const int LayerParameter::kLossParamFieldNumber;
const int LayerParameter::kRecordFieldNumber;
const int LayerParameter::kReluParamFieldNumber;
const int LayerParameter::kLearnableLeakReluParamFieldNumber;
const int LayerParameter::kUpdateMethodFieldNumber;
const int LayerParameter::kBatchNormParamFieldNumber;
const int LayerParameter::kRecordInternelFieldNumber;
const int LayerParameter::kEltwiseSumParamFieldNumber;
const int LayerParameter::kClslocLossParamFieldNumber;
const int LayerParameter::kAnchorParamFieldNumber;
const int LayerParameter::kGridGeneratorParamFieldNumber;
const int LayerParameter::kDataEntryParamFieldNumber;
const int LayerParameter::kSampleParamFieldNumber;
const int LayerParameter::kShareWeightsFieldNumber;
const int LayerParameter::kExpParamFieldNumber;
const int LayerParameter::kBoundParamFieldNumber;
const int LayerParameter::kClusterParamFieldNumber;
const int LayerParameter::kOnlineKmeansParamFieldNumber;
const int LayerParameter::kCorrelationParamFieldNumber;
const int LayerParameter::kWeightParamFieldNumber;
const int LayerParameter::kScalebiasParamFieldNumber;
const int LayerParameter::kCropParamFieldNumber;
const int LayerParameter::kReduceDimParamFieldNumber;
const int LayerParameter::kFlipParamFieldNumber;
const int LayerParameter::kStepGateParamFieldNumber;
const int LayerParameter::kHouseholderParamFieldNumber;
const int LayerParameter::kInstanceSampleParamFieldNumber;
const int LayerParameter::kMatrixMulParamFieldNumber;
const int LayerParameter::kMatrixMulStackParamFieldNumber;
const int LayerParameter::kTransposeParamFieldNumber;
const int LayerParameter::kReshapeParamFieldNumber;
const int LayerParameter::kLearnableDropoutParamFieldNumber;
const int LayerParameter::kDimInnerproductParamFieldNumber;
const int LayerParameter::kSoftthrParamFieldNumber;
const int LayerParameter::kDropoutsameParamFieldNumber;
const int LayerParameter::kSoftmaxlossohemParamFieldNumber;
const int LayerParameter::kSoftmaxohemParamFieldNumber;
const int LayerParameter::kSoftmaxohemsplitParamFieldNumber;
const int LayerParameter::kDiagOperationParamFieldNumber;
#endif  // !_MSC_VER

LayerParameter::LayerParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LayerParameter::InitAsDefaultInstance() {
  concat_param_ = const_cast< ::caffepro::ConcatParameter*>(&::caffepro::ConcatParameter::default_instance());
  conv_param_ = const_cast< ::caffepro::ConvolutionParameter*>(&::caffepro::ConvolutionParameter::default_instance());
  data_bigfile_param_ = const_cast< ::caffepro::DataParameter_BigFile*>(&::caffepro::DataParameter_BigFile::default_instance());
  dropout_param_ = const_cast< ::caffepro::DropoutParameter*>(&::caffepro::DropoutParameter::default_instance());
  infogain_loss_param_ = const_cast< ::caffepro::InfogainLossParameter*>(&::caffepro::InfogainLossParameter::default_instance());
  inner_product_param_ = const_cast< ::caffepro::InnerProductParameter*>(&::caffepro::InnerProductParameter::default_instance());
  lrn_param_ = const_cast< ::caffepro::LRNParameter*>(&::caffepro::LRNParameter::default_instance());
  pool_param_ = const_cast< ::caffepro::PoolingParameter*>(&::caffepro::PoolingParameter::default_instance());
  power_param_ = const_cast< ::caffepro::PowerParameter*>(&::caffepro::PowerParameter::default_instance());
  padding_param_ = const_cast< ::caffepro::PaddingParameter*>(&::caffepro::PaddingParameter::default_instance());
  spm_param_ = const_cast< ::caffepro::SPMParameter*>(&::caffepro::SPMParameter::default_instance());
  gpu_split_ = const_cast< ::caffepro::GPUSplitParameter*>(&::caffepro::GPUSplitParameter::default_instance());
  loss_param_ = const_cast< ::caffepro::LossParameter*>(&::caffepro::LossParameter::default_instance());
  relu_param_ = const_cast< ::caffepro::ReluParameter*>(&::caffepro::ReluParameter::default_instance());
  learnable_leak_relu_param_ = const_cast< ::caffepro::LearnableLeakReluParameter*>(&::caffepro::LearnableLeakReluParameter::default_instance());
  batch_norm_param_ = const_cast< ::caffepro::BatchNormalizationParameter*>(&::caffepro::BatchNormalizationParameter::default_instance());
  eltwise_sum_param_ = const_cast< ::caffepro::EltwiseSumParameter*>(&::caffepro::EltwiseSumParameter::default_instance());
  clsloc_loss_param_ = const_cast< ::caffepro::ClsLocLossParameter*>(&::caffepro::ClsLocLossParameter::default_instance());
  anchor_param_ = const_cast< ::caffepro::AnchorParameter*>(&::caffepro::AnchorParameter::default_instance());
  grid_generator_param_ = const_cast< ::caffepro::GridGeneratorParameter*>(&::caffepro::GridGeneratorParameter::default_instance());
  data_entry_param_ = const_cast< ::caffepro::DataEntryParameter*>(&::caffepro::DataEntryParameter::default_instance());
  sample_param_ = const_cast< ::caffepro::SampleParameter*>(&::caffepro::SampleParameter::default_instance());
  exp_param_ = const_cast< ::caffepro::ExpParameter*>(&::caffepro::ExpParameter::default_instance());
  bound_param_ = const_cast< ::caffepro::BoundParameter*>(&::caffepro::BoundParameter::default_instance());
  cluster_param_ = const_cast< ::caffepro::ClusterParameter*>(&::caffepro::ClusterParameter::default_instance());
  online_kmeans_param_ = const_cast< ::caffepro::OnlineKMeansParameter*>(&::caffepro::OnlineKMeansParameter::default_instance());
  correlation_param_ = const_cast< ::caffepro::CorrelationParameter*>(&::caffepro::CorrelationParameter::default_instance());
  weight_param_ = const_cast< ::caffepro::WeightParameter*>(&::caffepro::WeightParameter::default_instance());
  scalebias_param_ = const_cast< ::caffepro::ScaleBiasParameter*>(&::caffepro::ScaleBiasParameter::default_instance());
  crop_param_ = const_cast< ::caffepro::CropParameter*>(&::caffepro::CropParameter::default_instance());
  reduce_dim_param_ = const_cast< ::caffepro::ReduceDimParameter*>(&::caffepro::ReduceDimParameter::default_instance());
  flip_param_ = const_cast< ::caffepro::FlipParameter*>(&::caffepro::FlipParameter::default_instance());
  step_gate_param_ = const_cast< ::caffepro::StepGateParameter*>(&::caffepro::StepGateParameter::default_instance());
  householder_param_ = const_cast< ::caffepro::HouseholderParameter*>(&::caffepro::HouseholderParameter::default_instance());
  instance_sample_param_ = const_cast< ::caffepro::InstanceSampleParameter*>(&::caffepro::InstanceSampleParameter::default_instance());
  matrix_mul_param_ = const_cast< ::caffepro::MatrixMulParameter*>(&::caffepro::MatrixMulParameter::default_instance());
  matrix_mul_stack_param_ = const_cast< ::caffepro::MatrixMulStackParameter*>(&::caffepro::MatrixMulStackParameter::default_instance());
  transpose_param_ = const_cast< ::caffepro::TransposeParameter*>(&::caffepro::TransposeParameter::default_instance());
  reshape_param_ = const_cast< ::caffepro::ReshapeParameter*>(&::caffepro::ReshapeParameter::default_instance());
  learnable_dropout_param_ = const_cast< ::caffepro::LearnableDropoutParameter*>(&::caffepro::LearnableDropoutParameter::default_instance());
  dim_innerproduct_param_ = const_cast< ::caffepro::DimInnerProductParameter*>(&::caffepro::DimInnerProductParameter::default_instance());
  softthr_param_ = const_cast< ::caffepro::SoftthrParameter*>(&::caffepro::SoftthrParameter::default_instance());
  dropoutsame_param_ = const_cast< ::caffepro::DropoutParameter*>(&::caffepro::DropoutParameter::default_instance());
  softmaxlossohem_param_ = const_cast< ::caffepro::SoftMaxLossOHEMParameter*>(&::caffepro::SoftMaxLossOHEMParameter::default_instance());
  softmaxohem_param_ = const_cast< ::caffepro::SoftMaxOHEMParameter*>(&::caffepro::SoftMaxOHEMParameter::default_instance());
  softmaxohemsplit_param_ = const_cast< ::caffepro::SoftMaxOHEMSplitParameter*>(&::caffepro::SoftMaxOHEMSplitParameter::default_instance());
  diag_operation_param_ = const_cast< ::caffepro::DiagOperationParameter*>(&::caffepro::DiagOperationParameter::default_instance());
}

LayerParameter::LayerParameter(const LayerParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LayerParameter::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  concat_param_ = NULL;
  conv_param_ = NULL;
  data_bigfile_param_ = NULL;
  dropout_param_ = NULL;
  infogain_loss_param_ = NULL;
  inner_product_param_ = NULL;
  lrn_param_ = NULL;
  pool_param_ = NULL;
  power_param_ = NULL;
  padding_param_ = NULL;
  spm_param_ = NULL;
  gpu_id_ = -1;
  gpu_split_ = NULL;
  loss_param_ = NULL;
  record_ = false;
  relu_param_ = NULL;
  learnable_leak_relu_param_ = NULL;
  batch_norm_param_ = NULL;
  record_internel_ = false;
  eltwise_sum_param_ = NULL;
  clsloc_loss_param_ = NULL;
  anchor_param_ = NULL;
  grid_generator_param_ = NULL;
  data_entry_param_ = NULL;
  sample_param_ = NULL;
  share_weights_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exp_param_ = NULL;
  bound_param_ = NULL;
  cluster_param_ = NULL;
  online_kmeans_param_ = NULL;
  correlation_param_ = NULL;
  weight_param_ = NULL;
  scalebias_param_ = NULL;
  crop_param_ = NULL;
  reduce_dim_param_ = NULL;
  flip_param_ = NULL;
  step_gate_param_ = NULL;
  householder_param_ = NULL;
  instance_sample_param_ = NULL;
  matrix_mul_param_ = NULL;
  matrix_mul_stack_param_ = NULL;
  transpose_param_ = NULL;
  reshape_param_ = NULL;
  learnable_dropout_param_ = NULL;
  dim_innerproduct_param_ = NULL;
  softthr_param_ = NULL;
  dropoutsame_param_ = NULL;
  softmaxlossohem_param_ = NULL;
  softmaxohem_param_ = NULL;
  softmaxohemsplit_param_ = NULL;
  diag_operation_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayerParameter::~LayerParameter() {
  SharedDtor();
}

void LayerParameter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (share_weights_ != &::google::protobuf::internal::kEmptyString) {
    delete share_weights_;
  }
  if (this != default_instance_) {
    delete concat_param_;
    delete conv_param_;
    delete data_bigfile_param_;
    delete dropout_param_;
    delete infogain_loss_param_;
    delete inner_product_param_;
    delete lrn_param_;
    delete pool_param_;
    delete power_param_;
    delete padding_param_;
    delete spm_param_;
    delete gpu_split_;
    delete loss_param_;
    delete relu_param_;
    delete learnable_leak_relu_param_;
    delete batch_norm_param_;
    delete eltwise_sum_param_;
    delete clsloc_loss_param_;
    delete anchor_param_;
    delete grid_generator_param_;
    delete data_entry_param_;
    delete sample_param_;
    delete exp_param_;
    delete bound_param_;
    delete cluster_param_;
    delete online_kmeans_param_;
    delete correlation_param_;
    delete weight_param_;
    delete scalebias_param_;
    delete crop_param_;
    delete reduce_dim_param_;
    delete flip_param_;
    delete step_gate_param_;
    delete householder_param_;
    delete instance_sample_param_;
    delete matrix_mul_param_;
    delete matrix_mul_stack_param_;
    delete transpose_param_;
    delete reshape_param_;
    delete learnable_dropout_param_;
    delete dim_innerproduct_param_;
    delete softthr_param_;
    delete dropoutsame_param_;
    delete softmaxlossohem_param_;
    delete softmaxohem_param_;
    delete softmaxohemsplit_param_;
    delete diag_operation_param_;
  }
}

void LayerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerParameter_descriptor_;
}

const LayerParameter& LayerParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

LayerParameter* LayerParameter::default_instance_ = NULL;

LayerParameter* LayerParameter::New() const {
  return new LayerParameter;
}

void LayerParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_concat_param()) {
      if (concat_param_ != NULL) concat_param_->::caffepro::ConcatParameter::Clear();
    }
    if (has_conv_param()) {
      if (conv_param_ != NULL) conv_param_->::caffepro::ConvolutionParameter::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_data_bigfile_param()) {
      if (data_bigfile_param_ != NULL) data_bigfile_param_->::caffepro::DataParameter_BigFile::Clear();
    }
    if (has_dropout_param()) {
      if (dropout_param_ != NULL) dropout_param_->::caffepro::DropoutParameter::Clear();
    }
    if (has_infogain_loss_param()) {
      if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffepro::InfogainLossParameter::Clear();
    }
    if (has_inner_product_param()) {
      if (inner_product_param_ != NULL) inner_product_param_->::caffepro::InnerProductParameter::Clear();
    }
    if (has_lrn_param()) {
      if (lrn_param_ != NULL) lrn_param_->::caffepro::LRNParameter::Clear();
    }
    if (has_pool_param()) {
      if (pool_param_ != NULL) pool_param_->::caffepro::PoolingParameter::Clear();
    }
    if (has_power_param()) {
      if (power_param_ != NULL) power_param_->::caffepro::PowerParameter::Clear();
    }
    if (has_padding_param()) {
      if (padding_param_ != NULL) padding_param_->::caffepro::PaddingParameter::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_spm_param()) {
      if (spm_param_ != NULL) spm_param_->::caffepro::SPMParameter::Clear();
    }
    gpu_id_ = -1;
    if (has_gpu_split()) {
      if (gpu_split_ != NULL) gpu_split_->::caffepro::GPUSplitParameter::Clear();
    }
    if (has_loss_param()) {
      if (loss_param_ != NULL) loss_param_->::caffepro::LossParameter::Clear();
    }
    record_ = false;
    if (has_relu_param()) {
      if (relu_param_ != NULL) relu_param_->::caffepro::ReluParameter::Clear();
    }
    if (has_learnable_leak_relu_param()) {
      if (learnable_leak_relu_param_ != NULL) learnable_leak_relu_param_->::caffepro::LearnableLeakReluParameter::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_batch_norm_param()) {
      if (batch_norm_param_ != NULL) batch_norm_param_->::caffepro::BatchNormalizationParameter::Clear();
    }
    record_internel_ = false;
    if (has_eltwise_sum_param()) {
      if (eltwise_sum_param_ != NULL) eltwise_sum_param_->::caffepro::EltwiseSumParameter::Clear();
    }
    if (has_clsloc_loss_param()) {
      if (clsloc_loss_param_ != NULL) clsloc_loss_param_->::caffepro::ClsLocLossParameter::Clear();
    }
    if (has_anchor_param()) {
      if (anchor_param_ != NULL) anchor_param_->::caffepro::AnchorParameter::Clear();
    }
    if (has_grid_generator_param()) {
      if (grid_generator_param_ != NULL) grid_generator_param_->::caffepro::GridGeneratorParameter::Clear();
    }
    if (has_data_entry_param()) {
      if (data_entry_param_ != NULL) data_entry_param_->::caffepro::DataEntryParameter::Clear();
    }
    if (has_sample_param()) {
      if (sample_param_ != NULL) sample_param_->::caffepro::SampleParameter::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_share_weights()) {
      if (share_weights_ != &::google::protobuf::internal::kEmptyString) {
        share_weights_->clear();
      }
    }
    if (has_exp_param()) {
      if (exp_param_ != NULL) exp_param_->::caffepro::ExpParameter::Clear();
    }
    if (has_bound_param()) {
      if (bound_param_ != NULL) bound_param_->::caffepro::BoundParameter::Clear();
    }
    if (has_cluster_param()) {
      if (cluster_param_ != NULL) cluster_param_->::caffepro::ClusterParameter::Clear();
    }
    if (has_online_kmeans_param()) {
      if (online_kmeans_param_ != NULL) online_kmeans_param_->::caffepro::OnlineKMeansParameter::Clear();
    }
    if (has_correlation_param()) {
      if (correlation_param_ != NULL) correlation_param_->::caffepro::CorrelationParameter::Clear();
    }
    if (has_weight_param()) {
      if (weight_param_ != NULL) weight_param_->::caffepro::WeightParameter::Clear();
    }
    if (has_scalebias_param()) {
      if (scalebias_param_ != NULL) scalebias_param_->::caffepro::ScaleBiasParameter::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_crop_param()) {
      if (crop_param_ != NULL) crop_param_->::caffepro::CropParameter::Clear();
    }
    if (has_reduce_dim_param()) {
      if (reduce_dim_param_ != NULL) reduce_dim_param_->::caffepro::ReduceDimParameter::Clear();
    }
    if (has_flip_param()) {
      if (flip_param_ != NULL) flip_param_->::caffepro::FlipParameter::Clear();
    }
    if (has_step_gate_param()) {
      if (step_gate_param_ != NULL) step_gate_param_->::caffepro::StepGateParameter::Clear();
    }
    if (has_householder_param()) {
      if (householder_param_ != NULL) householder_param_->::caffepro::HouseholderParameter::Clear();
    }
    if (has_instance_sample_param()) {
      if (instance_sample_param_ != NULL) instance_sample_param_->::caffepro::InstanceSampleParameter::Clear();
    }
    if (has_matrix_mul_param()) {
      if (matrix_mul_param_ != NULL) matrix_mul_param_->::caffepro::MatrixMulParameter::Clear();
    }
    if (has_matrix_mul_stack_param()) {
      if (matrix_mul_stack_param_ != NULL) matrix_mul_stack_param_->::caffepro::MatrixMulStackParameter::Clear();
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_transpose_param()) {
      if (transpose_param_ != NULL) transpose_param_->::caffepro::TransposeParameter::Clear();
    }
    if (has_reshape_param()) {
      if (reshape_param_ != NULL) reshape_param_->::caffepro::ReshapeParameter::Clear();
    }
    if (has_learnable_dropout_param()) {
      if (learnable_dropout_param_ != NULL) learnable_dropout_param_->::caffepro::LearnableDropoutParameter::Clear();
    }
    if (has_dim_innerproduct_param()) {
      if (dim_innerproduct_param_ != NULL) dim_innerproduct_param_->::caffepro::DimInnerProductParameter::Clear();
    }
    if (has_softthr_param()) {
      if (softthr_param_ != NULL) softthr_param_->::caffepro::SoftthrParameter::Clear();
    }
    if (has_dropoutsame_param()) {
      if (dropoutsame_param_ != NULL) dropoutsame_param_->::caffepro::DropoutParameter::Clear();
    }
    if (has_softmaxlossohem_param()) {
      if (softmaxlossohem_param_ != NULL) softmaxlossohem_param_->::caffepro::SoftMaxLossOHEMParameter::Clear();
    }
    if (has_softmaxohem_param()) {
      if (softmaxohem_param_ != NULL) softmaxohem_param_->::caffepro::SoftMaxOHEMParameter::Clear();
    }
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (has_softmaxohemsplit_param()) {
      if (softmaxohemsplit_param_ != NULL) softmaxohemsplit_param_->::caffepro::SoftMaxOHEMSplitParameter::Clear();
    }
    if (has_diag_operation_param()) {
      if (diag_operation_param_ != NULL) diag_operation_param_->::caffepro::DiagOperationParameter::Clear();
    }
  }
  blobs_.Clear();
  blobs_lr_.Clear();
  weight_decay_.Clear();
  blob_source_layer_.Clear();
  update_method_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LayerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }
      
      // optional string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_blobs;
        break;
      }
      
      // repeated .caffepro.BlobProto blobs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blobs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_blobs;
        if (input->ExpectTag(37)) goto parse_blobs_lr;
        break;
      }
      
      // repeated float blobs_lr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_blobs_lr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_blobs_lr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_blobs_lr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_blobs_lr;
        if (input->ExpectTag(45)) goto parse_weight_decay;
        break;
      }
      
      // repeated float weight_decay = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weight_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_weight_decay())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_weight_decay())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_weight_decay;
        if (input->ExpectTag(50)) goto parse_blob_source_layer;
        break;
      }
      
      // repeated string blob_source_layer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blob_source_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_blob_source_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->blob_source_layer(0).data(), this->blob_source_layer(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_blob_source_layer;
        if (input->ExpectTag(66)) goto parse_concat_param;
        break;
      }
      
      // optional .caffepro.ConcatParameter concat_param = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_concat_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_concat_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_conv_param;
        break;
      }
      
      // optional .caffepro.ConvolutionParameter conv_param = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conv_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conv_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_data_bigfile_param;
        break;
      }
      
      // optional .caffepro.DataParameter_BigFile data_bigfile_param = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_bigfile_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_bigfile_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_dropout_param;
        break;
      }
      
      // optional .caffepro.DropoutParameter dropout_param = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dropout_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dropout_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_infogain_loss_param;
        break;
      }
      
      // optional .caffepro.InfogainLossParameter infogain_loss_param = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infogain_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infogain_loss_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_inner_product_param;
        break;
      }
      
      // optional .caffepro.InnerProductParameter inner_product_param = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inner_product_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inner_product_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_lrn_param;
        break;
      }
      
      // optional .caffepro.LRNParameter lrn_param = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lrn_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lrn_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_pool_param;
        break;
      }
      
      // optional .caffepro.PoolingParameter pool_param = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pool_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pool_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_power_param;
        break;
      }
      
      // optional .caffepro.PowerParameter power_param = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_power_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_padding_param;
        break;
      }
      
      // optional .caffepro.PaddingParameter padding_param = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_padding_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_padding_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_spm_param;
        break;
      }
      
      // optional .caffepro.SPMParameter spm_param = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spm_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spm_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_gpu_id;
        break;
      }
      
      // optional int32 gpu_id = 30 [default = -1];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpu_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpu_id_)));
          set_has_gpu_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_gpu_split;
        break;
      }
      
      // optional .caffepro.GPUSplitParameter gpu_split = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gpu_split:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gpu_split()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_loss_param;
        break;
      }
      
      // optional .caffepro.LossParameter loss_param = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loss_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_record;
        break;
      }
      
      // optional bool record = 35 [default = false];
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &record_)));
          set_has_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_relu_param;
        break;
      }
      
      // optional .caffepro.ReluParameter relu_param = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relu_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_learnable_leak_relu_param;
        break;
      }
      
      // optional .caffepro.LearnableLeakReluParameter learnable_leak_relu_param = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_learnable_leak_relu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_learnable_leak_relu_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_update_method;
        break;
      }
      
      // repeated .caffepro.LayerParameter.UpdateMethod update_method = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffepro::LayerParameter_UpdateMethod_IsValid(value)) {
            add_update_method(static_cast< ::caffepro::LayerParameter_UpdateMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(38, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::caffepro::LayerParameter_UpdateMethod_IsValid,
                 this->mutable_update_method())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_update_method;
        if (input->ExpectTag(322)) goto parse_batch_norm_param;
        break;
      }
      
      // optional .caffepro.BatchNormalizationParameter batch_norm_param = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_batch_norm_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batch_norm_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_record_internel;
        break;
      }
      
      // optional bool record_internel = 41 [default = false];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_record_internel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &record_internel_)));
          set_has_record_internel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_eltwise_sum_param;
        break;
      }
      
      // optional .caffepro.EltwiseSumParameter eltwise_sum_param = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eltwise_sum_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eltwise_sum_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_clsloc_loss_param;
        break;
      }
      
      // optional .caffepro.ClsLocLossParameter clsloc_loss_param = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clsloc_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clsloc_loss_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_anchor_param;
        break;
      }
      
      // optional .caffepro.AnchorParameter anchor_param = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anchor_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anchor_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_grid_generator_param;
        break;
      }
      
      // optional .caffepro.GridGeneratorParameter grid_generator_param = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grid_generator_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grid_generator_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_data_entry_param;
        break;
      }
      
      // optional .caffepro.DataEntryParameter data_entry_param = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_entry_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_entry_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_sample_param;
        break;
      }
      
      // optional .caffepro.SampleParameter sample_param = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sample_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sample_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_share_weights;
        break;
      }
      
      // optional string share_weights = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_share_weights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_share_weights()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->share_weights().data(), this->share_weights().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(450)) goto parse_exp_param;
        break;
      }
      
      // optional .caffepro.ExpParameter exp_param = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exp_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exp_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(458)) goto parse_bound_param;
        break;
      }
      
      // optional .caffepro.BoundParameter bound_param = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bound_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bound_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(466)) goto parse_cluster_param;
        break;
      }
      
      // optional .caffepro.ClusterParameter cluster_param = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cluster_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cluster_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(474)) goto parse_online_kmeans_param;
        break;
      }
      
      // optional .caffepro.OnlineKMeansParameter online_kmeans_param = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_online_kmeans_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_online_kmeans_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_correlation_param;
        break;
      }
      
      // optional .caffepro.CorrelationParameter correlation_param = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_correlation_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_correlation_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(490)) goto parse_weight_param;
        break;
      }
      
      // optional .caffepro.WeightParameter weight_param = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weight_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(498)) goto parse_scalebias_param;
        break;
      }
      
      // optional .caffepro.ScaleBiasParameter scalebias_param = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scalebias_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scalebias_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(506)) goto parse_crop_param;
        break;
      }
      
      // optional .caffepro.CropParameter crop_param = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crop_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crop_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(514)) goto parse_reduce_dim_param;
        break;
      }
      
      // optional .caffepro.ReduceDimParameter reduce_dim_param = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reduce_dim_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reduce_dim_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_flip_param;
        break;
      }
      
      // optional .caffepro.FlipParameter flip_param = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flip_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flip_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(530)) goto parse_step_gate_param;
        break;
      }
      
      // optional .caffepro.StepGateParameter step_gate_param = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_step_gate_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_step_gate_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(538)) goto parse_householder_param;
        break;
      }
      
      // optional .caffepro.HouseholderParameter householder_param = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_householder_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_householder_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(546)) goto parse_instance_sample_param;
        break;
      }
      
      // optional .caffepro.InstanceSampleParameter instance_sample_param = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instance_sample_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instance_sample_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(554)) goto parse_matrix_mul_param;
        break;
      }
      
      // optional .caffepro.MatrixMulParameter matrix_mul_param = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matrix_mul_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matrix_mul_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_matrix_mul_stack_param;
        break;
      }
      
      // optional .caffepro.MatrixMulStackParameter matrix_mul_stack_param = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matrix_mul_stack_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matrix_mul_stack_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(570)) goto parse_transpose_param;
        break;
      }
      
      // optional .caffepro.TransposeParameter transpose_param = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transpose_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transpose_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(578)) goto parse_reshape_param;
        break;
      }
      
      // optional .caffepro.ReshapeParameter reshape_param = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reshape_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reshape_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(586)) goto parse_learnable_dropout_param;
        break;
      }
      
      // optional .caffepro.LearnableDropoutParameter learnable_dropout_param = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_learnable_dropout_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_learnable_dropout_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(594)) goto parse_dim_innerproduct_param;
        break;
      }
      
      // optional .caffepro.DimInnerProductParameter dim_innerproduct_param = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dim_innerproduct_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dim_innerproduct_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(602)) goto parse_softthr_param;
        break;
      }
      
      // optional .caffepro.SoftthrParameter softthr_param = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_softthr_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softthr_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(610)) goto parse_dropoutsame_param;
        break;
      }
      
      // optional .caffepro.DropoutParameter dropoutsame_param = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dropoutsame_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dropoutsame_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(618)) goto parse_softmaxlossohem_param;
        break;
      }
      
      // optional .caffepro.SoftMaxLossOHEMParameter softmaxlossohem_param = 77;
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_softmaxlossohem_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmaxlossohem_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(626)) goto parse_softmaxohem_param;
        break;
      }
      
      // optional .caffepro.SoftMaxOHEMParameter softmaxohem_param = 78;
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_softmaxohem_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmaxohem_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(634)) goto parse_softmaxohemsplit_param;
        break;
      }
      
      // optional .caffepro.SoftMaxOHEMSplitParameter softmaxohemsplit_param = 79;
      case 79: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_softmaxohemsplit_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmaxohemsplit_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(642)) goto parse_diag_operation_param;
        break;
      }
      
      // optional .caffepro.DiagOperationParameter diag_operation_param = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diag_operation_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diag_operation_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LayerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }
  
  // repeated .caffepro.BlobProto blobs = 3;
  for (int i = 0; i < this->blobs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->blobs(i), output);
  }
  
  // repeated float blobs_lr = 4;
  for (int i = 0; i < this->blobs_lr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->blobs_lr(i), output);
  }
  
  // repeated float weight_decay = 5;
  for (int i = 0; i < this->weight_decay_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->weight_decay(i), output);
  }
  
  // repeated string blob_source_layer = 6;
  for (int i = 0; i < this->blob_source_layer_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->blob_source_layer(i).data(), this->blob_source_layer(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->blob_source_layer(i), output);
  }
  
  // optional .caffepro.ConcatParameter concat_param = 8;
  if (has_concat_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->concat_param(), output);
  }
  
  // optional .caffepro.ConvolutionParameter conv_param = 9;
  if (has_conv_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->conv_param(), output);
  }
  
  // optional .caffepro.DataParameter_BigFile data_bigfile_param = 11;
  if (has_data_bigfile_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->data_bigfile_param(), output);
  }
  
  // optional .caffepro.DropoutParameter dropout_param = 12;
  if (has_dropout_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->dropout_param(), output);
  }
  
  // optional .caffepro.InfogainLossParameter infogain_loss_param = 16;
  if (has_infogain_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->infogain_loss_param(), output);
  }
  
  // optional .caffepro.InnerProductParameter inner_product_param = 17;
  if (has_inner_product_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->inner_product_param(), output);
  }
  
  // optional .caffepro.LRNParameter lrn_param = 18;
  if (has_lrn_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->lrn_param(), output);
  }
  
  // optional .caffepro.PoolingParameter pool_param = 19;
  if (has_pool_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->pool_param(), output);
  }
  
  // optional .caffepro.PowerParameter power_param = 20;
  if (has_power_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->power_param(), output);
  }
  
  // optional .caffepro.PaddingParameter padding_param = 23;
  if (has_padding_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->padding_param(), output);
  }
  
  // optional .caffepro.SPMParameter spm_param = 24;
  if (has_spm_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->spm_param(), output);
  }
  
  // optional int32 gpu_id = 30 [default = -1];
  if (has_gpu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->gpu_id(), output);
  }
  
  // optional .caffepro.GPUSplitParameter gpu_split = 31;
  if (has_gpu_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->gpu_split(), output);
  }
  
  // optional .caffepro.LossParameter loss_param = 34;
  if (has_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->loss_param(), output);
  }
  
  // optional bool record = 35 [default = false];
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->record(), output);
  }
  
  // optional .caffepro.ReluParameter relu_param = 36;
  if (has_relu_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->relu_param(), output);
  }
  
  // optional .caffepro.LearnableLeakReluParameter learnable_leak_relu_param = 37;
  if (has_learnable_leak_relu_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->learnable_leak_relu_param(), output);
  }
  
  // repeated .caffepro.LayerParameter.UpdateMethod update_method = 38;
  for (int i = 0; i < this->update_method_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      38, this->update_method(i), output);
  }
  
  // optional .caffepro.BatchNormalizationParameter batch_norm_param = 40;
  if (has_batch_norm_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->batch_norm_param(), output);
  }
  
  // optional bool record_internel = 41 [default = false];
  if (has_record_internel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->record_internel(), output);
  }
  
  // optional .caffepro.EltwiseSumParameter eltwise_sum_param = 44;
  if (has_eltwise_sum_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->eltwise_sum_param(), output);
  }
  
  // optional .caffepro.ClsLocLossParameter clsloc_loss_param = 48;
  if (has_clsloc_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->clsloc_loss_param(), output);
  }
  
  // optional .caffepro.AnchorParameter anchor_param = 49;
  if (has_anchor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, this->anchor_param(), output);
  }
  
  // optional .caffepro.GridGeneratorParameter grid_generator_param = 52;
  if (has_grid_generator_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->grid_generator_param(), output);
  }
  
  // optional .caffepro.DataEntryParameter data_entry_param = 53;
  if (has_data_entry_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->data_entry_param(), output);
  }
  
  // optional .caffepro.SampleParameter sample_param = 54;
  if (has_sample_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->sample_param(), output);
  }
  
  // optional string share_weights = 55;
  if (has_share_weights()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->share_weights().data(), this->share_weights().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      55, this->share_weights(), output);
  }
  
  // optional .caffepro.ExpParameter exp_param = 56;
  if (has_exp_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, this->exp_param(), output);
  }
  
  // optional .caffepro.BoundParameter bound_param = 57;
  if (has_bound_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, this->bound_param(), output);
  }
  
  // optional .caffepro.ClusterParameter cluster_param = 58;
  if (has_cluster_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->cluster_param(), output);
  }
  
  // optional .caffepro.OnlineKMeansParameter online_kmeans_param = 59;
  if (has_online_kmeans_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, this->online_kmeans_param(), output);
  }
  
  // optional .caffepro.CorrelationParameter correlation_param = 60;
  if (has_correlation_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->correlation_param(), output);
  }
  
  // optional .caffepro.WeightParameter weight_param = 61;
  if (has_weight_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->weight_param(), output);
  }
  
  // optional .caffepro.ScaleBiasParameter scalebias_param = 62;
  if (has_scalebias_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->scalebias_param(), output);
  }
  
  // optional .caffepro.CropParameter crop_param = 63;
  if (has_crop_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->crop_param(), output);
  }
  
  // optional .caffepro.ReduceDimParameter reduce_dim_param = 64;
  if (has_reduce_dim_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, this->reduce_dim_param(), output);
  }
  
  // optional .caffepro.FlipParameter flip_param = 65;
  if (has_flip_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, this->flip_param(), output);
  }
  
  // optional .caffepro.StepGateParameter step_gate_param = 66;
  if (has_step_gate_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      66, this->step_gate_param(), output);
  }
  
  // optional .caffepro.HouseholderParameter householder_param = 67;
  if (has_householder_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      67, this->householder_param(), output);
  }
  
  // optional .caffepro.InstanceSampleParameter instance_sample_param = 68;
  if (has_instance_sample_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      68, this->instance_sample_param(), output);
  }
  
  // optional .caffepro.MatrixMulParameter matrix_mul_param = 69;
  if (has_matrix_mul_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      69, this->matrix_mul_param(), output);
  }
  
  // optional .caffepro.MatrixMulStackParameter matrix_mul_stack_param = 70;
  if (has_matrix_mul_stack_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->matrix_mul_stack_param(), output);
  }
  
  // optional .caffepro.TransposeParameter transpose_param = 71;
  if (has_transpose_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71, this->transpose_param(), output);
  }
  
  // optional .caffepro.ReshapeParameter reshape_param = 72;
  if (has_reshape_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      72, this->reshape_param(), output);
  }
  
  // optional .caffepro.LearnableDropoutParameter learnable_dropout_param = 73;
  if (has_learnable_dropout_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      73, this->learnable_dropout_param(), output);
  }
  
  // optional .caffepro.DimInnerProductParameter dim_innerproduct_param = 74;
  if (has_dim_innerproduct_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      74, this->dim_innerproduct_param(), output);
  }
  
  // optional .caffepro.SoftthrParameter softthr_param = 75;
  if (has_softthr_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      75, this->softthr_param(), output);
  }
  
  // optional .caffepro.DropoutParameter dropoutsame_param = 76;
  if (has_dropoutsame_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      76, this->dropoutsame_param(), output);
  }
  
  // optional .caffepro.SoftMaxLossOHEMParameter softmaxlossohem_param = 77;
  if (has_softmaxlossohem_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      77, this->softmaxlossohem_param(), output);
  }
  
  // optional .caffepro.SoftMaxOHEMParameter softmaxohem_param = 78;
  if (has_softmaxohem_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      78, this->softmaxohem_param(), output);
  }
  
  // optional .caffepro.SoftMaxOHEMSplitParameter softmaxohemsplit_param = 79;
  if (has_softmaxohemsplit_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      79, this->softmaxohemsplit_param(), output);
  }
  
  // optional .caffepro.DiagOperationParameter diag_operation_param = 80;
  if (has_diag_operation_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      80, this->diag_operation_param(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LayerParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }
  
  // repeated .caffepro.BlobProto blobs = 3;
  for (int i = 0; i < this->blobs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->blobs(i), target);
  }
  
  // repeated float blobs_lr = 4;
  for (int i = 0; i < this->blobs_lr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->blobs_lr(i), target);
  }
  
  // repeated float weight_decay = 5;
  for (int i = 0; i < this->weight_decay_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->weight_decay(i), target);
  }
  
  // repeated string blob_source_layer = 6;
  for (int i = 0; i < this->blob_source_layer_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->blob_source_layer(i).data(), this->blob_source_layer(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->blob_source_layer(i), target);
  }
  
  // optional .caffepro.ConcatParameter concat_param = 8;
  if (has_concat_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->concat_param(), target);
  }
  
  // optional .caffepro.ConvolutionParameter conv_param = 9;
  if (has_conv_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->conv_param(), target);
  }
  
  // optional .caffepro.DataParameter_BigFile data_bigfile_param = 11;
  if (has_data_bigfile_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->data_bigfile_param(), target);
  }
  
  // optional .caffepro.DropoutParameter dropout_param = 12;
  if (has_dropout_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->dropout_param(), target);
  }
  
  // optional .caffepro.InfogainLossParameter infogain_loss_param = 16;
  if (has_infogain_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->infogain_loss_param(), target);
  }
  
  // optional .caffepro.InnerProductParameter inner_product_param = 17;
  if (has_inner_product_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->inner_product_param(), target);
  }
  
  // optional .caffepro.LRNParameter lrn_param = 18;
  if (has_lrn_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->lrn_param(), target);
  }
  
  // optional .caffepro.PoolingParameter pool_param = 19;
  if (has_pool_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->pool_param(), target);
  }
  
  // optional .caffepro.PowerParameter power_param = 20;
  if (has_power_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->power_param(), target);
  }
  
  // optional .caffepro.PaddingParameter padding_param = 23;
  if (has_padding_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->padding_param(), target);
  }
  
  // optional .caffepro.SPMParameter spm_param = 24;
  if (has_spm_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->spm_param(), target);
  }
  
  // optional int32 gpu_id = 30 [default = -1];
  if (has_gpu_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->gpu_id(), target);
  }
  
  // optional .caffepro.GPUSplitParameter gpu_split = 31;
  if (has_gpu_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->gpu_split(), target);
  }
  
  // optional .caffepro.LossParameter loss_param = 34;
  if (has_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->loss_param(), target);
  }
  
  // optional bool record = 35 [default = false];
  if (has_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->record(), target);
  }
  
  // optional .caffepro.ReluParameter relu_param = 36;
  if (has_relu_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->relu_param(), target);
  }
  
  // optional .caffepro.LearnableLeakReluParameter learnable_leak_relu_param = 37;
  if (has_learnable_leak_relu_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->learnable_leak_relu_param(), target);
  }
  
  // repeated .caffepro.LayerParameter.UpdateMethod update_method = 38;
  for (int i = 0; i < this->update_method_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      38, this->update_method(i), target);
  }
  
  // optional .caffepro.BatchNormalizationParameter batch_norm_param = 40;
  if (has_batch_norm_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->batch_norm_param(), target);
  }
  
  // optional bool record_internel = 41 [default = false];
  if (has_record_internel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->record_internel(), target);
  }
  
  // optional .caffepro.EltwiseSumParameter eltwise_sum_param = 44;
  if (has_eltwise_sum_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->eltwise_sum_param(), target);
  }
  
  // optional .caffepro.ClsLocLossParameter clsloc_loss_param = 48;
  if (has_clsloc_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->clsloc_loss_param(), target);
  }
  
  // optional .caffepro.AnchorParameter anchor_param = 49;
  if (has_anchor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, this->anchor_param(), target);
  }
  
  // optional .caffepro.GridGeneratorParameter grid_generator_param = 52;
  if (has_grid_generator_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->grid_generator_param(), target);
  }
  
  // optional .caffepro.DataEntryParameter data_entry_param = 53;
  if (has_data_entry_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->data_entry_param(), target);
  }
  
  // optional .caffepro.SampleParameter sample_param = 54;
  if (has_sample_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->sample_param(), target);
  }
  
  // optional string share_weights = 55;
  if (has_share_weights()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->share_weights().data(), this->share_weights().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        55, this->share_weights(), target);
  }
  
  // optional .caffepro.ExpParameter exp_param = 56;
  if (has_exp_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        56, this->exp_param(), target);
  }
  
  // optional .caffepro.BoundParameter bound_param = 57;
  if (has_bound_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, this->bound_param(), target);
  }
  
  // optional .caffepro.ClusterParameter cluster_param = 58;
  if (has_cluster_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->cluster_param(), target);
  }
  
  // optional .caffepro.OnlineKMeansParameter online_kmeans_param = 59;
  if (has_online_kmeans_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, this->online_kmeans_param(), target);
  }
  
  // optional .caffepro.CorrelationParameter correlation_param = 60;
  if (has_correlation_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->correlation_param(), target);
  }
  
  // optional .caffepro.WeightParameter weight_param = 61;
  if (has_weight_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, this->weight_param(), target);
  }
  
  // optional .caffepro.ScaleBiasParameter scalebias_param = 62;
  if (has_scalebias_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->scalebias_param(), target);
  }
  
  // optional .caffepro.CropParameter crop_param = 63;
  if (has_crop_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, this->crop_param(), target);
  }
  
  // optional .caffepro.ReduceDimParameter reduce_dim_param = 64;
  if (has_reduce_dim_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        64, this->reduce_dim_param(), target);
  }
  
  // optional .caffepro.FlipParameter flip_param = 65;
  if (has_flip_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        65, this->flip_param(), target);
  }
  
  // optional .caffepro.StepGateParameter step_gate_param = 66;
  if (has_step_gate_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        66, this->step_gate_param(), target);
  }
  
  // optional .caffepro.HouseholderParameter householder_param = 67;
  if (has_householder_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        67, this->householder_param(), target);
  }
  
  // optional .caffepro.InstanceSampleParameter instance_sample_param = 68;
  if (has_instance_sample_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        68, this->instance_sample_param(), target);
  }
  
  // optional .caffepro.MatrixMulParameter matrix_mul_param = 69;
  if (has_matrix_mul_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        69, this->matrix_mul_param(), target);
  }
  
  // optional .caffepro.MatrixMulStackParameter matrix_mul_stack_param = 70;
  if (has_matrix_mul_stack_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->matrix_mul_stack_param(), target);
  }
  
  // optional .caffepro.TransposeParameter transpose_param = 71;
  if (has_transpose_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        71, this->transpose_param(), target);
  }
  
  // optional .caffepro.ReshapeParameter reshape_param = 72;
  if (has_reshape_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        72, this->reshape_param(), target);
  }
  
  // optional .caffepro.LearnableDropoutParameter learnable_dropout_param = 73;
  if (has_learnable_dropout_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        73, this->learnable_dropout_param(), target);
  }
  
  // optional .caffepro.DimInnerProductParameter dim_innerproduct_param = 74;
  if (has_dim_innerproduct_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        74, this->dim_innerproduct_param(), target);
  }
  
  // optional .caffepro.SoftthrParameter softthr_param = 75;
  if (has_softthr_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        75, this->softthr_param(), target);
  }
  
  // optional .caffepro.DropoutParameter dropoutsame_param = 76;
  if (has_dropoutsame_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        76, this->dropoutsame_param(), target);
  }
  
  // optional .caffepro.SoftMaxLossOHEMParameter softmaxlossohem_param = 77;
  if (has_softmaxlossohem_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        77, this->softmaxlossohem_param(), target);
  }
  
  // optional .caffepro.SoftMaxOHEMParameter softmaxohem_param = 78;
  if (has_softmaxohem_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        78, this->softmaxohem_param(), target);
  }
  
  // optional .caffepro.SoftMaxOHEMSplitParameter softmaxohemsplit_param = 79;
  if (has_softmaxohemsplit_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        79, this->softmaxohemsplit_param(), target);
  }
  
  // optional .caffepro.DiagOperationParameter diag_operation_param = 80;
  if (has_diag_operation_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        80, this->diag_operation_param(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LayerParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // optional .caffepro.ConcatParameter concat_param = 8;
    if (has_concat_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->concat_param());
    }
    
    // optional .caffepro.ConvolutionParameter conv_param = 9;
    if (has_conv_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conv_param());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .caffepro.DataParameter_BigFile data_bigfile_param = 11;
    if (has_data_bigfile_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_bigfile_param());
    }
    
    // optional .caffepro.DropoutParameter dropout_param = 12;
    if (has_dropout_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dropout_param());
    }
    
    // optional .caffepro.InfogainLossParameter infogain_loss_param = 16;
    if (has_infogain_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infogain_loss_param());
    }
    
    // optional .caffepro.InnerProductParameter inner_product_param = 17;
    if (has_inner_product_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inner_product_param());
    }
    
    // optional .caffepro.LRNParameter lrn_param = 18;
    if (has_lrn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lrn_param());
    }
    
    // optional .caffepro.PoolingParameter pool_param = 19;
    if (has_pool_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pool_param());
    }
    
    // optional .caffepro.PowerParameter power_param = 20;
    if (has_power_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->power_param());
    }
    
    // optional .caffepro.PaddingParameter padding_param = 23;
    if (has_padding_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->padding_param());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .caffepro.SPMParameter spm_param = 24;
    if (has_spm_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spm_param());
    }
    
    // optional int32 gpu_id = 30 [default = -1];
    if (has_gpu_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpu_id());
    }
    
    // optional .caffepro.GPUSplitParameter gpu_split = 31;
    if (has_gpu_split()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gpu_split());
    }
    
    // optional .caffepro.LossParameter loss_param = 34;
    if (has_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loss_param());
    }
    
    // optional bool record = 35 [default = false];
    if (has_record()) {
      total_size += 2 + 1;
    }
    
    // optional .caffepro.ReluParameter relu_param = 36;
    if (has_relu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relu_param());
    }
    
    // optional .caffepro.LearnableLeakReluParameter learnable_leak_relu_param = 37;
    if (has_learnable_leak_relu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->learnable_leak_relu_param());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .caffepro.BatchNormalizationParameter batch_norm_param = 40;
    if (has_batch_norm_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->batch_norm_param());
    }
    
    // optional bool record_internel = 41 [default = false];
    if (has_record_internel()) {
      total_size += 2 + 1;
    }
    
    // optional .caffepro.EltwiseSumParameter eltwise_sum_param = 44;
    if (has_eltwise_sum_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eltwise_sum_param());
    }
    
    // optional .caffepro.ClsLocLossParameter clsloc_loss_param = 48;
    if (has_clsloc_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clsloc_loss_param());
    }
    
    // optional .caffepro.AnchorParameter anchor_param = 49;
    if (has_anchor_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anchor_param());
    }
    
    // optional .caffepro.GridGeneratorParameter grid_generator_param = 52;
    if (has_grid_generator_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grid_generator_param());
    }
    
    // optional .caffepro.DataEntryParameter data_entry_param = 53;
    if (has_data_entry_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_entry_param());
    }
    
    // optional .caffepro.SampleParameter sample_param = 54;
    if (has_sample_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sample_param());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string share_weights = 55;
    if (has_share_weights()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->share_weights());
    }
    
    // optional .caffepro.ExpParameter exp_param = 56;
    if (has_exp_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exp_param());
    }
    
    // optional .caffepro.BoundParameter bound_param = 57;
    if (has_bound_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bound_param());
    }
    
    // optional .caffepro.ClusterParameter cluster_param = 58;
    if (has_cluster_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cluster_param());
    }
    
    // optional .caffepro.OnlineKMeansParameter online_kmeans_param = 59;
    if (has_online_kmeans_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->online_kmeans_param());
    }
    
    // optional .caffepro.CorrelationParameter correlation_param = 60;
    if (has_correlation_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->correlation_param());
    }
    
    // optional .caffepro.WeightParameter weight_param = 61;
    if (has_weight_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weight_param());
    }
    
    // optional .caffepro.ScaleBiasParameter scalebias_param = 62;
    if (has_scalebias_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scalebias_param());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .caffepro.CropParameter crop_param = 63;
    if (has_crop_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crop_param());
    }
    
    // optional .caffepro.ReduceDimParameter reduce_dim_param = 64;
    if (has_reduce_dim_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reduce_dim_param());
    }
    
    // optional .caffepro.FlipParameter flip_param = 65;
    if (has_flip_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flip_param());
    }
    
    // optional .caffepro.StepGateParameter step_gate_param = 66;
    if (has_step_gate_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->step_gate_param());
    }
    
    // optional .caffepro.HouseholderParameter householder_param = 67;
    if (has_householder_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->householder_param());
    }
    
    // optional .caffepro.InstanceSampleParameter instance_sample_param = 68;
    if (has_instance_sample_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instance_sample_param());
    }
    
    // optional .caffepro.MatrixMulParameter matrix_mul_param = 69;
    if (has_matrix_mul_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matrix_mul_param());
    }
    
    // optional .caffepro.MatrixMulStackParameter matrix_mul_stack_param = 70;
    if (has_matrix_mul_stack_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matrix_mul_stack_param());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .caffepro.TransposeParameter transpose_param = 71;
    if (has_transpose_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transpose_param());
    }
    
    // optional .caffepro.ReshapeParameter reshape_param = 72;
    if (has_reshape_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reshape_param());
    }
    
    // optional .caffepro.LearnableDropoutParameter learnable_dropout_param = 73;
    if (has_learnable_dropout_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->learnable_dropout_param());
    }
    
    // optional .caffepro.DimInnerProductParameter dim_innerproduct_param = 74;
    if (has_dim_innerproduct_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dim_innerproduct_param());
    }
    
    // optional .caffepro.SoftthrParameter softthr_param = 75;
    if (has_softthr_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->softthr_param());
    }
    
    // optional .caffepro.DropoutParameter dropoutsame_param = 76;
    if (has_dropoutsame_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dropoutsame_param());
    }
    
    // optional .caffepro.SoftMaxLossOHEMParameter softmaxlossohem_param = 77;
    if (has_softmaxlossohem_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->softmaxlossohem_param());
    }
    
    // optional .caffepro.SoftMaxOHEMParameter softmaxohem_param = 78;
    if (has_softmaxohem_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->softmaxohem_param());
    }
    
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .caffepro.SoftMaxOHEMSplitParameter softmaxohemsplit_param = 79;
    if (has_softmaxohemsplit_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->softmaxohemsplit_param());
    }
    
    // optional .caffepro.DiagOperationParameter diag_operation_param = 80;
    if (has_diag_operation_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->diag_operation_param());
    }
    
  }
  // repeated .caffepro.BlobProto blobs = 3;
  total_size += 1 * this->blobs_size();
  for (int i = 0; i < this->blobs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blobs(i));
  }
  
  // repeated float blobs_lr = 4;
  {
    int data_size = 0;
    data_size = 4 * this->blobs_lr_size();
    total_size += 1 * this->blobs_lr_size() + data_size;
  }
  
  // repeated float weight_decay = 5;
  {
    int data_size = 0;
    data_size = 4 * this->weight_decay_size();
    total_size += 1 * this->weight_decay_size() + data_size;
  }
  
  // repeated string blob_source_layer = 6;
  total_size += 1 * this->blob_source_layer_size();
  for (int i = 0; i < this->blob_source_layer_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->blob_source_layer(i));
  }
  
  // repeated .caffepro.LayerParameter.UpdateMethod update_method = 38;
  {
    int data_size = 0;
    for (int i = 0; i < this->update_method_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->update_method(i));
    }
    total_size += 2 * this->update_method_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LayerParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LayerParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LayerParameter::MergeFrom(const LayerParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  blobs_.MergeFrom(from.blobs_);
  blobs_lr_.MergeFrom(from.blobs_lr_);
  weight_decay_.MergeFrom(from.weight_decay_);
  blob_source_layer_.MergeFrom(from.blob_source_layer_);
  update_method_.MergeFrom(from.update_method_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_concat_param()) {
      mutable_concat_param()->::caffepro::ConcatParameter::MergeFrom(from.concat_param());
    }
    if (from.has_conv_param()) {
      mutable_conv_param()->::caffepro::ConvolutionParameter::MergeFrom(from.conv_param());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_data_bigfile_param()) {
      mutable_data_bigfile_param()->::caffepro::DataParameter_BigFile::MergeFrom(from.data_bigfile_param());
    }
    if (from.has_dropout_param()) {
      mutable_dropout_param()->::caffepro::DropoutParameter::MergeFrom(from.dropout_param());
    }
    if (from.has_infogain_loss_param()) {
      mutable_infogain_loss_param()->::caffepro::InfogainLossParameter::MergeFrom(from.infogain_loss_param());
    }
    if (from.has_inner_product_param()) {
      mutable_inner_product_param()->::caffepro::InnerProductParameter::MergeFrom(from.inner_product_param());
    }
    if (from.has_lrn_param()) {
      mutable_lrn_param()->::caffepro::LRNParameter::MergeFrom(from.lrn_param());
    }
    if (from.has_pool_param()) {
      mutable_pool_param()->::caffepro::PoolingParameter::MergeFrom(from.pool_param());
    }
    if (from.has_power_param()) {
      mutable_power_param()->::caffepro::PowerParameter::MergeFrom(from.power_param());
    }
    if (from.has_padding_param()) {
      mutable_padding_param()->::caffepro::PaddingParameter::MergeFrom(from.padding_param());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_spm_param()) {
      mutable_spm_param()->::caffepro::SPMParameter::MergeFrom(from.spm_param());
    }
    if (from.has_gpu_id()) {
      set_gpu_id(from.gpu_id());
    }
    if (from.has_gpu_split()) {
      mutable_gpu_split()->::caffepro::GPUSplitParameter::MergeFrom(from.gpu_split());
    }
    if (from.has_loss_param()) {
      mutable_loss_param()->::caffepro::LossParameter::MergeFrom(from.loss_param());
    }
    if (from.has_record()) {
      set_record(from.record());
    }
    if (from.has_relu_param()) {
      mutable_relu_param()->::caffepro::ReluParameter::MergeFrom(from.relu_param());
    }
    if (from.has_learnable_leak_relu_param()) {
      mutable_learnable_leak_relu_param()->::caffepro::LearnableLeakReluParameter::MergeFrom(from.learnable_leak_relu_param());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_batch_norm_param()) {
      mutable_batch_norm_param()->::caffepro::BatchNormalizationParameter::MergeFrom(from.batch_norm_param());
    }
    if (from.has_record_internel()) {
      set_record_internel(from.record_internel());
    }
    if (from.has_eltwise_sum_param()) {
      mutable_eltwise_sum_param()->::caffepro::EltwiseSumParameter::MergeFrom(from.eltwise_sum_param());
    }
    if (from.has_clsloc_loss_param()) {
      mutable_clsloc_loss_param()->::caffepro::ClsLocLossParameter::MergeFrom(from.clsloc_loss_param());
    }
    if (from.has_anchor_param()) {
      mutable_anchor_param()->::caffepro::AnchorParameter::MergeFrom(from.anchor_param());
    }
    if (from.has_grid_generator_param()) {
      mutable_grid_generator_param()->::caffepro::GridGeneratorParameter::MergeFrom(from.grid_generator_param());
    }
    if (from.has_data_entry_param()) {
      mutable_data_entry_param()->::caffepro::DataEntryParameter::MergeFrom(from.data_entry_param());
    }
    if (from.has_sample_param()) {
      mutable_sample_param()->::caffepro::SampleParameter::MergeFrom(from.sample_param());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_share_weights()) {
      set_share_weights(from.share_weights());
    }
    if (from.has_exp_param()) {
      mutable_exp_param()->::caffepro::ExpParameter::MergeFrom(from.exp_param());
    }
    if (from.has_bound_param()) {
      mutable_bound_param()->::caffepro::BoundParameter::MergeFrom(from.bound_param());
    }
    if (from.has_cluster_param()) {
      mutable_cluster_param()->::caffepro::ClusterParameter::MergeFrom(from.cluster_param());
    }
    if (from.has_online_kmeans_param()) {
      mutable_online_kmeans_param()->::caffepro::OnlineKMeansParameter::MergeFrom(from.online_kmeans_param());
    }
    if (from.has_correlation_param()) {
      mutable_correlation_param()->::caffepro::CorrelationParameter::MergeFrom(from.correlation_param());
    }
    if (from.has_weight_param()) {
      mutable_weight_param()->::caffepro::WeightParameter::MergeFrom(from.weight_param());
    }
    if (from.has_scalebias_param()) {
      mutable_scalebias_param()->::caffepro::ScaleBiasParameter::MergeFrom(from.scalebias_param());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_crop_param()) {
      mutable_crop_param()->::caffepro::CropParameter::MergeFrom(from.crop_param());
    }
    if (from.has_reduce_dim_param()) {
      mutable_reduce_dim_param()->::caffepro::ReduceDimParameter::MergeFrom(from.reduce_dim_param());
    }
    if (from.has_flip_param()) {
      mutable_flip_param()->::caffepro::FlipParameter::MergeFrom(from.flip_param());
    }
    if (from.has_step_gate_param()) {
      mutable_step_gate_param()->::caffepro::StepGateParameter::MergeFrom(from.step_gate_param());
    }
    if (from.has_householder_param()) {
      mutable_householder_param()->::caffepro::HouseholderParameter::MergeFrom(from.householder_param());
    }
    if (from.has_instance_sample_param()) {
      mutable_instance_sample_param()->::caffepro::InstanceSampleParameter::MergeFrom(from.instance_sample_param());
    }
    if (from.has_matrix_mul_param()) {
      mutable_matrix_mul_param()->::caffepro::MatrixMulParameter::MergeFrom(from.matrix_mul_param());
    }
    if (from.has_matrix_mul_stack_param()) {
      mutable_matrix_mul_stack_param()->::caffepro::MatrixMulStackParameter::MergeFrom(from.matrix_mul_stack_param());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_transpose_param()) {
      mutable_transpose_param()->::caffepro::TransposeParameter::MergeFrom(from.transpose_param());
    }
    if (from.has_reshape_param()) {
      mutable_reshape_param()->::caffepro::ReshapeParameter::MergeFrom(from.reshape_param());
    }
    if (from.has_learnable_dropout_param()) {
      mutable_learnable_dropout_param()->::caffepro::LearnableDropoutParameter::MergeFrom(from.learnable_dropout_param());
    }
    if (from.has_dim_innerproduct_param()) {
      mutable_dim_innerproduct_param()->::caffepro::DimInnerProductParameter::MergeFrom(from.dim_innerproduct_param());
    }
    if (from.has_softthr_param()) {
      mutable_softthr_param()->::caffepro::SoftthrParameter::MergeFrom(from.softthr_param());
    }
    if (from.has_dropoutsame_param()) {
      mutable_dropoutsame_param()->::caffepro::DropoutParameter::MergeFrom(from.dropoutsame_param());
    }
    if (from.has_softmaxlossohem_param()) {
      mutable_softmaxlossohem_param()->::caffepro::SoftMaxLossOHEMParameter::MergeFrom(from.softmaxlossohem_param());
    }
    if (from.has_softmaxohem_param()) {
      mutable_softmaxohem_param()->::caffepro::SoftMaxOHEMParameter::MergeFrom(from.softmaxohem_param());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_softmaxohemsplit_param()) {
      mutable_softmaxohemsplit_param()->::caffepro::SoftMaxOHEMSplitParameter::MergeFrom(from.softmaxohemsplit_param());
    }
    if (from.has_diag_operation_param()) {
      mutable_diag_operation_param()->::caffepro::DiagOperationParameter::MergeFrom(from.diag_operation_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerParameter::CopyFrom(const LayerParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerParameter::IsInitialized() const {
  
  if (has_data_bigfile_param()) {
    if (!this->data_bigfile_param().IsInitialized()) return false;
  }
  if (has_learnable_leak_relu_param()) {
    if (!this->learnable_leak_relu_param().IsInitialized()) return false;
  }
  if (has_batch_norm_param()) {
    if (!this->batch_norm_param().IsInitialized()) return false;
  }
  if (has_anchor_param()) {
    if (!this->anchor_param().IsInitialized()) return false;
  }
  if (has_grid_generator_param()) {
    if (!this->grid_generator_param().IsInitialized()) return false;
  }
  if (has_data_entry_param()) {
    if (!this->data_entry_param().IsInitialized()) return false;
  }
  if (has_bound_param()) {
    if (!this->bound_param().IsInitialized()) return false;
  }
  if (has_cluster_param()) {
    if (!this->cluster_param().IsInitialized()) return false;
  }
  if (has_online_kmeans_param()) {
    if (!this->online_kmeans_param().IsInitialized()) return false;
  }
  if (has_crop_param()) {
    if (!this->crop_param().IsInitialized()) return false;
  }
  if (has_reduce_dim_param()) {
    if (!this->reduce_dim_param().IsInitialized()) return false;
  }
  if (has_step_gate_param()) {
    if (!this->step_gate_param().IsInitialized()) return false;
  }
  if (has_instance_sample_param()) {
    if (!this->instance_sample_param().IsInitialized()) return false;
  }
  if (has_matrix_mul_stack_param()) {
    if (!this->matrix_mul_stack_param().IsInitialized()) return false;
  }
  if (has_transpose_param()) {
    if (!this->transpose_param().IsInitialized()) return false;
  }
  if (has_dim_innerproduct_param()) {
    if (!this->dim_innerproduct_param().IsInitialized()) return false;
  }
  return true;
}

void LayerParameter::Swap(LayerParameter* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    blobs_.Swap(&other->blobs_);
    blobs_lr_.Swap(&other->blobs_lr_);
    weight_decay_.Swap(&other->weight_decay_);
    blob_source_layer_.Swap(&other->blob_source_layer_);
    std::swap(concat_param_, other->concat_param_);
    std::swap(conv_param_, other->conv_param_);
    std::swap(data_bigfile_param_, other->data_bigfile_param_);
    std::swap(dropout_param_, other->dropout_param_);
    std::swap(infogain_loss_param_, other->infogain_loss_param_);
    std::swap(inner_product_param_, other->inner_product_param_);
    std::swap(lrn_param_, other->lrn_param_);
    std::swap(pool_param_, other->pool_param_);
    std::swap(power_param_, other->power_param_);
    std::swap(padding_param_, other->padding_param_);
    std::swap(spm_param_, other->spm_param_);
    std::swap(gpu_id_, other->gpu_id_);
    std::swap(gpu_split_, other->gpu_split_);
    std::swap(loss_param_, other->loss_param_);
    std::swap(record_, other->record_);
    std::swap(relu_param_, other->relu_param_);
    std::swap(learnable_leak_relu_param_, other->learnable_leak_relu_param_);
    update_method_.Swap(&other->update_method_);
    std::swap(batch_norm_param_, other->batch_norm_param_);
    std::swap(record_internel_, other->record_internel_);
    std::swap(eltwise_sum_param_, other->eltwise_sum_param_);
    std::swap(clsloc_loss_param_, other->clsloc_loss_param_);
    std::swap(anchor_param_, other->anchor_param_);
    std::swap(grid_generator_param_, other->grid_generator_param_);
    std::swap(data_entry_param_, other->data_entry_param_);
    std::swap(sample_param_, other->sample_param_);
    std::swap(share_weights_, other->share_weights_);
    std::swap(exp_param_, other->exp_param_);
    std::swap(bound_param_, other->bound_param_);
    std::swap(cluster_param_, other->cluster_param_);
    std::swap(online_kmeans_param_, other->online_kmeans_param_);
    std::swap(correlation_param_, other->correlation_param_);
    std::swap(weight_param_, other->weight_param_);
    std::swap(scalebias_param_, other->scalebias_param_);
    std::swap(crop_param_, other->crop_param_);
    std::swap(reduce_dim_param_, other->reduce_dim_param_);
    std::swap(flip_param_, other->flip_param_);
    std::swap(step_gate_param_, other->step_gate_param_);
    std::swap(householder_param_, other->householder_param_);
    std::swap(instance_sample_param_, other->instance_sample_param_);
    std::swap(matrix_mul_param_, other->matrix_mul_param_);
    std::swap(matrix_mul_stack_param_, other->matrix_mul_stack_param_);
    std::swap(transpose_param_, other->transpose_param_);
    std::swap(reshape_param_, other->reshape_param_);
    std::swap(learnable_dropout_param_, other->learnable_dropout_param_);
    std::swap(dim_innerproduct_param_, other->dim_innerproduct_param_);
    std::swap(softthr_param_, other->softthr_param_);
    std::swap(dropoutsame_param_, other->dropoutsame_param_);
    std::swap(softmaxlossohem_param_, other->softmaxlossohem_param_);
    std::swap(softmaxohem_param_, other->softmaxohem_param_);
    std::swap(softmaxohemsplit_param_, other->softmaxohemsplit_param_);
    std::swap(diag_operation_param_, other->diag_operation_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LayerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayerParameter_descriptor_;
  metadata.reflection = LayerParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClusterParameter::kNumCentersFieldNumber;
const int ClusterParameter::kWeightFillerFieldNumber;
#endif  // !_MSC_VER

ClusterParameter::ClusterParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClusterParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffepro::FillerParameter*>(&::caffepro::FillerParameter::default_instance());
}

ClusterParameter::ClusterParameter(const ClusterParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClusterParameter::SharedCtor() {
  _cached_size_ = 0;
  num_centers_ = 0;
  weight_filler_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClusterParameter::~ClusterParameter() {
  SharedDtor();
}

void ClusterParameter::SharedDtor() {
  if (this != default_instance_) {
    delete weight_filler_;
  }
}

void ClusterParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterParameter_descriptor_;
}

const ClusterParameter& ClusterParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

ClusterParameter* ClusterParameter::default_instance_ = NULL;

ClusterParameter* ClusterParameter::New() const {
  return new ClusterParameter;
}

void ClusterParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_centers_ = 0;
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffepro::FillerParameter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClusterParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num_centers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_centers_)));
          set_has_num_centers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_weight_filler;
        break;
      }
      
      // optional .caffepro.FillerParameter weight_filler = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClusterParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num_centers = 1;
  if (has_num_centers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_centers(), output);
  }
  
  // optional .caffepro.FillerParameter weight_filler = 2;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->weight_filler(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClusterParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num_centers = 1;
  if (has_num_centers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_centers(), target);
  }
  
  // optional .caffepro.FillerParameter weight_filler = 2;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->weight_filler(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClusterParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num_centers = 1;
    if (has_num_centers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_centers());
    }
    
    // optional .caffepro.FillerParameter weight_filler = 2;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weight_filler());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClusterParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClusterParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClusterParameter::MergeFrom(const ClusterParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_centers()) {
      set_num_centers(from.num_centers());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffepro::FillerParameter::MergeFrom(from.weight_filler());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClusterParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterParameter::CopyFrom(const ClusterParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ClusterParameter::Swap(ClusterParameter* other) {
  if (other != this) {
    std::swap(num_centers_, other->num_centers_);
    std::swap(weight_filler_, other->weight_filler_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClusterParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClusterParameter_descriptor_;
  metadata.reflection = ClusterParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineKMeansParameter::kUpdateIntervalFieldNumber;
const int OnlineKMeansParameter::kUpdateItersFieldNumber;
#endif  // !_MSC_VER

OnlineKMeansParameter::OnlineKMeansParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnlineKMeansParameter::InitAsDefaultInstance() {
}

OnlineKMeansParameter::OnlineKMeansParameter(const OnlineKMeansParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnlineKMeansParameter::SharedCtor() {
  _cached_size_ = 0;
  update_interval_ = 0;
  update_iters_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineKMeansParameter::~OnlineKMeansParameter() {
  SharedDtor();
}

void OnlineKMeansParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OnlineKMeansParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineKMeansParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineKMeansParameter_descriptor_;
}

const OnlineKMeansParameter& OnlineKMeansParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

OnlineKMeansParameter* OnlineKMeansParameter::default_instance_ = NULL;

OnlineKMeansParameter* OnlineKMeansParameter::New() const {
  return new OnlineKMeansParameter;
}

void OnlineKMeansParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    update_interval_ = 0;
    update_iters_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineKMeansParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 update_interval = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_interval_)));
          set_has_update_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_update_iters;
        break;
      }
      
      // required int32 update_iters = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_iters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_iters_)));
          set_has_update_iters();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlineKMeansParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 update_interval = 1;
  if (has_update_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->update_interval(), output);
  }
  
  // required int32 update_iters = 2;
  if (has_update_iters()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->update_iters(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnlineKMeansParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 update_interval = 1;
  if (has_update_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->update_interval(), target);
  }
  
  // required int32 update_iters = 2;
  if (has_update_iters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->update_iters(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnlineKMeansParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 update_interval = 1;
    if (has_update_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_interval());
    }
    
    // required int32 update_iters = 2;
    if (has_update_iters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_iters());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineKMeansParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineKMeansParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineKMeansParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineKMeansParameter::MergeFrom(const OnlineKMeansParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_interval()) {
      set_update_interval(from.update_interval());
    }
    if (from.has_update_iters()) {
      set_update_iters(from.update_iters());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineKMeansParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineKMeansParameter::CopyFrom(const OnlineKMeansParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineKMeansParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void OnlineKMeansParameter::Swap(OnlineKMeansParameter* other) {
  if (other != this) {
    std::swap(update_interval_, other->update_interval_);
    std::swap(update_iters_, other->update_iters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineKMeansParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineKMeansParameter_descriptor_;
  metadata.reflection = OnlineKMeansParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EltwiseSumParameter::kCoeffFieldNumber;
#endif  // !_MSC_VER

EltwiseSumParameter::EltwiseSumParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EltwiseSumParameter::InitAsDefaultInstance() {
}

EltwiseSumParameter::EltwiseSumParameter(const EltwiseSumParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EltwiseSumParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EltwiseSumParameter::~EltwiseSumParameter() {
  SharedDtor();
}

void EltwiseSumParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EltwiseSumParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EltwiseSumParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EltwiseSumParameter_descriptor_;
}

const EltwiseSumParameter& EltwiseSumParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

EltwiseSumParameter* EltwiseSumParameter::default_instance_ = NULL;

EltwiseSumParameter* EltwiseSumParameter::New() const {
  return new EltwiseSumParameter;
}

void EltwiseSumParameter::Clear() {
  coeff_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EltwiseSumParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float coeff = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_coeff())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_coeff())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_coeff;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EltwiseSumParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float coeff = 1;
  for (int i = 0; i < this->coeff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->coeff(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EltwiseSumParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float coeff = 1;
  for (int i = 0; i < this->coeff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->coeff(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EltwiseSumParameter::ByteSize() const {
  int total_size = 0;
  
  // repeated float coeff = 1;
  {
    int data_size = 0;
    data_size = 4 * this->coeff_size();
    total_size += 1 * this->coeff_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EltwiseSumParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EltwiseSumParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EltwiseSumParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EltwiseSumParameter::MergeFrom(const EltwiseSumParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  coeff_.MergeFrom(from.coeff_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EltwiseSumParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EltwiseSumParameter::CopyFrom(const EltwiseSumParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EltwiseSumParameter::IsInitialized() const {
  
  return true;
}

void EltwiseSumParameter::Swap(EltwiseSumParameter* other) {
  if (other != this) {
    coeff_.Swap(&other->coeff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EltwiseSumParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EltwiseSumParameter_descriptor_;
  metadata.reflection = EltwiseSumParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReluParameter::kReluLeakFieldNumber;
#endif  // !_MSC_VER

ReluParameter::ReluParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReluParameter::InitAsDefaultInstance() {
}

ReluParameter::ReluParameter(const ReluParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReluParameter::SharedCtor() {
  _cached_size_ = 0;
  relu_leak_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReluParameter::~ReluParameter() {
  SharedDtor();
}

void ReluParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReluParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReluParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReluParameter_descriptor_;
}

const ReluParameter& ReluParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

ReluParameter* ReluParameter::default_instance_ = NULL;

ReluParameter* ReluParameter::New() const {
  return new ReluParameter;
}

void ReluParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    relu_leak_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReluParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float relu_leak = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relu_leak_)));
          set_has_relu_leak();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReluParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float relu_leak = 1 [default = 0];
  if (has_relu_leak()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->relu_leak(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReluParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float relu_leak = 1 [default = 0];
  if (has_relu_leak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->relu_leak(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReluParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float relu_leak = 1 [default = 0];
    if (has_relu_leak()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReluParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReluParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReluParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReluParameter::MergeFrom(const ReluParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_relu_leak()) {
      set_relu_leak(from.relu_leak());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReluParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReluParameter::CopyFrom(const ReluParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReluParameter::IsInitialized() const {
  
  return true;
}

void ReluParameter::Swap(ReluParameter* other) {
  if (other != this) {
    std::swap(relu_leak_, other->relu_leak_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReluParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReluParameter_descriptor_;
  metadata.reflection = ReluParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LearnableLeakReluParameter_ShareParamMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LearnableLeakReluParameter_ShareParamMethod_descriptor_;
}
bool LearnableLeakReluParameter_ShareParamMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LearnableLeakReluParameter_ShareParamMethod LearnableLeakReluParameter::CHANNEL;
const LearnableLeakReluParameter_ShareParamMethod LearnableLeakReluParameter::ALL;
const LearnableLeakReluParameter_ShareParamMethod LearnableLeakReluParameter::ShareParamMethod_MIN;
const LearnableLeakReluParameter_ShareParamMethod LearnableLeakReluParameter::ShareParamMethod_MAX;
const int LearnableLeakReluParameter::ShareParamMethod_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LearnableLeakReluParameter::kReluLeakParamFieldNumber;
const int LearnableLeakReluParameter::kShareParamFieldNumber;
const int LearnableLeakReluParameter::kApplyBoundFieldNumber;
const int LearnableLeakReluParameter::kBoundUpperFieldNumber;
const int LearnableLeakReluParameter::kBoundLowerFieldNumber;
#endif  // !_MSC_VER

LearnableLeakReluParameter::LearnableLeakReluParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LearnableLeakReluParameter::InitAsDefaultInstance() {
  relu_leak_param_ = const_cast< ::caffepro::FillerParameter*>(&::caffepro::FillerParameter::default_instance());
}

LearnableLeakReluParameter::LearnableLeakReluParameter(const LearnableLeakReluParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LearnableLeakReluParameter::SharedCtor() {
  _cached_size_ = 0;
  relu_leak_param_ = NULL;
  share_param_ = 0;
  apply_bound_ = true;
  bound_upper_ = 1;
  bound_lower_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LearnableLeakReluParameter::~LearnableLeakReluParameter() {
  SharedDtor();
}

void LearnableLeakReluParameter::SharedDtor() {
  if (this != default_instance_) {
    delete relu_leak_param_;
  }
}

void LearnableLeakReluParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LearnableLeakReluParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LearnableLeakReluParameter_descriptor_;
}

const LearnableLeakReluParameter& LearnableLeakReluParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

LearnableLeakReluParameter* LearnableLeakReluParameter::default_instance_ = NULL;

LearnableLeakReluParameter* LearnableLeakReluParameter::New() const {
  return new LearnableLeakReluParameter;
}

void LearnableLeakReluParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_relu_leak_param()) {
      if (relu_leak_param_ != NULL) relu_leak_param_->::caffepro::FillerParameter::Clear();
    }
    share_param_ = 0;
    apply_bound_ = true;
    bound_upper_ = 1;
    bound_lower_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LearnableLeakReluParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .caffepro.FillerParameter relu_leak_param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relu_leak_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_share_param;
        break;
      }
      
      // required .caffepro.LearnableLeakReluParameter.ShareParamMethod share_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_share_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffepro::LearnableLeakReluParameter_ShareParamMethod_IsValid(value)) {
            set_share_param(static_cast< ::caffepro::LearnableLeakReluParameter_ShareParamMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_apply_bound;
        break;
      }
      
      // optional bool apply_bound = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &apply_bound_)));
          set_has_apply_bound();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_bound_upper;
        break;
      }
      
      // optional float bound_upper = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bound_upper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bound_upper_)));
          set_has_bound_upper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_bound_lower;
        break;
      }
      
      // optional float bound_lower = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bound_lower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bound_lower_)));
          set_has_bound_lower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LearnableLeakReluParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .caffepro.FillerParameter relu_leak_param = 1;
  if (has_relu_leak_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->relu_leak_param(), output);
  }
  
  // required .caffepro.LearnableLeakReluParameter.ShareParamMethod share_param = 2;
  if (has_share_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->share_param(), output);
  }
  
  // optional bool apply_bound = 3 [default = true];
  if (has_apply_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->apply_bound(), output);
  }
  
  // optional float bound_upper = 4 [default = 1];
  if (has_bound_upper()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->bound_upper(), output);
  }
  
  // optional float bound_lower = 5 [default = 0];
  if (has_bound_lower()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->bound_lower(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LearnableLeakReluParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .caffepro.FillerParameter relu_leak_param = 1;
  if (has_relu_leak_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->relu_leak_param(), target);
  }
  
  // required .caffepro.LearnableLeakReluParameter.ShareParamMethod share_param = 2;
  if (has_share_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->share_param(), target);
  }
  
  // optional bool apply_bound = 3 [default = true];
  if (has_apply_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->apply_bound(), target);
  }
  
  // optional float bound_upper = 4 [default = 1];
  if (has_bound_upper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->bound_upper(), target);
  }
  
  // optional float bound_lower = 5 [default = 0];
  if (has_bound_lower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->bound_lower(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LearnableLeakReluParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .caffepro.FillerParameter relu_leak_param = 1;
    if (has_relu_leak_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relu_leak_param());
    }
    
    // required .caffepro.LearnableLeakReluParameter.ShareParamMethod share_param = 2;
    if (has_share_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->share_param());
    }
    
    // optional bool apply_bound = 3 [default = true];
    if (has_apply_bound()) {
      total_size += 1 + 1;
    }
    
    // optional float bound_upper = 4 [default = 1];
    if (has_bound_upper()) {
      total_size += 1 + 4;
    }
    
    // optional float bound_lower = 5 [default = 0];
    if (has_bound_lower()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearnableLeakReluParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LearnableLeakReluParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LearnableLeakReluParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LearnableLeakReluParameter::MergeFrom(const LearnableLeakReluParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_relu_leak_param()) {
      mutable_relu_leak_param()->::caffepro::FillerParameter::MergeFrom(from.relu_leak_param());
    }
    if (from.has_share_param()) {
      set_share_param(from.share_param());
    }
    if (from.has_apply_bound()) {
      set_apply_bound(from.apply_bound());
    }
    if (from.has_bound_upper()) {
      set_bound_upper(from.bound_upper());
    }
    if (from.has_bound_lower()) {
      set_bound_lower(from.bound_lower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LearnableLeakReluParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearnableLeakReluParameter::CopyFrom(const LearnableLeakReluParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearnableLeakReluParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void LearnableLeakReluParameter::Swap(LearnableLeakReluParameter* other) {
  if (other != this) {
    std::swap(relu_leak_param_, other->relu_leak_param_);
    std::swap(share_param_, other->share_param_);
    std::swap(apply_bound_, other->apply_bound_);
    std::swap(bound_upper_, other->bound_upper_);
    std::swap(bound_lower_, other->bound_lower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LearnableLeakReluParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LearnableLeakReluParameter_descriptor_;
  metadata.reflection = LearnableLeakReluParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpParameter::kSlopeFieldNumber;
#endif  // !_MSC_VER

ExpParameter::ExpParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpParameter::InitAsDefaultInstance() {
}

ExpParameter::ExpParameter(const ExpParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpParameter::SharedCtor() {
  _cached_size_ = 0;
  slope_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpParameter::~ExpParameter() {
  SharedDtor();
}

void ExpParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpParameter_descriptor_;
}

const ExpParameter& ExpParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

ExpParameter* ExpParameter::default_instance_ = NULL;

ExpParameter* ExpParameter::New() const {
  return new ExpParameter;
}

void ExpParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slope_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float slope = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slope_)));
          set_has_slope();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float slope = 1 [default = 1];
  if (has_slope()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->slope(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float slope = 1 [default = 1];
  if (has_slope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->slope(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float slope = 1 [default = 1];
    if (has_slope()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpParameter::MergeFrom(const ExpParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slope()) {
      set_slope(from.slope());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpParameter::CopyFrom(const ExpParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpParameter::IsInitialized() const {
  
  return true;
}

void ExpParameter::Swap(ExpParameter* other) {
  if (other != this) {
    std::swap(slope_, other->slope_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpParameter_descriptor_;
  metadata.reflection = ExpParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoundParameter::kMaxValueFieldNumber;
const int BoundParameter::kMinValueFieldNumber;
#endif  // !_MSC_VER

BoundParameter::BoundParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BoundParameter::InitAsDefaultInstance() {
}

BoundParameter::BoundParameter(const BoundParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BoundParameter::SharedCtor() {
  _cached_size_ = 0;
  max_value_ = 0;
  min_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoundParameter::~BoundParameter() {
  SharedDtor();
}

void BoundParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoundParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoundParameter_descriptor_;
}

const BoundParameter& BoundParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

BoundParameter* BoundParameter::default_instance_ = NULL;

BoundParameter* BoundParameter::New() const {
  return new BoundParameter;
}

void BoundParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_value_ = 0;
    min_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoundParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float max_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_value_)));
          set_has_max_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_min_value;
        break;
      }
      
      // required float min_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_value_)));
          set_has_min_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoundParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float max_value = 1;
  if (has_max_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->max_value(), output);
  }
  
  // required float min_value = 2;
  if (has_min_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->min_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BoundParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float max_value = 1;
  if (has_max_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->max_value(), target);
  }
  
  // required float min_value = 2;
  if (has_min_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->min_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BoundParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float max_value = 1;
    if (has_max_value()) {
      total_size += 1 + 4;
    }
    
    // required float min_value = 2;
    if (has_min_value()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoundParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoundParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoundParameter::MergeFrom(const BoundParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_value()) {
      set_max_value(from.max_value());
    }
    if (from.has_min_value()) {
      set_min_value(from.min_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoundParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundParameter::CopyFrom(const BoundParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BoundParameter::Swap(BoundParameter* other) {
  if (other != this) {
    std::swap(max_value_, other->max_value_);
    std::swap(min_value_, other->min_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoundParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoundParameter_descriptor_;
  metadata.reflection = BoundParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BatchNormalizationParameter_RecordOption_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchNormalizationParameter_RecordOption_descriptor_;
}
bool BatchNormalizationParameter_RecordOption_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BatchNormalizationParameter_RecordOption BatchNormalizationParameter::NOT_RECORD;
const BatchNormalizationParameter_RecordOption BatchNormalizationParameter::RECORD;
const BatchNormalizationParameter_RecordOption BatchNormalizationParameter::USE_RECORD_NORM;
const BatchNormalizationParameter_RecordOption BatchNormalizationParameter::NOT_CALC;
const BatchNormalizationParameter_RecordOption BatchNormalizationParameter::RecordOption_MIN;
const BatchNormalizationParameter_RecordOption BatchNormalizationParameter::RecordOption_MAX;
const int BatchNormalizationParameter::RecordOption_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BatchNormalizationParameter::kScaleFillerFieldNumber;
const int BatchNormalizationParameter::kShiftFillerFieldNumber;
const int BatchNormalizationParameter::kRecordOptionFieldNumber;
const int BatchNormalizationParameter::kSlidingWindowEvalCoeffFieldNumber;
const int BatchNormalizationParameter::kKeepMeanFieldNumber;
#endif  // !_MSC_VER

BatchNormalizationParameter::BatchNormalizationParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchNormalizationParameter::InitAsDefaultInstance() {
  scale_filler_ = const_cast< ::caffepro::FillerParameter*>(&::caffepro::FillerParameter::default_instance());
  shift_filler_ = const_cast< ::caffepro::FillerParameter*>(&::caffepro::FillerParameter::default_instance());
}

BatchNormalizationParameter::BatchNormalizationParameter(const BatchNormalizationParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchNormalizationParameter::SharedCtor() {
  _cached_size_ = 0;
  scale_filler_ = NULL;
  shift_filler_ = NULL;
  record_option_ = 0;
  sliding_window_eval_coeff_ = -1;
  keep_mean_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchNormalizationParameter::~BatchNormalizationParameter() {
  SharedDtor();
}

void BatchNormalizationParameter::SharedDtor() {
  if (this != default_instance_) {
    delete scale_filler_;
    delete shift_filler_;
  }
}

void BatchNormalizationParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchNormalizationParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchNormalizationParameter_descriptor_;
}

const BatchNormalizationParameter& BatchNormalizationParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

BatchNormalizationParameter* BatchNormalizationParameter::default_instance_ = NULL;

BatchNormalizationParameter* BatchNormalizationParameter::New() const {
  return new BatchNormalizationParameter;
}

void BatchNormalizationParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_scale_filler()) {
      if (scale_filler_ != NULL) scale_filler_->::caffepro::FillerParameter::Clear();
    }
    if (has_shift_filler()) {
      if (shift_filler_ != NULL) shift_filler_->::caffepro::FillerParameter::Clear();
    }
    record_option_ = 0;
    sliding_window_eval_coeff_ = -1;
    keep_mean_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchNormalizationParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .caffepro.FillerParameter scale_filler = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale_filler()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shift_filler;
        break;
      }
      
      // required .caffepro.FillerParameter shift_filler = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shift_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shift_filler()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_record_option;
        break;
      }
      
      // optional .caffepro.BatchNormalizationParameter.RecordOption record_option = 3 [default = NOT_RECORD];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_record_option:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffepro::BatchNormalizationParameter_RecordOption_IsValid(value)) {
            set_record_option(static_cast< ::caffepro::BatchNormalizationParameter_RecordOption >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_sliding_window_eval_coeff;
        break;
      }
      
      // optional float sliding_window_eval_coeff = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sliding_window_eval_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sliding_window_eval_coeff_)));
          set_has_sliding_window_eval_coeff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_keep_mean;
        break;
      }
      
      // optional bool keep_mean = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keep_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_mean_)));
          set_has_keep_mean();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BatchNormalizationParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .caffepro.FillerParameter scale_filler = 1;
  if (has_scale_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->scale_filler(), output);
  }
  
  // required .caffepro.FillerParameter shift_filler = 2;
  if (has_shift_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shift_filler(), output);
  }
  
  // optional .caffepro.BatchNormalizationParameter.RecordOption record_option = 3 [default = NOT_RECORD];
  if (has_record_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->record_option(), output);
  }
  
  // optional float sliding_window_eval_coeff = 4 [default = -1];
  if (has_sliding_window_eval_coeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->sliding_window_eval_coeff(), output);
  }
  
  // optional bool keep_mean = 5 [default = false];
  if (has_keep_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->keep_mean(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchNormalizationParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .caffepro.FillerParameter scale_filler = 1;
  if (has_scale_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->scale_filler(), target);
  }
  
  // required .caffepro.FillerParameter shift_filler = 2;
  if (has_shift_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shift_filler(), target);
  }
  
  // optional .caffepro.BatchNormalizationParameter.RecordOption record_option = 3 [default = NOT_RECORD];
  if (has_record_option()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->record_option(), target);
  }
  
  // optional float sliding_window_eval_coeff = 4 [default = -1];
  if (has_sliding_window_eval_coeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->sliding_window_eval_coeff(), target);
  }
  
  // optional bool keep_mean = 5 [default = false];
  if (has_keep_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->keep_mean(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchNormalizationParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .caffepro.FillerParameter scale_filler = 1;
    if (has_scale_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale_filler());
    }
    
    // required .caffepro.FillerParameter shift_filler = 2;
    if (has_shift_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shift_filler());
    }
    
    // optional .caffepro.BatchNormalizationParameter.RecordOption record_option = 3 [default = NOT_RECORD];
    if (has_record_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->record_option());
    }
    
    // optional float sliding_window_eval_coeff = 4 [default = -1];
    if (has_sliding_window_eval_coeff()) {
      total_size += 1 + 4;
    }
    
    // optional bool keep_mean = 5 [default = false];
    if (has_keep_mean()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchNormalizationParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchNormalizationParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchNormalizationParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchNormalizationParameter::MergeFrom(const BatchNormalizationParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scale_filler()) {
      mutable_scale_filler()->::caffepro::FillerParameter::MergeFrom(from.scale_filler());
    }
    if (from.has_shift_filler()) {
      mutable_shift_filler()->::caffepro::FillerParameter::MergeFrom(from.shift_filler());
    }
    if (from.has_record_option()) {
      set_record_option(from.record_option());
    }
    if (from.has_sliding_window_eval_coeff()) {
      set_sliding_window_eval_coeff(from.sliding_window_eval_coeff());
    }
    if (from.has_keep_mean()) {
      set_keep_mean(from.keep_mean());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchNormalizationParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchNormalizationParameter::CopyFrom(const BatchNormalizationParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchNormalizationParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BatchNormalizationParameter::Swap(BatchNormalizationParameter* other) {
  if (other != this) {
    std::swap(scale_filler_, other->scale_filler_);
    std::swap(shift_filler_, other->shift_filler_);
    std::swap(record_option_, other->record_option_);
    std::swap(sliding_window_eval_coeff_, other->sliding_window_eval_coeff_);
    std::swap(keep_mean_, other->keep_mean_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchNormalizationParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchNormalizationParameter_descriptor_;
  metadata.reflection = BatchNormalizationParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GPUSplitParameter::kSplitMinibatchFieldNumber;
const int GPUSplitParameter::kSplitGpuIdFieldNumber;
#endif  // !_MSC_VER

GPUSplitParameter::GPUSplitParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GPUSplitParameter::InitAsDefaultInstance() {
}

GPUSplitParameter::GPUSplitParameter(const GPUSplitParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GPUSplitParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPUSplitParameter::~GPUSplitParameter() {
  SharedDtor();
}

void GPUSplitParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GPUSplitParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPUSplitParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPUSplitParameter_descriptor_;
}

const GPUSplitParameter& GPUSplitParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

GPUSplitParameter* GPUSplitParameter::default_instance_ = NULL;

GPUSplitParameter* GPUSplitParameter::New() const {
  return new GPUSplitParameter;
}

void GPUSplitParameter::Clear() {
  split_minibatch_.Clear();
  split_gpu_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPUSplitParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 split_minibatch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_split_minibatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_split_minibatch())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_split_minibatch())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_split_minibatch;
        if (input->ExpectTag(16)) goto parse_split_gpu_id;
        break;
      }
      
      // repeated int32 split_gpu_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_split_gpu_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_split_gpu_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_split_gpu_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_split_gpu_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GPUSplitParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 split_minibatch = 1;
  for (int i = 0; i < this->split_minibatch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->split_minibatch(i), output);
  }
  
  // repeated int32 split_gpu_id = 2;
  for (int i = 0; i < this->split_gpu_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->split_gpu_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GPUSplitParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 split_minibatch = 1;
  for (int i = 0; i < this->split_minibatch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->split_minibatch(i), target);
  }
  
  // repeated int32 split_gpu_id = 2;
  for (int i = 0; i < this->split_gpu_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->split_gpu_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GPUSplitParameter::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 split_minibatch = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->split_minibatch_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->split_minibatch(i));
    }
    total_size += 1 * this->split_minibatch_size() + data_size;
  }
  
  // repeated int32 split_gpu_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->split_gpu_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->split_gpu_id(i));
    }
    total_size += 1 * this->split_gpu_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPUSplitParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPUSplitParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPUSplitParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPUSplitParameter::MergeFrom(const GPUSplitParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  split_minibatch_.MergeFrom(from.split_minibatch_);
  split_gpu_id_.MergeFrom(from.split_gpu_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPUSplitParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPUSplitParameter::CopyFrom(const GPUSplitParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUSplitParameter::IsInitialized() const {
  
  return true;
}

void GPUSplitParameter::Swap(GPUSplitParameter* other) {
  if (other != this) {
    split_minibatch_.Swap(&other->split_minibatch_);
    split_gpu_id_.Swap(&other->split_gpu_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPUSplitParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPUSplitParameter_descriptor_;
  metadata.reflection = GPUSplitParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConcatParameter::kConcatDimFieldNumber;
#endif  // !_MSC_VER

ConcatParameter::ConcatParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConcatParameter::InitAsDefaultInstance() {
}

ConcatParameter::ConcatParameter(const ConcatParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConcatParameter::SharedCtor() {
  _cached_size_ = 0;
  concat_dim_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConcatParameter::~ConcatParameter() {
  SharedDtor();
}

void ConcatParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConcatParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConcatParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConcatParameter_descriptor_;
}

const ConcatParameter& ConcatParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

ConcatParameter* ConcatParameter::default_instance_ = NULL;

ConcatParameter* ConcatParameter::New() const {
  return new ConcatParameter;
}

void ConcatParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    concat_dim_ = 1u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConcatParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 concat_dim = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &concat_dim_)));
          set_has_concat_dim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConcatParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 concat_dim = 1 [default = 1];
  if (has_concat_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->concat_dim(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConcatParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 concat_dim = 1 [default = 1];
  if (has_concat_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->concat_dim(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConcatParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 concat_dim = 1 [default = 1];
    if (has_concat_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->concat_dim());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConcatParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConcatParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConcatParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConcatParameter::MergeFrom(const ConcatParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_concat_dim()) {
      set_concat_dim(from.concat_dim());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConcatParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcatParameter::CopyFrom(const ConcatParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcatParameter::IsInitialized() const {
  
  return true;
}

void ConcatParameter::Swap(ConcatParameter* other) {
  if (other != this) {
    std::swap(concat_dim_, other->concat_dim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConcatParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConcatParameter_descriptor_;
  metadata.reflection = ConcatParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GridGeneratorParameter_GridSizeOption_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridGeneratorParameter_GridSizeOption_descriptor_;
}
bool GridGeneratorParameter_GridSizeOption_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GridGeneratorParameter_GridSizeOption GridGeneratorParameter::RELATIVE;
const GridGeneratorParameter_GridSizeOption GridGeneratorParameter::ABSOLUTE;
const GridGeneratorParameter_GridSizeOption GridGeneratorParameter::GridSizeOption_MIN;
const GridGeneratorParameter_GridSizeOption GridGeneratorParameter::GridSizeOption_MAX;
const int GridGeneratorParameter::GridSizeOption_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GridGeneratorParameter::kMethodFieldNumber;
const int GridGeneratorParameter::kGridSizeFieldNumber;
const int GridGeneratorParameter::kScaleWidthFieldNumber;
const int GridGeneratorParameter::kScaleHeightFieldNumber;
#endif  // !_MSC_VER

GridGeneratorParameter::GridGeneratorParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GridGeneratorParameter::InitAsDefaultInstance() {
}

GridGeneratorParameter::GridGeneratorParameter(const GridGeneratorParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GridGeneratorParameter::SharedCtor() {
  _cached_size_ = 0;
  method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  grid_size_ = 0;
  scale_width_ = 1;
  scale_height_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GridGeneratorParameter::~GridGeneratorParameter() {
  SharedDtor();
}

void GridGeneratorParameter::SharedDtor() {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    delete method_;
  }
  if (this != default_instance_) {
  }
}

void GridGeneratorParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridGeneratorParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridGeneratorParameter_descriptor_;
}

const GridGeneratorParameter& GridGeneratorParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

GridGeneratorParameter* GridGeneratorParameter::default_instance_ = NULL;

GridGeneratorParameter* GridGeneratorParameter::New() const {
  return new GridGeneratorParameter;
}

void GridGeneratorParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_method()) {
      if (method_ != &::google::protobuf::internal::kEmptyString) {
        method_->clear();
      }
    }
    grid_size_ = 0;
    scale_width_ = 1;
    scale_height_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GridGeneratorParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string method = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grid_size;
        break;
      }
      
      // optional .caffepro.GridGeneratorParameter.GridSizeOption grid_size = 2 [default = RELATIVE];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid_size:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffepro::GridGeneratorParameter_GridSizeOption_IsValid(value)) {
            set_grid_size(static_cast< ::caffepro::GridGeneratorParameter_GridSizeOption >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_scale_width;
        break;
      }
      
      // optional float scale_width = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_width_)));
          set_has_scale_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_scale_height;
        break;
      }
      
      // optional float scale_height = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_height_)));
          set_has_scale_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GridGeneratorParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string method = 1;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->method(), output);
  }
  
  // optional .caffepro.GridGeneratorParameter.GridSizeOption grid_size = 2 [default = RELATIVE];
  if (has_grid_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->grid_size(), output);
  }
  
  // optional float scale_width = 3 [default = 1];
  if (has_scale_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->scale_width(), output);
  }
  
  // optional float scale_height = 4 [default = 1];
  if (has_scale_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->scale_height(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GridGeneratorParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string method = 1;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->method(), target);
  }
  
  // optional .caffepro.GridGeneratorParameter.GridSizeOption grid_size = 2 [default = RELATIVE];
  if (has_grid_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->grid_size(), target);
  }
  
  // optional float scale_width = 3 [default = 1];
  if (has_scale_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->scale_width(), target);
  }
  
  // optional float scale_height = 4 [default = 1];
  if (has_scale_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->scale_height(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GridGeneratorParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string method = 1;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method());
    }
    
    // optional .caffepro.GridGeneratorParameter.GridSizeOption grid_size = 2 [default = RELATIVE];
    if (has_grid_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->grid_size());
    }
    
    // optional float scale_width = 3 [default = 1];
    if (has_scale_width()) {
      total_size += 1 + 4;
    }
    
    // optional float scale_height = 4 [default = 1];
    if (has_scale_height()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridGeneratorParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GridGeneratorParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GridGeneratorParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GridGeneratorParameter::MergeFrom(const GridGeneratorParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_grid_size()) {
      set_grid_size(from.grid_size());
    }
    if (from.has_scale_width()) {
      set_scale_width(from.scale_width());
    }
    if (from.has_scale_height()) {
      set_scale_height(from.scale_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GridGeneratorParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridGeneratorParameter::CopyFrom(const GridGeneratorParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridGeneratorParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GridGeneratorParameter::Swap(GridGeneratorParameter* other) {
  if (other != this) {
    std::swap(method_, other->method_);
    std::swap(grid_size_, other->grid_size_);
    std::swap(scale_width_, other->scale_width_);
    std::swap(scale_height_, other->scale_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GridGeneratorParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridGeneratorParameter_descriptor_;
  metadata.reflection = GridGeneratorParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SampleParameter_ConcatOutputOption_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SampleParameter_ConcatOutputOption_descriptor_;
}
bool SampleParameter_ConcatOutputOption_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SampleParameter_ConcatOutputOption SampleParameter::CHANNEL;
const SampleParameter_ConcatOutputOption SampleParameter::NUM;
const SampleParameter_ConcatOutputOption SampleParameter::ConcatOutputOption_MIN;
const SampleParameter_ConcatOutputOption SampleParameter::ConcatOutputOption_MAX;
const int SampleParameter::ConcatOutputOption_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SampleParameter::kConcatOutputFieldNumber;
#endif  // !_MSC_VER

SampleParameter::SampleParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SampleParameter::InitAsDefaultInstance() {
}

SampleParameter::SampleParameter(const SampleParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SampleParameter::SharedCtor() {
  _cached_size_ = 0;
  concat_output_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SampleParameter::~SampleParameter() {
  SharedDtor();
}

void SampleParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SampleParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SampleParameter_descriptor_;
}

const SampleParameter& SampleParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

SampleParameter* SampleParameter::default_instance_ = NULL;

SampleParameter* SampleParameter::New() const {
  return new SampleParameter;
}

void SampleParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    concat_output_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SampleParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffepro.SampleParameter.ConcatOutputOption concat_output = 1 [default = CHANNEL];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffepro::SampleParameter_ConcatOutputOption_IsValid(value)) {
            set_concat_output(static_cast< ::caffepro::SampleParameter_ConcatOutputOption >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SampleParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .caffepro.SampleParameter.ConcatOutputOption concat_output = 1 [default = CHANNEL];
  if (has_concat_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->concat_output(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SampleParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .caffepro.SampleParameter.ConcatOutputOption concat_output = 1 [default = CHANNEL];
  if (has_concat_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->concat_output(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SampleParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffepro.SampleParameter.ConcatOutputOption concat_output = 1 [default = CHANNEL];
    if (has_concat_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->concat_output());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SampleParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SampleParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SampleParameter::MergeFrom(const SampleParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_concat_output()) {
      set_concat_output(from.concat_output());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SampleParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleParameter::CopyFrom(const SampleParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleParameter::IsInitialized() const {
  
  return true;
}

void SampleParameter::Swap(SampleParameter* other) {
  if (other != this) {
    std::swap(concat_output_, other->concat_output_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SampleParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SampleParameter_descriptor_;
  metadata.reflection = SampleParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnchorParameter::kSpatialWidthFieldNumber;
const int AnchorParameter::kSpatialHeightFieldNumber;
const int AnchorParameter::kCentralScaleFieldNumber;
const int AnchorParameter::kSpatialStartFieldNumber;
const int AnchorParameter::kSpatialStepFieldNumber;
const int AnchorParameter::kAspectRatioFieldNumber;
#endif  // !_MSC_VER

AnchorParameter::AnchorParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnchorParameter::InitAsDefaultInstance() {
}

AnchorParameter::AnchorParameter(const AnchorParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnchorParameter::SharedCtor() {
  _cached_size_ = 0;
  spatial_width_ = 0;
  spatial_height_ = 0;
  spatial_start_ = 0;
  spatial_step_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnchorParameter::~AnchorParameter() {
  SharedDtor();
}

void AnchorParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnchorParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnchorParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnchorParameter_descriptor_;
}

const AnchorParameter& AnchorParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

AnchorParameter* AnchorParameter::default_instance_ = NULL;

AnchorParameter* AnchorParameter::New() const {
  return new AnchorParameter;
}

void AnchorParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    spatial_width_ = 0;
    spatial_height_ = 0;
    spatial_start_ = 0;
    spatial_step_ = 0;
  }
  central_scale_.Clear();
  aspect_ratio_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnchorParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 spatial_width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spatial_width_)));
          set_has_spatial_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_spatial_height;
        break;
      }
      
      // required int32 spatial_height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spatial_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spatial_height_)));
          set_has_spatial_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_central_scale;
        break;
      }
      
      // repeated float central_scale = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_central_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_central_scale())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_central_scale())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_central_scale;
        if (input->ExpectTag(37)) goto parse_spatial_start;
        break;
      }
      
      // optional float spatial_start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_spatial_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spatial_start_)));
          set_has_spatial_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_spatial_step;
        break;
      }
      
      // optional float spatial_step = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_spatial_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spatial_step_)));
          set_has_spatial_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_aspect_ratio;
        break;
      }
      
      // repeated float aspect_ratio = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_aspect_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_aspect_ratio())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_aspect_ratio())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_aspect_ratio;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnchorParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 spatial_width = 1;
  if (has_spatial_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->spatial_width(), output);
  }
  
  // required int32 spatial_height = 2;
  if (has_spatial_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->spatial_height(), output);
  }
  
  // repeated float central_scale = 3;
  for (int i = 0; i < this->central_scale_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->central_scale(i), output);
  }
  
  // optional float spatial_start = 4;
  if (has_spatial_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->spatial_start(), output);
  }
  
  // optional float spatial_step = 5;
  if (has_spatial_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->spatial_step(), output);
  }
  
  // repeated float aspect_ratio = 6;
  for (int i = 0; i < this->aspect_ratio_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->aspect_ratio(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnchorParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 spatial_width = 1;
  if (has_spatial_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->spatial_width(), target);
  }
  
  // required int32 spatial_height = 2;
  if (has_spatial_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->spatial_height(), target);
  }
  
  // repeated float central_scale = 3;
  for (int i = 0; i < this->central_scale_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->central_scale(i), target);
  }
  
  // optional float spatial_start = 4;
  if (has_spatial_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->spatial_start(), target);
  }
  
  // optional float spatial_step = 5;
  if (has_spatial_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->spatial_step(), target);
  }
  
  // repeated float aspect_ratio = 6;
  for (int i = 0; i < this->aspect_ratio_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->aspect_ratio(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnchorParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 spatial_width = 1;
    if (has_spatial_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spatial_width());
    }
    
    // required int32 spatial_height = 2;
    if (has_spatial_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spatial_height());
    }
    
    // optional float spatial_start = 4;
    if (has_spatial_start()) {
      total_size += 1 + 4;
    }
    
    // optional float spatial_step = 5;
    if (has_spatial_step()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated float central_scale = 3;
  {
    int data_size = 0;
    data_size = 4 * this->central_scale_size();
    total_size += 1 * this->central_scale_size() + data_size;
  }
  
  // repeated float aspect_ratio = 6;
  {
    int data_size = 0;
    data_size = 4 * this->aspect_ratio_size();
    total_size += 1 * this->aspect_ratio_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnchorParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnchorParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnchorParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnchorParameter::MergeFrom(const AnchorParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  central_scale_.MergeFrom(from.central_scale_);
  aspect_ratio_.MergeFrom(from.aspect_ratio_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spatial_width()) {
      set_spatial_width(from.spatial_width());
    }
    if (from.has_spatial_height()) {
      set_spatial_height(from.spatial_height());
    }
    if (from.has_spatial_start()) {
      set_spatial_start(from.spatial_start());
    }
    if (from.has_spatial_step()) {
      set_spatial_step(from.spatial_step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnchorParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnchorParameter::CopyFrom(const AnchorParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnchorParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void AnchorParameter::Swap(AnchorParameter* other) {
  if (other != this) {
    std::swap(spatial_width_, other->spatial_width_);
    std::swap(spatial_height_, other->spatial_height_);
    central_scale_.Swap(&other->central_scale_);
    std::swap(spatial_start_, other->spatial_start_);
    std::swap(spatial_step_, other->spatial_step_);
    aspect_ratio_.Swap(&other->aspect_ratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnchorParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnchorParameter_descriptor_;
  metadata.reflection = AnchorParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConvolutionParameter::kNumOutputFieldNumber;
const int ConvolutionParameter::kBiasTermFieldNumber;
const int ConvolutionParameter::kPadFieldNumber;
const int ConvolutionParameter::kKernelSizeFieldNumber;
const int ConvolutionParameter::kGroupFieldNumber;
const int ConvolutionParameter::kStrideFieldNumber;
const int ConvolutionParameter::kWeightFillerFieldNumber;
const int ConvolutionParameter::kBiasFillerFieldNumber;
const int ConvolutionParameter::kSizeFloorFieldNumber;
const int ConvolutionParameter::kBlockCalcFieldNumber;
const int ConvolutionParameter::kUseCudnnFieldNumber;
const int ConvolutionParameter::kOutWidthFieldNumber;
const int ConvolutionParameter::kOutHeightFieldNumber;
const int ConvolutionParameter::kPadXFieldNumber;
const int ConvolutionParameter::kPadYFieldNumber;
const int ConvolutionParameter::kKernelSizeXFieldNumber;
const int ConvolutionParameter::kKernelSizeYFieldNumber;
const int ConvolutionParameter::kStrideXFieldNumber;
const int ConvolutionParameter::kStrideYFieldNumber;
#endif  // !_MSC_VER

ConvolutionParameter::ConvolutionParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConvolutionParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffepro::FillerParameter*>(&::caffepro::FillerParameter::default_instance());
  bias_filler_ = const_cast< ::caffepro::FillerParameter*>(&::caffepro::FillerParameter::default_instance());
}

ConvolutionParameter::ConvolutionParameter(const ConvolutionParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConvolutionParameter::SharedCtor() {
  _cached_size_ = 0;
  num_output_ = 0u;
  bias_term_ = true;
  pad_ = 0;
  kernel_size_ = 0u;
  group_ = 1u;
  stride_ = 1u;
  weight_filler_ = NULL;
  bias_filler_ = NULL;
  size_floor_ = true;
  use_cudnn_ = false;
  out_width_ = 0;
  out_height_ = 0;
  pad_x_ = 0;
  pad_y_ = 0;
  kernel_size_x_ = 0;
  kernel_size_y_ = 0;
  stride_x_ = 1;
  stride_y_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConvolutionParameter::~ConvolutionParameter() {
  SharedDtor();
}

void ConvolutionParameter::SharedDtor() {
  if (this != default_instance_) {
    delete weight_filler_;
    delete bias_filler_;
  }
}

void ConvolutionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvolutionParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvolutionParameter_descriptor_;
}

const ConvolutionParameter& ConvolutionParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

ConvolutionParameter* ConvolutionParameter::default_instance_ = NULL;

ConvolutionParameter* ConvolutionParameter::New() const {
  return new ConvolutionParameter;
}

void ConvolutionParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_output_ = 0u;
    bias_term_ = true;
    pad_ = 0;
    kernel_size_ = 0u;
    group_ = 1u;
    stride_ = 1u;
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffepro::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffepro::FillerParameter::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    size_floor_ = true;
    use_cudnn_ = false;
    out_width_ = 0;
    out_height_ = 0;
    pad_x_ = 0;
    pad_y_ = 0;
    kernel_size_x_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    kernel_size_y_ = 0;
    stride_x_ = 1;
    stride_y_ = 1;
  }
  block_calc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConvolutionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bias_term;
        break;
      }
      
      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bias_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
          set_has_bias_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pad;
        break;
      }
      
      // optional int32 pad = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_)));
          set_has_pad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kernel_size;
        break;
      }
      
      // optional uint32 kernel_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kernel_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_size_)));
          set_has_kernel_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_group;
        break;
      }
      
      // optional uint32 group = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_stride;
        break;
      }
      
      // optional uint32 stride = 6 [default = 1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
          set_has_stride();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_weight_filler;
        break;
      }
      
      // optional .caffepro.FillerParameter weight_filler = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_bias_filler;
        break;
      }
      
      // optional .caffepro.FillerParameter bias_filler = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_size_floor;
        break;
      }
      
      // optional bool size_floor = 9 [default = true];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &size_floor_)));
          set_has_size_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_block_calc;
        break;
      }
      
      // repeated uint32 block_calc = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_calc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_block_calc())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_block_calc())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_block_calc;
        if (input->ExpectTag(88)) goto parse_use_cudnn;
        break;
      }
      
      // optional bool use_cudnn = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_cudnn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_cudnn_)));
          set_has_use_cudnn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_out_width;
        break;
      }
      
      // optional int32 out_width = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_width_)));
          set_has_out_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_out_height;
        break;
      }
      
      // optional int32 out_height = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_height_)));
          set_has_out_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_pad_x;
        break;
      }
      
      // optional int32 pad_x = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pad_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_x_)));
          set_has_pad_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_pad_y;
        break;
      }
      
      // optional int32 pad_y = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pad_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_y_)));
          set_has_pad_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_kernel_size_x;
        break;
      }
      
      // optional int32 kernel_size_x = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kernel_size_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernel_size_x_)));
          set_has_kernel_size_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_kernel_size_y;
        break;
      }
      
      // optional int32 kernel_size_y = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kernel_size_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernel_size_y_)));
          set_has_kernel_size_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_stride_x;
        break;
      }
      
      // optional int32 stride_x = 18 [default = 1];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stride_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_x_)));
          set_has_stride_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_stride_y;
        break;
      }
      
      // optional int32 stride_y = 19 [default = 1];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stride_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_y_)));
          set_has_stride_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConvolutionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }
  
  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }
  
  // optional int32 pad = 3 [default = 0];
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pad(), output);
  }
  
  // optional uint32 kernel_size = 4;
  if (has_kernel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kernel_size(), output);
  }
  
  // optional uint32 group = 5 [default = 1];
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->group(), output);
  }
  
  // optional uint32 stride = 6 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->stride(), output);
  }
  
  // optional .caffepro.FillerParameter weight_filler = 7;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->weight_filler(), output);
  }
  
  // optional .caffepro.FillerParameter bias_filler = 8;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->bias_filler(), output);
  }
  
  // optional bool size_floor = 9 [default = true];
  if (has_size_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->size_floor(), output);
  }
  
  // repeated uint32 block_calc = 10;
  for (int i = 0; i < this->block_calc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->block_calc(i), output);
  }
  
  // optional bool use_cudnn = 11 [default = false];
  if (has_use_cudnn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->use_cudnn(), output);
  }
  
  // optional int32 out_width = 12 [default = 0];
  if (has_out_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->out_width(), output);
  }
  
  // optional int32 out_height = 13 [default = 0];
  if (has_out_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->out_height(), output);
  }
  
  // optional int32 pad_x = 14 [default = 0];
  if (has_pad_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->pad_x(), output);
  }
  
  // optional int32 pad_y = 15 [default = 0];
  if (has_pad_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->pad_y(), output);
  }
  
  // optional int32 kernel_size_x = 16 [default = 0];
  if (has_kernel_size_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->kernel_size_x(), output);
  }
  
  // optional int32 kernel_size_y = 17 [default = 0];
  if (has_kernel_size_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->kernel_size_y(), output);
  }
  
  // optional int32 stride_x = 18 [default = 1];
  if (has_stride_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->stride_x(), output);
  }
  
  // optional int32 stride_y = 19 [default = 1];
  if (has_stride_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->stride_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConvolutionParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }
  
  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }
  
  // optional int32 pad = 3 [default = 0];
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pad(), target);
  }
  
  // optional uint32 kernel_size = 4;
  if (has_kernel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kernel_size(), target);
  }
  
  // optional uint32 group = 5 [default = 1];
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->group(), target);
  }
  
  // optional uint32 stride = 6 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->stride(), target);
  }
  
  // optional .caffepro.FillerParameter weight_filler = 7;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->weight_filler(), target);
  }
  
  // optional .caffepro.FillerParameter bias_filler = 8;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->bias_filler(), target);
  }
  
  // optional bool size_floor = 9 [default = true];
  if (has_size_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->size_floor(), target);
  }
  
  // repeated uint32 block_calc = 10;
  for (int i = 0; i < this->block_calc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->block_calc(i), target);
  }
  
  // optional bool use_cudnn = 11 [default = false];
  if (has_use_cudnn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->use_cudnn(), target);
  }
  
  // optional int32 out_width = 12 [default = 0];
  if (has_out_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->out_width(), target);
  }
  
  // optional int32 out_height = 13 [default = 0];
  if (has_out_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->out_height(), target);
  }
  
  // optional int32 pad_x = 14 [default = 0];
  if (has_pad_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->pad_x(), target);
  }
  
  // optional int32 pad_y = 15 [default = 0];
  if (has_pad_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->pad_y(), target);
  }
  
  // optional int32 kernel_size_x = 16 [default = 0];
  if (has_kernel_size_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->kernel_size_x(), target);
  }
  
  // optional int32 kernel_size_y = 17 [default = 0];
  if (has_kernel_size_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->kernel_size_y(), target);
  }
  
  // optional int32 stride_x = 18 [default = 1];
  if (has_stride_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->stride_x(), target);
  }
  
  // optional int32 stride_y = 19 [default = 1];
  if (has_stride_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->stride_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConvolutionParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }
    
    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }
    
    // optional int32 pad = 3 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pad());
    }
    
    // optional uint32 kernel_size = 4;
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_size());
    }
    
    // optional uint32 group = 5 [default = 1];
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }
    
    // optional uint32 stride = 6 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride());
    }
    
    // optional .caffepro.FillerParameter weight_filler = 7;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weight_filler());
    }
    
    // optional .caffepro.FillerParameter bias_filler = 8;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bias_filler());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool size_floor = 9 [default = true];
    if (has_size_floor()) {
      total_size += 1 + 1;
    }
    
    // optional bool use_cudnn = 11 [default = false];
    if (has_use_cudnn()) {
      total_size += 1 + 1;
    }
    
    // optional int32 out_width = 12 [default = 0];
    if (has_out_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_width());
    }
    
    // optional int32 out_height = 13 [default = 0];
    if (has_out_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_height());
    }
    
    // optional int32 pad_x = 14 [default = 0];
    if (has_pad_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pad_x());
    }
    
    // optional int32 pad_y = 15 [default = 0];
    if (has_pad_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pad_y());
    }
    
    // optional int32 kernel_size_x = 16 [default = 0];
    if (has_kernel_size_x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kernel_size_x());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 kernel_size_y = 17 [default = 0];
    if (has_kernel_size_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kernel_size_y());
    }
    
    // optional int32 stride_x = 18 [default = 1];
    if (has_stride_x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stride_x());
    }
    
    // optional int32 stride_y = 19 [default = 1];
    if (has_stride_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stride_y());
    }
    
  }
  // repeated uint32 block_calc = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->block_calc_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->block_calc(i));
    }
    total_size += 1 * this->block_calc_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvolutionParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConvolutionParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConvolutionParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConvolutionParameter::MergeFrom(const ConvolutionParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  block_calc_.MergeFrom(from.block_calc_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_bias_term()) {
      set_bias_term(from.bias_term());
    }
    if (from.has_pad()) {
      set_pad(from.pad());
    }
    if (from.has_kernel_size()) {
      set_kernel_size(from.kernel_size());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffepro::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffepro::FillerParameter::MergeFrom(from.bias_filler());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_size_floor()) {
      set_size_floor(from.size_floor());
    }
    if (from.has_use_cudnn()) {
      set_use_cudnn(from.use_cudnn());
    }
    if (from.has_out_width()) {
      set_out_width(from.out_width());
    }
    if (from.has_out_height()) {
      set_out_height(from.out_height());
    }
    if (from.has_pad_x()) {
      set_pad_x(from.pad_x());
    }
    if (from.has_pad_y()) {
      set_pad_y(from.pad_y());
    }
    if (from.has_kernel_size_x()) {
      set_kernel_size_x(from.kernel_size_x());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_kernel_size_y()) {
      set_kernel_size_y(from.kernel_size_y());
    }
    if (from.has_stride_x()) {
      set_stride_x(from.stride_x());
    }
    if (from.has_stride_y()) {
      set_stride_y(from.stride_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConvolutionParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvolutionParameter::CopyFrom(const ConvolutionParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionParameter::IsInitialized() const {
  
  return true;
}

void ConvolutionParameter::Swap(ConvolutionParameter* other) {
  if (other != this) {
    std::swap(num_output_, other->num_output_);
    std::swap(bias_term_, other->bias_term_);
    std::swap(pad_, other->pad_);
    std::swap(kernel_size_, other->kernel_size_);
    std::swap(group_, other->group_);
    std::swap(stride_, other->stride_);
    std::swap(weight_filler_, other->weight_filler_);
    std::swap(bias_filler_, other->bias_filler_);
    std::swap(size_floor_, other->size_floor_);
    block_calc_.Swap(&other->block_calc_);
    std::swap(use_cudnn_, other->use_cudnn_);
    std::swap(out_width_, other->out_width_);
    std::swap(out_height_, other->out_height_);
    std::swap(pad_x_, other->pad_x_);
    std::swap(pad_y_, other->pad_y_);
    std::swap(kernel_size_x_, other->kernel_size_x_);
    std::swap(kernel_size_y_, other->kernel_size_y_);
    std::swap(stride_x_, other->stride_x_);
    std::swap(stride_y_, other->stride_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConvolutionParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConvolutionParameter_descriptor_;
  metadata.reflection = ConvolutionParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CorrelationParameter::kBiasTermFieldNumber;
const int CorrelationParameter::kPadFieldNumber;
const int CorrelationParameter::kGroupFieldNumber;
const int CorrelationParameter::kStrideFieldNumber;
const int CorrelationParameter::kBiasFillerFieldNumber;
const int CorrelationParameter::kSizeFloorFieldNumber;
const int CorrelationParameter::kBlockCalcFieldNumber;
const int CorrelationParameter::kOutWidthFieldNumber;
const int CorrelationParameter::kOutHeightFieldNumber;
const int CorrelationParameter::kPadXFieldNumber;
const int CorrelationParameter::kPadYFieldNumber;
const int CorrelationParameter::kStrideXFieldNumber;
const int CorrelationParameter::kStrideYFieldNumber;
#endif  // !_MSC_VER

CorrelationParameter::CorrelationParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CorrelationParameter::InitAsDefaultInstance() {
  bias_filler_ = const_cast< ::caffepro::FillerParameter*>(&::caffepro::FillerParameter::default_instance());
}

CorrelationParameter::CorrelationParameter(const CorrelationParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CorrelationParameter::SharedCtor() {
  _cached_size_ = 0;
  bias_term_ = true;
  pad_ = 0;
  group_ = 1u;
  stride_ = 1u;
  bias_filler_ = NULL;
  size_floor_ = true;
  out_width_ = 0;
  out_height_ = 0;
  pad_x_ = 0;
  pad_y_ = 0;
  stride_x_ = 1;
  stride_y_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CorrelationParameter::~CorrelationParameter() {
  SharedDtor();
}

void CorrelationParameter::SharedDtor() {
  if (this != default_instance_) {
    delete bias_filler_;
  }
}

void CorrelationParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CorrelationParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CorrelationParameter_descriptor_;
}

const CorrelationParameter& CorrelationParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

CorrelationParameter* CorrelationParameter::default_instance_ = NULL;

CorrelationParameter* CorrelationParameter::New() const {
  return new CorrelationParameter;
}

void CorrelationParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bias_term_ = true;
    pad_ = 0;
    group_ = 1u;
    stride_ = 1u;
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffepro::FillerParameter::Clear();
    }
    size_floor_ = true;
    out_width_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    out_height_ = 0;
    pad_x_ = 0;
    pad_y_ = 0;
    stride_x_ = 1;
    stride_y_ = 1;
  }
  block_calc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CorrelationParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
          set_has_bias_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pad;
        break;
      }
      
      // optional int32 pad = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_)));
          set_has_pad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_group;
        break;
      }
      
      // optional uint32 group = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_stride;
        break;
      }
      
      // optional uint32 stride = 6 [default = 1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
          set_has_stride();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_bias_filler;
        break;
      }
      
      // optional .caffepro.FillerParameter bias_filler = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_size_floor;
        break;
      }
      
      // optional bool size_floor = 9 [default = true];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &size_floor_)));
          set_has_size_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_block_calc;
        break;
      }
      
      // repeated uint32 block_calc = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_calc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_block_calc())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_block_calc())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_block_calc;
        if (input->ExpectTag(96)) goto parse_out_width;
        break;
      }
      
      // optional int32 out_width = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_width_)));
          set_has_out_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_out_height;
        break;
      }
      
      // optional int32 out_height = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_height_)));
          set_has_out_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_pad_x;
        break;
      }
      
      // optional int32 pad_x = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pad_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_x_)));
          set_has_pad_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_pad_y;
        break;
      }
      
      // optional int32 pad_y = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pad_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_y_)));
          set_has_pad_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_stride_x;
        break;
      }
      
      // optional int32 stride_x = 18 [default = 1];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stride_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_x_)));
          set_has_stride_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_stride_y;
        break;
      }
      
      // optional int32 stride_y = 19 [default = 1];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stride_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_y_)));
          set_has_stride_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CorrelationParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }
  
  // optional int32 pad = 3 [default = 0];
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pad(), output);
  }
  
  // optional uint32 group = 5 [default = 1];
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->group(), output);
  }
  
  // optional uint32 stride = 6 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->stride(), output);
  }
  
  // optional .caffepro.FillerParameter bias_filler = 8;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->bias_filler(), output);
  }
  
  // optional bool size_floor = 9 [default = true];
  if (has_size_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->size_floor(), output);
  }
  
  // repeated uint32 block_calc = 10;
  for (int i = 0; i < this->block_calc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->block_calc(i), output);
  }
  
  // optional int32 out_width = 12 [default = 0];
  if (has_out_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->out_width(), output);
  }
  
  // optional int32 out_height = 13 [default = 0];
  if (has_out_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->out_height(), output);
  }
  
  // optional int32 pad_x = 14 [default = 0];
  if (has_pad_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->pad_x(), output);
  }
  
  // optional int32 pad_y = 15 [default = 0];
  if (has_pad_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->pad_y(), output);
  }
  
  // optional int32 stride_x = 18 [default = 1];
  if (has_stride_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->stride_x(), output);
  }
  
  // optional int32 stride_y = 19 [default = 1];
  if (has_stride_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->stride_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CorrelationParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }
  
  // optional int32 pad = 3 [default = 0];
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pad(), target);
  }
  
  // optional uint32 group = 5 [default = 1];
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->group(), target);
  }
  
  // optional uint32 stride = 6 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->stride(), target);
  }
  
  // optional .caffepro.FillerParameter bias_filler = 8;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->bias_filler(), target);
  }
  
  // optional bool size_floor = 9 [default = true];
  if (has_size_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->size_floor(), target);
  }
  
  // repeated uint32 block_calc = 10;
  for (int i = 0; i < this->block_calc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->block_calc(i), target);
  }
  
  // optional int32 out_width = 12 [default = 0];
  if (has_out_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->out_width(), target);
  }
  
  // optional int32 out_height = 13 [default = 0];
  if (has_out_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->out_height(), target);
  }
  
  // optional int32 pad_x = 14 [default = 0];
  if (has_pad_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->pad_x(), target);
  }
  
  // optional int32 pad_y = 15 [default = 0];
  if (has_pad_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->pad_y(), target);
  }
  
  // optional int32 stride_x = 18 [default = 1];
  if (has_stride_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->stride_x(), target);
  }
  
  // optional int32 stride_y = 19 [default = 1];
  if (has_stride_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->stride_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CorrelationParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }
    
    // optional int32 pad = 3 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pad());
    }
    
    // optional uint32 group = 5 [default = 1];
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }
    
    // optional uint32 stride = 6 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride());
    }
    
    // optional .caffepro.FillerParameter bias_filler = 8;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bias_filler());
    }
    
    // optional bool size_floor = 9 [default = true];
    if (has_size_floor()) {
      total_size += 1 + 1;
    }
    
    // optional int32 out_width = 12 [default = 0];
    if (has_out_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_width());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 out_height = 13 [default = 0];
    if (has_out_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_height());
    }
    
    // optional int32 pad_x = 14 [default = 0];
    if (has_pad_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pad_x());
    }
    
    // optional int32 pad_y = 15 [default = 0];
    if (has_pad_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pad_y());
    }
    
    // optional int32 stride_x = 18 [default = 1];
    if (has_stride_x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stride_x());
    }
    
    // optional int32 stride_y = 19 [default = 1];
    if (has_stride_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stride_y());
    }
    
  }
  // repeated uint32 block_calc = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->block_calc_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->block_calc(i));
    }
    total_size += 1 * this->block_calc_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CorrelationParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CorrelationParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CorrelationParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CorrelationParameter::MergeFrom(const CorrelationParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  block_calc_.MergeFrom(from.block_calc_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bias_term()) {
      set_bias_term(from.bias_term());
    }
    if (from.has_pad()) {
      set_pad(from.pad());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffepro::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (from.has_size_floor()) {
      set_size_floor(from.size_floor());
    }
    if (from.has_out_width()) {
      set_out_width(from.out_width());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_out_height()) {
      set_out_height(from.out_height());
    }
    if (from.has_pad_x()) {
      set_pad_x(from.pad_x());
    }
    if (from.has_pad_y()) {
      set_pad_y(from.pad_y());
    }
    if (from.has_stride_x()) {
      set_stride_x(from.stride_x());
    }
    if (from.has_stride_y()) {
      set_stride_y(from.stride_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CorrelationParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CorrelationParameter::CopyFrom(const CorrelationParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CorrelationParameter::IsInitialized() const {
  
  return true;
}

void CorrelationParameter::Swap(CorrelationParameter* other) {
  if (other != this) {
    std::swap(bias_term_, other->bias_term_);
    std::swap(pad_, other->pad_);
    std::swap(group_, other->group_);
    std::swap(stride_, other->stride_);
    std::swap(bias_filler_, other->bias_filler_);
    std::swap(size_floor_, other->size_floor_);
    block_calc_.Swap(&other->block_calc_);
    std::swap(out_width_, other->out_width_);
    std::swap(out_height_, other->out_height_);
    std::swap(pad_x_, other->pad_x_);
    std::swap(pad_y_, other->pad_y_);
    std::swap(stride_x_, other->stride_x_);
    std::swap(stride_y_, other->stride_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CorrelationParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CorrelationParameter_descriptor_;
  metadata.reflection = CorrelationParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeightParameter::kWeightDimFieldNumber;
const int WeightParameter::kWeightFillerFieldNumber;
#endif  // !_MSC_VER

WeightParameter::WeightParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeightParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffepro::FillerParameter*>(&::caffepro::FillerParameter::default_instance());
}

WeightParameter::WeightParameter(const WeightParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeightParameter::SharedCtor() {
  _cached_size_ = 0;
  weight_filler_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeightParameter::~WeightParameter() {
  SharedDtor();
}

void WeightParameter::SharedDtor() {
  if (this != default_instance_) {
    delete weight_filler_;
  }
}

void WeightParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeightParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeightParameter_descriptor_;
}

const WeightParameter& WeightParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

WeightParameter* WeightParameter::default_instance_ = NULL;

WeightParameter* WeightParameter::New() const {
  return new WeightParameter;
}

void WeightParameter::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffepro::FillerParameter::Clear();
    }
  }
  weight_dim_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeightParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 weight_dim = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weight_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_weight_dim())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_weight_dim())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_weight_dim;
        if (input->ExpectTag(18)) goto parse_weight_filler;
        break;
      }
      
      // optional .caffepro.FillerParameter weight_filler = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeightParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 weight_dim = 1;
  for (int i = 0; i < this->weight_dim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->weight_dim(i), output);
  }
  
  // optional .caffepro.FillerParameter weight_filler = 2;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->weight_filler(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeightParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 weight_dim = 1;
  for (int i = 0; i < this->weight_dim_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->weight_dim(i), target);
  }
  
  // optional .caffepro.FillerParameter weight_filler = 2;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->weight_filler(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeightParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .caffepro.FillerParameter weight_filler = 2;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weight_filler());
    }
    
  }
  // repeated uint32 weight_dim = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->weight_dim_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->weight_dim(i));
    }
    total_size += 1 * this->weight_dim_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeightParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeightParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeightParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeightParameter::MergeFrom(const WeightParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  weight_dim_.MergeFrom(from.weight_dim_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffepro::FillerParameter::MergeFrom(from.weight_filler());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeightParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightParameter::CopyFrom(const WeightParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightParameter::IsInitialized() const {
  
  return true;
}

void WeightParameter::Swap(WeightParameter* other) {
  if (other != this) {
    weight_dim_.Swap(&other->weight_dim_);
    std::swap(weight_filler_, other->weight_filler_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeightParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeightParameter_descriptor_;
  metadata.reflection = WeightParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataProcesser::kProcesserTypeFieldNumber;
const int DataProcesser::kBindingOutputIndexFieldNumber;
const int DataProcesser::kThresholdFieldNumber;
const int DataProcesser::kAlphaFieldNumber;
const int DataProcesser::kBetaFieldNumber;
const int DataProcesser::kMethodFieldNumber;
#endif  // !_MSC_VER

DataProcesser::DataProcesser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataProcesser::InitAsDefaultInstance() {
}

DataProcesser::DataProcesser(const DataProcesser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataProcesser::SharedCtor() {
  _cached_size_ = 0;
  processer_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataProcesser::~DataProcesser() {
  SharedDtor();
}

void DataProcesser::SharedDtor() {
  if (processer_type_ != &::google::protobuf::internal::kEmptyString) {
    delete processer_type_;
  }
  if (this != default_instance_) {
  }
}

void DataProcesser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataProcesser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataProcesser_descriptor_;
}

const DataProcesser& DataProcesser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

DataProcesser* DataProcesser::default_instance_ = NULL;

DataProcesser* DataProcesser::New() const {
  return new DataProcesser;
}

void DataProcesser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_processer_type()) {
      if (processer_type_ != &::google::protobuf::internal::kEmptyString) {
        processer_type_->clear();
      }
    }
  }
  binding_output_index_.Clear();
  threshold_.Clear();
  alpha_.Clear();
  beta_.Clear();
  method_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataProcesser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string processer_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processer_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->processer_type().data(), this->processer_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_binding_output_index;
        break;
      }
      
      // repeated int32 binding_output_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_binding_output_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_binding_output_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_binding_output_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_binding_output_index;
        if (input->ExpectTag(29)) goto parse_threshold;
        break;
      }
      
      // repeated float threshold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_threshold())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_threshold())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_threshold;
        if (input->ExpectTag(37)) goto parse_alpha;
        break;
      }
      
      // repeated float alpha = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_alpha())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_alpha())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_alpha;
        if (input->ExpectTag(45)) goto parse_beta;
        break;
      }
      
      // repeated float beta = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_beta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_beta())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_beta())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_beta;
        if (input->ExpectTag(50)) goto parse_method;
        break;
      }
      
      // repeated string method = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->method(0).data(), this->method(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_method;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataProcesser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string processer_type = 1;
  if (has_processer_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processer_type().data(), this->processer_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->processer_type(), output);
  }
  
  // repeated int32 binding_output_index = 2;
  for (int i = 0; i < this->binding_output_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->binding_output_index(i), output);
  }
  
  // repeated float threshold = 3;
  for (int i = 0; i < this->threshold_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->threshold(i), output);
  }
  
  // repeated float alpha = 4;
  for (int i = 0; i < this->alpha_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->alpha(i), output);
  }
  
  // repeated float beta = 5;
  for (int i = 0; i < this->beta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->beta(i), output);
  }
  
  // repeated string method = 6;
  for (int i = 0; i < this->method_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->method(i).data(), this->method(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->method(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataProcesser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string processer_type = 1;
  if (has_processer_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processer_type().data(), this->processer_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->processer_type(), target);
  }
  
  // repeated int32 binding_output_index = 2;
  for (int i = 0; i < this->binding_output_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->binding_output_index(i), target);
  }
  
  // repeated float threshold = 3;
  for (int i = 0; i < this->threshold_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->threshold(i), target);
  }
  
  // repeated float alpha = 4;
  for (int i = 0; i < this->alpha_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->alpha(i), target);
  }
  
  // repeated float beta = 5;
  for (int i = 0; i < this->beta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->beta(i), target);
  }
  
  // repeated string method = 6;
  for (int i = 0; i < this->method_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method(i).data(), this->method(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->method(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataProcesser::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string processer_type = 1;
    if (has_processer_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processer_type());
    }
    
  }
  // repeated int32 binding_output_index = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->binding_output_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->binding_output_index(i));
    }
    total_size += 1 * this->binding_output_index_size() + data_size;
  }
  
  // repeated float threshold = 3;
  {
    int data_size = 0;
    data_size = 4 * this->threshold_size();
    total_size += 1 * this->threshold_size() + data_size;
  }
  
  // repeated float alpha = 4;
  {
    int data_size = 0;
    data_size = 4 * this->alpha_size();
    total_size += 1 * this->alpha_size() + data_size;
  }
  
  // repeated float beta = 5;
  {
    int data_size = 0;
    data_size = 4 * this->beta_size();
    total_size += 1 * this->beta_size() + data_size;
  }
  
  // repeated string method = 6;
  total_size += 1 * this->method_size();
  for (int i = 0; i < this->method_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->method(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataProcesser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataProcesser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataProcesser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataProcesser::MergeFrom(const DataProcesser& from) {
  GOOGLE_CHECK_NE(&from, this);
  binding_output_index_.MergeFrom(from.binding_output_index_);
  threshold_.MergeFrom(from.threshold_);
  alpha_.MergeFrom(from.alpha_);
  beta_.MergeFrom(from.beta_);
  method_.MergeFrom(from.method_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_processer_type()) {
      set_processer_type(from.processer_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataProcesser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataProcesser::CopyFrom(const DataProcesser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataProcesser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DataProcesser::Swap(DataProcesser* other) {
  if (other != this) {
    std::swap(processer_type_, other->processer_type_);
    binding_output_index_.Swap(&other->binding_output_index_);
    threshold_.Swap(&other->threshold_);
    alpha_.Swap(&other->alpha_);
    beta_.Swap(&other->beta_);
    method_.Swap(&other->method_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataProcesser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataProcesser_descriptor_;
  metadata.reflection = DataProcesser_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DataParameter_BigFile_InterpolationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataParameter_BigFile_InterpolationType_descriptor_;
}
bool DataParameter_BigFile_InterpolationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DataParameter_BigFile_InterpolationType DataParameter_BigFile::Bilinear;
const DataParameter_BigFile_InterpolationType DataParameter_BigFile::Bicubic;
const DataParameter_BigFile_InterpolationType DataParameter_BigFile::Lanczos;
const DataParameter_BigFile_InterpolationType DataParameter_BigFile::InterpolationType_MIN;
const DataParameter_BigFile_InterpolationType DataParameter_BigFile::InterpolationType_MAX;
const int DataParameter_BigFile::InterpolationType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DataParameter_BigFile_ScaleJitterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataParameter_BigFile_ScaleJitterType_descriptor_;
}
bool DataParameter_BigFile_ScaleJitterType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DataParameter_BigFile_ScaleJitterType DataParameter_BigFile::UniRatio;
const DataParameter_BigFile_ScaleJitterType DataParameter_BigFile::UniLength;
const DataParameter_BigFile_ScaleJitterType DataParameter_BigFile::UniArea;
const DataParameter_BigFile_ScaleJitterType DataParameter_BigFile::UniAreaV2;
const DataParameter_BigFile_ScaleJitterType DataParameter_BigFile::ScaleJitterType_MIN;
const DataParameter_BigFile_ScaleJitterType DataParameter_BigFile::ScaleJitterType_MAX;
const int DataParameter_BigFile::ScaleJitterType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DataParameter_BigFile_CropPreference_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataParameter_BigFile_CropPreference_descriptor_;
}
bool DataParameter_BigFile_CropPreference_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DataParameter_BigFile_CropPreference DataParameter_BigFile::IoCThres;
const DataParameter_BigFile_CropPreference DataParameter_BigFile::IoUMax;
const DataParameter_BigFile_CropPreference DataParameter_BigFile::IoUThres;
const DataParameter_BigFile_CropPreference DataParameter_BigFile::AnchorMaxThres;
const DataParameter_BigFile_CropPreference DataParameter_BigFile::CropPreference_MIN;
const DataParameter_BigFile_CropPreference DataParameter_BigFile::CropPreference_MAX;
const int DataParameter_BigFile::CropPreference_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DataParameter_BigFile::kSourceFieldNumber;
const int DataParameter_BigFile::kScaleFieldNumber;
const int DataParameter_BigFile::kMeanFileFieldNumber;
const int DataParameter_BigFile::kBatchSizeFieldNumber;
const int DataParameter_BigFile::kBatchImgSizeFieldNumber;
const int DataParameter_BigFile::kChannelNumFieldNumber;
const int DataParameter_BigFile::kCropTypeFieldNumber;
const int DataParameter_BigFile::kCropRatioFieldNumber;
const int DataParameter_BigFile::kColorKlDirFieldNumber;
const int DataParameter_BigFile::kRandomShuffleFieldNumber;
const int DataParameter_BigFile::kOverlapThresFieldNumber;
const int DataParameter_BigFile::kObjectWindowsDirFieldNumber;
const int DataParameter_BigFile::kCropRatioUpperboundFieldNumber;
const int DataParameter_BigFile::kCropRatioLowerboundFieldNumber;
const int DataParameter_BigFile::kInterpolationFieldNumber;
const int DataParameter_BigFile::kAspectRatioVariationFieldNumber;
const int DataParameter_BigFile::kScaleJitterTypeFieldNumber;
const int DataParameter_BigFile::kAdditionalDataProcesserFieldNumber;
const int DataParameter_BigFile::kCacheDataFieldNumber;
const int DataParameter_BigFile::kMultilabelDefFileFieldNumber;
const int DataParameter_BigFile::kMetadataFileFieldNumber;
const int DataParameter_BigFile::kRandomCropOverlapThresholdFieldNumber;
const int DataParameter_BigFile::kCropPreferenceFieldNumber;
const int DataParameter_BigFile::kCropDim1SegsFieldNumber;
const int DataParameter_BigFile::kCropDim2SegsFieldNumber;
const int DataParameter_BigFile::kCropBoxFileFieldNumber;
const int DataParameter_BigFile::kRcnnPadFieldNumber;
#endif  // !_MSC_VER

DataParameter_BigFile::DataParameter_BigFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataParameter_BigFile::InitAsDefaultInstance() {
}

DataParameter_BigFile::DataParameter_BigFile(const DataParameter_BigFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataParameter_BigFile::SharedCtor() {
  _cached_size_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scale_ = 1;
  mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  batch_size_ = 0u;
  batch_img_size_ = 0u;
  crop_type_ = 0u;
  crop_ratio_ = 1;
  color_kl_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  random_shuffle_ = true;
  overlap_thres_ = 0;
  object_windows_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  crop_ratio_upperbound_ = -1;
  crop_ratio_lowerbound_ = -1;
  aspect_ratio_variation_ = 0;
  scale_jitter_type_ = 0;
  cache_data_ = true;
  multilabel_def_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  metadata_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  random_crop_overlap_threshold_ = 0;
  crop_preference_ = 0;
  crop_dim1_segs_ = 0;
  crop_dim2_segs_ = 0;
  crop_box_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rcnn_pad_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataParameter_BigFile::~DataParameter_BigFile() {
  SharedDtor();
}

void DataParameter_BigFile::SharedDtor() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (mean_file_ != &::google::protobuf::internal::kEmptyString) {
    delete mean_file_;
  }
  if (color_kl_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete color_kl_dir_;
  }
  if (object_windows_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete object_windows_dir_;
  }
  if (multilabel_def_file_ != &::google::protobuf::internal::kEmptyString) {
    delete multilabel_def_file_;
  }
  if (metadata_file_ != &::google::protobuf::internal::kEmptyString) {
    delete metadata_file_;
  }
  if (crop_box_file_ != &::google::protobuf::internal::kEmptyString) {
    delete crop_box_file_;
  }
  if (this != default_instance_) {
  }
}

void DataParameter_BigFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataParameter_BigFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataParameter_BigFile_descriptor_;
}

const DataParameter_BigFile& DataParameter_BigFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

DataParameter_BigFile* DataParameter_BigFile::default_instance_ = NULL;

DataParameter_BigFile* DataParameter_BigFile::New() const {
  return new DataParameter_BigFile;
}

void DataParameter_BigFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::kEmptyString) {
        source_->clear();
      }
    }
    scale_ = 1;
    if (has_mean_file()) {
      if (mean_file_ != &::google::protobuf::internal::kEmptyString) {
        mean_file_->clear();
      }
    }
    batch_size_ = 0u;
    batch_img_size_ = 0u;
    crop_type_ = 0u;
    crop_ratio_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_color_kl_dir()) {
      if (color_kl_dir_ != &::google::protobuf::internal::kEmptyString) {
        color_kl_dir_->clear();
      }
    }
    random_shuffle_ = true;
    overlap_thres_ = 0;
    if (has_object_windows_dir()) {
      if (object_windows_dir_ != &::google::protobuf::internal::kEmptyString) {
        object_windows_dir_->clear();
      }
    }
    crop_ratio_upperbound_ = -1;
    crop_ratio_lowerbound_ = -1;
    aspect_ratio_variation_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    scale_jitter_type_ = 0;
    cache_data_ = true;
    if (has_multilabel_def_file()) {
      if (multilabel_def_file_ != &::google::protobuf::internal::kEmptyString) {
        multilabel_def_file_->clear();
      }
    }
    if (has_metadata_file()) {
      if (metadata_file_ != &::google::protobuf::internal::kEmptyString) {
        metadata_file_->clear();
      }
    }
    random_crop_overlap_threshold_ = 0;
    crop_preference_ = 0;
    crop_dim1_segs_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    crop_dim2_segs_ = 0;
    if (has_crop_box_file()) {
      if (crop_box_file_ != &::google::protobuf::internal::kEmptyString) {
        crop_box_file_->clear();
      }
    }
    rcnn_pad_ = 0;
  }
  channel_num_.Clear();
  interpolation_.Clear();
  additional_data_processer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataParameter_BigFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }
      
      // optional float scale = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mean_file;
        break;
      }
      
      // optional string mean_file = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mean_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_batch_size;
        break;
      }
      
      // optional uint32 batch_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_batch_img_size;
        break;
      }
      
      // optional uint32 batch_img_size = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batch_img_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_img_size_)));
          set_has_batch_img_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_channel_num;
        break;
      }
      
      // repeated uint32 channel_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_channel_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_channel_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_channel_num;
        if (input->ExpectTag(56)) goto parse_crop_type;
        break;
      }
      
      // optional uint32 crop_type = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crop_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_type_)));
          set_has_crop_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_crop_ratio;
        break;
      }
      
      // optional float crop_ratio = 8 [default = 1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_crop_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &crop_ratio_)));
          set_has_crop_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_color_kl_dir;
        break;
      }
      
      // optional string color_kl_dir = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color_kl_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color_kl_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->color_kl_dir().data(), this->color_kl_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_random_shuffle;
        break;
      }
      
      // optional bool random_shuffle = 11 [default = true];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_random_shuffle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &random_shuffle_)));
          set_has_random_shuffle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_overlap_thres;
        break;
      }
      
      // optional float overlap_thres = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_overlap_thres:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &overlap_thres_)));
          set_has_overlap_thres();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_object_windows_dir;
        break;
      }
      
      // optional string object_windows_dir = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_windows_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_windows_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->object_windows_dir().data(), this->object_windows_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_crop_ratio_upperbound;
        break;
      }
      
      // optional float crop_ratio_upperbound = 14 [default = -1];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_crop_ratio_upperbound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &crop_ratio_upperbound_)));
          set_has_crop_ratio_upperbound();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_crop_ratio_lowerbound;
        break;
      }
      
      // optional float crop_ratio_lowerbound = 15 [default = -1];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_crop_ratio_lowerbound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &crop_ratio_lowerbound_)));
          set_has_crop_ratio_lowerbound();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_interpolation;
        break;
      }
      
      // repeated .caffepro.DataParameter_BigFile.InterpolationType interpolation = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interpolation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffepro::DataParameter_BigFile_InterpolationType_IsValid(value)) {
            add_interpolation(static_cast< ::caffepro::DataParameter_BigFile_InterpolationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::caffepro::DataParameter_BigFile_InterpolationType_IsValid,
                 this->mutable_interpolation())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_interpolation;
        if (input->ExpectTag(141)) goto parse_aspect_ratio_variation;
        break;
      }
      
      // optional float aspect_ratio_variation = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_aspect_ratio_variation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aspect_ratio_variation_)));
          set_has_aspect_ratio_variation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_scale_jitter_type;
        break;
      }
      
      // optional .caffepro.DataParameter_BigFile.ScaleJitterType scale_jitter_type = 18 [default = UniRatio];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scale_jitter_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffepro::DataParameter_BigFile_ScaleJitterType_IsValid(value)) {
            set_scale_jitter_type(static_cast< ::caffepro::DataParameter_BigFile_ScaleJitterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_additional_data_processer;
        break;
      }
      
      // repeated .caffepro.DataProcesser additional_data_processer = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_additional_data_processer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additional_data_processer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_additional_data_processer;
        if (input->ExpectTag(160)) goto parse_cache_data;
        break;
      }
      
      // optional bool cache_data = 20 [default = true];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cache_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cache_data_)));
          set_has_cache_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_multilabel_def_file;
        break;
      }
      
      // optional string multilabel_def_file = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_multilabel_def_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multilabel_def_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->multilabel_def_file().data(), this->multilabel_def_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_metadata_file;
        break;
      }
      
      // optional string metadata_file = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metadata_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->metadata_file().data(), this->metadata_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_random_crop_overlap_threshold;
        break;
      }
      
      // optional float random_crop_overlap_threshold = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_random_crop_overlap_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_crop_overlap_threshold_)));
          set_has_random_crop_overlap_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_crop_preference;
        break;
      }
      
      // optional .caffepro.DataParameter_BigFile.CropPreference crop_preference = 24 [default = IoCThres];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crop_preference:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffepro::DataParameter_BigFile_CropPreference_IsValid(value)) {
            set_crop_preference(static_cast< ::caffepro::DataParameter_BigFile_CropPreference >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_crop_dim1_segs;
        break;
      }
      
      // optional int32 crop_dim1_segs = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crop_dim1_segs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crop_dim1_segs_)));
          set_has_crop_dim1_segs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_crop_dim2_segs;
        break;
      }
      
      // optional int32 crop_dim2_segs = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crop_dim2_segs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crop_dim2_segs_)));
          set_has_crop_dim2_segs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_crop_box_file;
        break;
      }
      
      // optional string crop_box_file = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crop_box_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crop_box_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->crop_box_file().data(), this->crop_box_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(229)) goto parse_rcnn_pad;
        break;
      }
      
      // optional float rcnn_pad = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rcnn_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rcnn_pad_)));
          set_has_rcnn_pad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataParameter_BigFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->source(), output);
  }
  
  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }
  
  // optional string mean_file = 3;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mean_file(), output);
  }
  
  // optional uint32 batch_size = 4;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
  }
  
  // optional uint32 batch_img_size = 5 [default = 0];
  if (has_batch_img_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->batch_img_size(), output);
  }
  
  // repeated uint32 channel_num = 6;
  for (int i = 0; i < this->channel_num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->channel_num(i), output);
  }
  
  // optional uint32 crop_type = 7 [default = 0];
  if (has_crop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->crop_type(), output);
  }
  
  // optional float crop_ratio = 8 [default = 1];
  if (has_crop_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->crop_ratio(), output);
  }
  
  // optional string color_kl_dir = 9;
  if (has_color_kl_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->color_kl_dir().data(), this->color_kl_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->color_kl_dir(), output);
  }
  
  // optional bool random_shuffle = 11 [default = true];
  if (has_random_shuffle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->random_shuffle(), output);
  }
  
  // optional float overlap_thres = 12 [default = 0];
  if (has_overlap_thres()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->overlap_thres(), output);
  }
  
  // optional string object_windows_dir = 13;
  if (has_object_windows_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_windows_dir().data(), this->object_windows_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->object_windows_dir(), output);
  }
  
  // optional float crop_ratio_upperbound = 14 [default = -1];
  if (has_crop_ratio_upperbound()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->crop_ratio_upperbound(), output);
  }
  
  // optional float crop_ratio_lowerbound = 15 [default = -1];
  if (has_crop_ratio_lowerbound()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->crop_ratio_lowerbound(), output);
  }
  
  // repeated .caffepro.DataParameter_BigFile.InterpolationType interpolation = 16;
  for (int i = 0; i < this->interpolation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->interpolation(i), output);
  }
  
  // optional float aspect_ratio_variation = 17 [default = 0];
  if (has_aspect_ratio_variation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->aspect_ratio_variation(), output);
  }
  
  // optional .caffepro.DataParameter_BigFile.ScaleJitterType scale_jitter_type = 18 [default = UniRatio];
  if (has_scale_jitter_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->scale_jitter_type(), output);
  }
  
  // repeated .caffepro.DataProcesser additional_data_processer = 19;
  for (int i = 0; i < this->additional_data_processer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->additional_data_processer(i), output);
  }
  
  // optional bool cache_data = 20 [default = true];
  if (has_cache_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->cache_data(), output);
  }
  
  // optional string multilabel_def_file = 21;
  if (has_multilabel_def_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multilabel_def_file().data(), this->multilabel_def_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->multilabel_def_file(), output);
  }
  
  // optional string metadata_file = 22;
  if (has_metadata_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metadata_file().data(), this->metadata_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->metadata_file(), output);
  }
  
  // optional float random_crop_overlap_threshold = 23 [default = 0];
  if (has_random_crop_overlap_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->random_crop_overlap_threshold(), output);
  }
  
  // optional .caffepro.DataParameter_BigFile.CropPreference crop_preference = 24 [default = IoCThres];
  if (has_crop_preference()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->crop_preference(), output);
  }
  
  // optional int32 crop_dim1_segs = 25;
  if (has_crop_dim1_segs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->crop_dim1_segs(), output);
  }
  
  // optional int32 crop_dim2_segs = 26;
  if (has_crop_dim2_segs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->crop_dim2_segs(), output);
  }
  
  // optional string crop_box_file = 27;
  if (has_crop_box_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crop_box_file().data(), this->crop_box_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->crop_box_file(), output);
  }
  
  // optional float rcnn_pad = 28;
  if (has_rcnn_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->rcnn_pad(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataParameter_BigFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }
  
  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }
  
  // optional string mean_file = 3;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mean_file(), target);
  }
  
  // optional uint32 batch_size = 4;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
  }
  
  // optional uint32 batch_img_size = 5 [default = 0];
  if (has_batch_img_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->batch_img_size(), target);
  }
  
  // repeated uint32 channel_num = 6;
  for (int i = 0; i < this->channel_num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->channel_num(i), target);
  }
  
  // optional uint32 crop_type = 7 [default = 0];
  if (has_crop_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->crop_type(), target);
  }
  
  // optional float crop_ratio = 8 [default = 1];
  if (has_crop_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->crop_ratio(), target);
  }
  
  // optional string color_kl_dir = 9;
  if (has_color_kl_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->color_kl_dir().data(), this->color_kl_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->color_kl_dir(), target);
  }
  
  // optional bool random_shuffle = 11 [default = true];
  if (has_random_shuffle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->random_shuffle(), target);
  }
  
  // optional float overlap_thres = 12 [default = 0];
  if (has_overlap_thres()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->overlap_thres(), target);
  }
  
  // optional string object_windows_dir = 13;
  if (has_object_windows_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_windows_dir().data(), this->object_windows_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->object_windows_dir(), target);
  }
  
  // optional float crop_ratio_upperbound = 14 [default = -1];
  if (has_crop_ratio_upperbound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->crop_ratio_upperbound(), target);
  }
  
  // optional float crop_ratio_lowerbound = 15 [default = -1];
  if (has_crop_ratio_lowerbound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->crop_ratio_lowerbound(), target);
  }
  
  // repeated .caffepro.DataParameter_BigFile.InterpolationType interpolation = 16;
  for (int i = 0; i < this->interpolation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->interpolation(i), target);
  }
  
  // optional float aspect_ratio_variation = 17 [default = 0];
  if (has_aspect_ratio_variation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->aspect_ratio_variation(), target);
  }
  
  // optional .caffepro.DataParameter_BigFile.ScaleJitterType scale_jitter_type = 18 [default = UniRatio];
  if (has_scale_jitter_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->scale_jitter_type(), target);
  }
  
  // repeated .caffepro.DataProcesser additional_data_processer = 19;
  for (int i = 0; i < this->additional_data_processer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->additional_data_processer(i), target);
  }
  
  // optional bool cache_data = 20 [default = true];
  if (has_cache_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->cache_data(), target);
  }
  
  // optional string multilabel_def_file = 21;
  if (has_multilabel_def_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multilabel_def_file().data(), this->multilabel_def_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->multilabel_def_file(), target);
  }
  
  // optional string metadata_file = 22;
  if (has_metadata_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metadata_file().data(), this->metadata_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->metadata_file(), target);
  }
  
  // optional float random_crop_overlap_threshold = 23 [default = 0];
  if (has_random_crop_overlap_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->random_crop_overlap_threshold(), target);
  }
  
  // optional .caffepro.DataParameter_BigFile.CropPreference crop_preference = 24 [default = IoCThres];
  if (has_crop_preference()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->crop_preference(), target);
  }
  
  // optional int32 crop_dim1_segs = 25;
  if (has_crop_dim1_segs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->crop_dim1_segs(), target);
  }
  
  // optional int32 crop_dim2_segs = 26;
  if (has_crop_dim2_segs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->crop_dim2_segs(), target);
  }
  
  // optional string crop_box_file = 27;
  if (has_crop_box_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crop_box_file().data(), this->crop_box_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->crop_box_file(), target);
  }
  
  // optional float rcnn_pad = 28;
  if (has_rcnn_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->rcnn_pad(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataParameter_BigFile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }
    
    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }
    
    // optional string mean_file = 3;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }
    
    // optional uint32 batch_size = 4;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }
    
    // optional uint32 batch_img_size = 5 [default = 0];
    if (has_batch_img_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_img_size());
    }
    
    // optional uint32 crop_type = 7 [default = 0];
    if (has_crop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_type());
    }
    
    // optional float crop_ratio = 8 [default = 1];
    if (has_crop_ratio()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string color_kl_dir = 9;
    if (has_color_kl_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color_kl_dir());
    }
    
    // optional bool random_shuffle = 11 [default = true];
    if (has_random_shuffle()) {
      total_size += 1 + 1;
    }
    
    // optional float overlap_thres = 12 [default = 0];
    if (has_overlap_thres()) {
      total_size += 1 + 4;
    }
    
    // optional string object_windows_dir = 13;
    if (has_object_windows_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->object_windows_dir());
    }
    
    // optional float crop_ratio_upperbound = 14 [default = -1];
    if (has_crop_ratio_upperbound()) {
      total_size += 1 + 4;
    }
    
    // optional float crop_ratio_lowerbound = 15 [default = -1];
    if (has_crop_ratio_lowerbound()) {
      total_size += 1 + 4;
    }
    
    // optional float aspect_ratio_variation = 17 [default = 0];
    if (has_aspect_ratio_variation()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .caffepro.DataParameter_BigFile.ScaleJitterType scale_jitter_type = 18 [default = UniRatio];
    if (has_scale_jitter_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scale_jitter_type());
    }
    
    // optional bool cache_data = 20 [default = true];
    if (has_cache_data()) {
      total_size += 2 + 1;
    }
    
    // optional string multilabel_def_file = 21;
    if (has_multilabel_def_file()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->multilabel_def_file());
    }
    
    // optional string metadata_file = 22;
    if (has_metadata_file()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->metadata_file());
    }
    
    // optional float random_crop_overlap_threshold = 23 [default = 0];
    if (has_random_crop_overlap_threshold()) {
      total_size += 2 + 4;
    }
    
    // optional .caffepro.DataParameter_BigFile.CropPreference crop_preference = 24 [default = IoCThres];
    if (has_crop_preference()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->crop_preference());
    }
    
    // optional int32 crop_dim1_segs = 25;
    if (has_crop_dim1_segs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crop_dim1_segs());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 crop_dim2_segs = 26;
    if (has_crop_dim2_segs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crop_dim2_segs());
    }
    
    // optional string crop_box_file = 27;
    if (has_crop_box_file()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crop_box_file());
    }
    
    // optional float rcnn_pad = 28;
    if (has_rcnn_pad()) {
      total_size += 2 + 4;
    }
    
  }
  // repeated uint32 channel_num = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->channel_num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->channel_num(i));
    }
    total_size += 1 * this->channel_num_size() + data_size;
  }
  
  // repeated .caffepro.DataParameter_BigFile.InterpolationType interpolation = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->interpolation_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->interpolation(i));
    }
    total_size += 2 * this->interpolation_size() + data_size;
  }
  
  // repeated .caffepro.DataProcesser additional_data_processer = 19;
  total_size += 2 * this->additional_data_processer_size();
  for (int i = 0; i < this->additional_data_processer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->additional_data_processer(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataParameter_BigFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataParameter_BigFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataParameter_BigFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataParameter_BigFile::MergeFrom(const DataParameter_BigFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  channel_num_.MergeFrom(from.channel_num_);
  interpolation_.MergeFrom(from.interpolation_);
  additional_data_processer_.MergeFrom(from.additional_data_processer_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_mean_file()) {
      set_mean_file(from.mean_file());
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_batch_img_size()) {
      set_batch_img_size(from.batch_img_size());
    }
    if (from.has_crop_type()) {
      set_crop_type(from.crop_type());
    }
    if (from.has_crop_ratio()) {
      set_crop_ratio(from.crop_ratio());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_color_kl_dir()) {
      set_color_kl_dir(from.color_kl_dir());
    }
    if (from.has_random_shuffle()) {
      set_random_shuffle(from.random_shuffle());
    }
    if (from.has_overlap_thres()) {
      set_overlap_thres(from.overlap_thres());
    }
    if (from.has_object_windows_dir()) {
      set_object_windows_dir(from.object_windows_dir());
    }
    if (from.has_crop_ratio_upperbound()) {
      set_crop_ratio_upperbound(from.crop_ratio_upperbound());
    }
    if (from.has_crop_ratio_lowerbound()) {
      set_crop_ratio_lowerbound(from.crop_ratio_lowerbound());
    }
    if (from.has_aspect_ratio_variation()) {
      set_aspect_ratio_variation(from.aspect_ratio_variation());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_scale_jitter_type()) {
      set_scale_jitter_type(from.scale_jitter_type());
    }
    if (from.has_cache_data()) {
      set_cache_data(from.cache_data());
    }
    if (from.has_multilabel_def_file()) {
      set_multilabel_def_file(from.multilabel_def_file());
    }
    if (from.has_metadata_file()) {
      set_metadata_file(from.metadata_file());
    }
    if (from.has_random_crop_overlap_threshold()) {
      set_random_crop_overlap_threshold(from.random_crop_overlap_threshold());
    }
    if (from.has_crop_preference()) {
      set_crop_preference(from.crop_preference());
    }
    if (from.has_crop_dim1_segs()) {
      set_crop_dim1_segs(from.crop_dim1_segs());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_crop_dim2_segs()) {
      set_crop_dim2_segs(from.crop_dim2_segs());
    }
    if (from.has_crop_box_file()) {
      set_crop_box_file(from.crop_box_file());
    }
    if (from.has_rcnn_pad()) {
      set_rcnn_pad(from.rcnn_pad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataParameter_BigFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataParameter_BigFile::CopyFrom(const DataParameter_BigFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataParameter_BigFile::IsInitialized() const {
  
  for (int i = 0; i < additional_data_processer_size(); i++) {
    if (!this->additional_data_processer(i).IsInitialized()) return false;
  }
  return true;
}

void DataParameter_BigFile::Swap(DataParameter_BigFile* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(scale_, other->scale_);
    std::swap(mean_file_, other->mean_file_);
    std::swap(batch_size_, other->batch_size_);
    std::swap(batch_img_size_, other->batch_img_size_);
    channel_num_.Swap(&other->channel_num_);
    std::swap(crop_type_, other->crop_type_);
    std::swap(crop_ratio_, other->crop_ratio_);
    std::swap(color_kl_dir_, other->color_kl_dir_);
    std::swap(random_shuffle_, other->random_shuffle_);
    std::swap(overlap_thres_, other->overlap_thres_);
    std::swap(object_windows_dir_, other->object_windows_dir_);
    std::swap(crop_ratio_upperbound_, other->crop_ratio_upperbound_);
    std::swap(crop_ratio_lowerbound_, other->crop_ratio_lowerbound_);
    interpolation_.Swap(&other->interpolation_);
    std::swap(aspect_ratio_variation_, other->aspect_ratio_variation_);
    std::swap(scale_jitter_type_, other->scale_jitter_type_);
    additional_data_processer_.Swap(&other->additional_data_processer_);
    std::swap(cache_data_, other->cache_data_);
    std::swap(multilabel_def_file_, other->multilabel_def_file_);
    std::swap(metadata_file_, other->metadata_file_);
    std::swap(random_crop_overlap_threshold_, other->random_crop_overlap_threshold_);
    std::swap(crop_preference_, other->crop_preference_);
    std::swap(crop_dim1_segs_, other->crop_dim1_segs_);
    std::swap(crop_dim2_segs_, other->crop_dim2_segs_);
    std::swap(crop_box_file_, other->crop_box_file_);
    std::swap(rcnn_pad_, other->rcnn_pad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataParameter_BigFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataParameter_BigFile_descriptor_;
  metadata.reflection = DataParameter_BigFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataEntryParameter::kEntryNameFieldNumber;
const int DataEntryParameter::kEntryIndexFieldNumber;
#endif  // !_MSC_VER

DataEntryParameter::DataEntryParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataEntryParameter::InitAsDefaultInstance() {
}

DataEntryParameter::DataEntryParameter(const DataEntryParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataEntryParameter::SharedCtor() {
  _cached_size_ = 0;
  entry_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entry_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataEntryParameter::~DataEntryParameter() {
  SharedDtor();
}

void DataEntryParameter::SharedDtor() {
  if (entry_name_ != &::google::protobuf::internal::kEmptyString) {
    delete entry_name_;
  }
  if (this != default_instance_) {
  }
}

void DataEntryParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataEntryParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataEntryParameter_descriptor_;
}

const DataEntryParameter& DataEntryParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

DataEntryParameter* DataEntryParameter::default_instance_ = NULL;

DataEntryParameter* DataEntryParameter::New() const {
  return new DataEntryParameter;
}

void DataEntryParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_entry_name()) {
      if (entry_name_ != &::google::protobuf::internal::kEmptyString) {
        entry_name_->clear();
      }
    }
    entry_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataEntryParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string entry_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entry_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entry_name().data(), this->entry_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_entry_index;
        break;
      }
      
      // optional int32 entry_index = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entry_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entry_index_)));
          set_has_entry_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataEntryParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string entry_name = 1;
  if (has_entry_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entry_name().data(), this->entry_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->entry_name(), output);
  }
  
  // optional int32 entry_index = 2 [default = 0];
  if (has_entry_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entry_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataEntryParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string entry_name = 1;
  if (has_entry_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entry_name().data(), this->entry_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->entry_name(), target);
  }
  
  // optional int32 entry_index = 2 [default = 0];
  if (has_entry_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->entry_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataEntryParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string entry_name = 1;
    if (has_entry_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entry_name());
    }
    
    // optional int32 entry_index = 2 [default = 0];
    if (has_entry_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entry_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataEntryParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataEntryParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataEntryParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataEntryParameter::MergeFrom(const DataEntryParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entry_name()) {
      set_entry_name(from.entry_name());
    }
    if (from.has_entry_index()) {
      set_entry_index(from.entry_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataEntryParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataEntryParameter::CopyFrom(const DataEntryParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataEntryParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DataEntryParameter::Swap(DataEntryParameter* other) {
  if (other != this) {
    std::swap(entry_name_, other->entry_name_);
    std::swap(entry_index_, other->entry_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataEntryParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataEntryParameter_descriptor_;
  metadata.reflection = DataEntryParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DropoutParameter::kDropoutRatioFieldNumber;
const int DropoutParameter::kForceRandomFieldNumber;
const int DropoutParameter::kForceSameFieldNumber;
#endif  // !_MSC_VER

DropoutParameter::DropoutParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DropoutParameter::InitAsDefaultInstance() {
}

DropoutParameter::DropoutParameter(const DropoutParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DropoutParameter::SharedCtor() {
  _cached_size_ = 0;
  dropout_ratio_ = 0.5f;
  force_random_ = false;
  force_same_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropoutParameter::~DropoutParameter() {
  SharedDtor();
}

void DropoutParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DropoutParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropoutParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropoutParameter_descriptor_;
}

const DropoutParameter& DropoutParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

DropoutParameter* DropoutParameter::default_instance_ = NULL;

DropoutParameter* DropoutParameter::New() const {
  return new DropoutParameter;
}

void DropoutParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dropout_ratio_ = 0.5f;
    force_random_ = false;
    force_same_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DropoutParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float dropout_ratio = 1 [default = 0.5];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_ratio_)));
          set_has_dropout_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_force_random;
        break;
      }
      
      // optional bool force_random = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force_random:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_random_)));
          set_has_force_random();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_force_same;
        break;
      }
      
      // optional bool force_same = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force_same:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_same_)));
          set_has_force_same();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DropoutParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float dropout_ratio = 1 [default = 0.5];
  if (has_dropout_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dropout_ratio(), output);
  }
  
  // optional bool force_random = 2 [default = false];
  if (has_force_random()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->force_random(), output);
  }
  
  // optional bool force_same = 3 [default = false];
  if (has_force_same()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->force_same(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DropoutParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float dropout_ratio = 1 [default = 0.5];
  if (has_dropout_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dropout_ratio(), target);
  }
  
  // optional bool force_random = 2 [default = false];
  if (has_force_random()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->force_random(), target);
  }
  
  // optional bool force_same = 3 [default = false];
  if (has_force_same()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->force_same(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DropoutParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float dropout_ratio = 1 [default = 0.5];
    if (has_dropout_ratio()) {
      total_size += 1 + 4;
    }
    
    // optional bool force_random = 2 [default = false];
    if (has_force_random()) {
      total_size += 1 + 1;
    }
    
    // optional bool force_same = 3 [default = false];
    if (has_force_same()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropoutParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DropoutParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DropoutParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DropoutParameter::MergeFrom(const DropoutParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dropout_ratio()) {
      set_dropout_ratio(from.dropout_ratio());
    }
    if (from.has_force_random()) {
      set_force_random(from.force_random());
    }
    if (from.has_force_same()) {
      set_force_same(from.force_same());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DropoutParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropoutParameter::CopyFrom(const DropoutParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropoutParameter::IsInitialized() const {
  
  return true;
}

void DropoutParameter::Swap(DropoutParameter* other) {
  if (other != this) {
    std::swap(dropout_ratio_, other->dropout_ratio_);
    std::swap(force_random_, other->force_random_);
    std::swap(force_same_, other->force_same_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DropoutParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DropoutParameter_descriptor_;
  metadata.reflection = DropoutParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PaddingParameter::kPadFieldNumber;
#endif  // !_MSC_VER

PaddingParameter::PaddingParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PaddingParameter::InitAsDefaultInstance() {
}

PaddingParameter::PaddingParameter(const PaddingParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PaddingParameter::SharedCtor() {
  _cached_size_ = 0;
  pad_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PaddingParameter::~PaddingParameter() {
  SharedDtor();
}

void PaddingParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PaddingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PaddingParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PaddingParameter_descriptor_;
}

const PaddingParameter& PaddingParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

PaddingParameter* PaddingParameter::default_instance_ = NULL;

PaddingParameter* PaddingParameter::New() const {
  return new PaddingParameter;
}

void PaddingParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pad_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PaddingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pad = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_)));
          set_has_pad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PaddingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pad = 1 [default = 0];
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pad(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PaddingParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pad = 1 [default = 0];
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pad(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PaddingParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pad = 1 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PaddingParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PaddingParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PaddingParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PaddingParameter::MergeFrom(const PaddingParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pad()) {
      set_pad(from.pad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PaddingParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaddingParameter::CopyFrom(const PaddingParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaddingParameter::IsInitialized() const {
  
  return true;
}

void PaddingParameter::Swap(PaddingParameter* other) {
  if (other != this) {
    std::swap(pad_, other->pad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PaddingParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PaddingParameter_descriptor_;
  metadata.reflection = PaddingParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InfogainLossParameter::kSourceFieldNumber;
#endif  // !_MSC_VER

InfogainLossParameter::InfogainLossParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InfogainLossParameter::InitAsDefaultInstance() {
}

InfogainLossParameter::InfogainLossParameter(const InfogainLossParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InfogainLossParameter::SharedCtor() {
  _cached_size_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InfogainLossParameter::~InfogainLossParameter() {
  SharedDtor();
}

void InfogainLossParameter::SharedDtor() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (this != default_instance_) {
  }
}

void InfogainLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfogainLossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfogainLossParameter_descriptor_;
}

const InfogainLossParameter& InfogainLossParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

InfogainLossParameter* InfogainLossParameter::default_instance_ = NULL;

InfogainLossParameter* InfogainLossParameter::New() const {
  return new InfogainLossParameter;
}

void InfogainLossParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::kEmptyString) {
        source_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InfogainLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InfogainLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->source(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InfogainLossParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InfogainLossParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfogainLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InfogainLossParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InfogainLossParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InfogainLossParameter::MergeFrom(const InfogainLossParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InfogainLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfogainLossParameter::CopyFrom(const InfogainLossParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfogainLossParameter::IsInitialized() const {
  
  return true;
}

void InfogainLossParameter::Swap(InfogainLossParameter* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InfogainLossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InfogainLossParameter_descriptor_;
  metadata.reflection = InfogainLossParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LossParameter::kCoeffFieldNumber;
const int LossParameter::kDisplayResultFieldNumber;
#endif  // !_MSC_VER

LossParameter::LossParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LossParameter::InitAsDefaultInstance() {
}

LossParameter::LossParameter(const LossParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LossParameter::SharedCtor() {
  _cached_size_ = 0;
  coeff_ = 1;
  display_result_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LossParameter::~LossParameter() {
  SharedDtor();
}

void LossParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LossParameter_descriptor_;
}

const LossParameter& LossParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

LossParameter* LossParameter::default_instance_ = NULL;

LossParameter* LossParameter::New() const {
  return new LossParameter;
}

void LossParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coeff_ = 1;
    display_result_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float coeff = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coeff_)));
          set_has_coeff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_display_result;
        break;
      }
      
      // optional bool display_result = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &display_result_)));
          set_has_display_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float coeff = 1 [default = 1];
  if (has_coeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->coeff(), output);
  }
  
  // optional bool display_result = 2 [default = true];
  if (has_display_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->display_result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LossParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float coeff = 1 [default = 1];
  if (has_coeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->coeff(), target);
  }
  
  // optional bool display_result = 2 [default = true];
  if (has_display_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->display_result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LossParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float coeff = 1 [default = 1];
    if (has_coeff()) {
      total_size += 1 + 4;
    }
    
    // optional bool display_result = 2 [default = true];
    if (has_display_result()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LossParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LossParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LossParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LossParameter::MergeFrom(const LossParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coeff()) {
      set_coeff(from.coeff());
    }
    if (from.has_display_result()) {
      set_display_result(from.display_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LossParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LossParameter::CopyFrom(const LossParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossParameter::IsInitialized() const {
  
  return true;
}

void LossParameter::Swap(LossParameter* other) {
  if (other != this) {
    std::swap(coeff_, other->coeff_);
    std::swap(display_result_, other->display_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LossParameter_descriptor_;
  metadata.reflection = LossParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ClsLocLossParameter_LocType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClsLocLossParameter_LocType_descriptor_;
}
bool ClsLocLossParameter_LocType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClsLocLossParameter_LocType ClsLocLossParameter::PCR;
const ClsLocLossParameter_LocType ClsLocLossParameter::SCR;
const ClsLocLossParameter_LocType ClsLocLossParameter::USER_DEFINED;
const ClsLocLossParameter_LocType ClsLocLossParameter::LocType_MIN;
const ClsLocLossParameter_LocType ClsLocLossParameter::LocType_MAX;
const int ClsLocLossParameter::LocType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ClsLocLossParameter_LossTransform_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClsLocLossParameter_LossTransform_descriptor_;
}
bool ClsLocLossParameter_LossTransform_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClsLocLossParameter_LossTransform ClsLocLossParameter::LTRB;
const ClsLocLossParameter_LossTransform ClsLocLossParameter::CX_CY_LOGW_LOGH;
const ClsLocLossParameter_LossTransform ClsLocLossParameter::LossTransform_MIN;
const ClsLocLossParameter_LossTransform ClsLocLossParameter::LossTransform_MAX;
const int ClsLocLossParameter::LossTransform_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClsLocLossParameter::kClsCoeffFieldNumber;
const int ClsLocLossParameter::kLocCoeffFieldNumber;
const int ClsLocLossParameter::kLocTypeFieldNumber;
const int ClsLocLossParameter::kUserDefFileFieldNumber;
const int ClsLocLossParameter::kLossTransformFieldNumber;
const int ClsLocLossParameter::kAssignRejectIouFieldNumber;
const int ClsLocLossParameter::kClsPosIouFieldNumber;
const int ClsLocLossParameter::kClsNegIouFieldNumber;
const int ClsLocLossParameter::kPredictionBoxClassificationFieldNumber;
const int ClsLocLossParameter::kAutoSpatialAnchorFieldNumber;
const int ClsLocLossParameter::kExpectedPosNumFieldNumber;
const int ClsLocLossParameter::kExpectedNegNumFieldNumber;
#endif  // !_MSC_VER

ClsLocLossParameter::ClsLocLossParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClsLocLossParameter::InitAsDefaultInstance() {
}

ClsLocLossParameter::ClsLocLossParameter(const ClsLocLossParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClsLocLossParameter::SharedCtor() {
  _cached_size_ = 0;
  cls_coeff_ = 1;
  loc_coeff_ = 1;
  loc_type_ = 0;
  user_def_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loss_transform_ = 0;
  assign_reject_iou_ = 0.2f;
  cls_pos_iou_ = 0.5f;
  cls_neg_iou_ = 0.2f;
  prediction_box_classification_ = false;
  auto_spatial_anchor_ = false;
  expected_pos_num_ = -1;
  expected_neg_num_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClsLocLossParameter::~ClsLocLossParameter() {
  SharedDtor();
}

void ClsLocLossParameter::SharedDtor() {
  if (user_def_file_ != &::google::protobuf::internal::kEmptyString) {
    delete user_def_file_;
  }
  if (this != default_instance_) {
  }
}

void ClsLocLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClsLocLossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClsLocLossParameter_descriptor_;
}

const ClsLocLossParameter& ClsLocLossParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

ClsLocLossParameter* ClsLocLossParameter::default_instance_ = NULL;

ClsLocLossParameter* ClsLocLossParameter::New() const {
  return new ClsLocLossParameter;
}

void ClsLocLossParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cls_coeff_ = 1;
    loc_coeff_ = 1;
    loc_type_ = 0;
    if (has_user_def_file()) {
      if (user_def_file_ != &::google::protobuf::internal::kEmptyString) {
        user_def_file_->clear();
      }
    }
    loss_transform_ = 0;
    assign_reject_iou_ = 0.2f;
    cls_pos_iou_ = 0.5f;
    cls_neg_iou_ = 0.2f;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    prediction_box_classification_ = false;
    auto_spatial_anchor_ = false;
    expected_pos_num_ = -1;
    expected_neg_num_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClsLocLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float cls_coeff = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cls_coeff_)));
          set_has_cls_coeff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_loc_coeff;
        break;
      }
      
      // optional float loc_coeff = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_loc_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &loc_coeff_)));
          set_has_loc_coeff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_loc_type;
        break;
      }
      
      // optional .caffepro.ClsLocLossParameter.LocType loc_type = 3 [default = PCR];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loc_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffepro::ClsLocLossParameter_LocType_IsValid(value)) {
            set_loc_type(static_cast< ::caffepro::ClsLocLossParameter_LocType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_def_file;
        break;
      }
      
      // optional string user_def_file = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_def_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_def_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_def_file().data(), this->user_def_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_loss_transform;
        break;
      }
      
      // optional .caffepro.ClsLocLossParameter.LossTransform loss_transform = 5 [default = LTRB];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loss_transform:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffepro::ClsLocLossParameter_LossTransform_IsValid(value)) {
            set_loss_transform(static_cast< ::caffepro::ClsLocLossParameter_LossTransform >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_assign_reject_iou;
        break;
      }
      
      // optional float assign_reject_iou = 6 [default = 0.2];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_assign_reject_iou:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assign_reject_iou_)));
          set_has_assign_reject_iou();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_cls_pos_iou;
        break;
      }
      
      // optional float cls_pos_iou = 7 [default = 0.5];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cls_pos_iou:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cls_pos_iou_)));
          set_has_cls_pos_iou();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_cls_neg_iou;
        break;
      }
      
      // optional float cls_neg_iou = 8 [default = 0.2];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cls_neg_iou:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cls_neg_iou_)));
          set_has_cls_neg_iou();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_prediction_box_classification;
        break;
      }
      
      // optional bool prediction_box_classification = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prediction_box_classification:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prediction_box_classification_)));
          set_has_prediction_box_classification();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_auto_spatial_anchor;
        break;
      }
      
      // optional bool auto_spatial_anchor = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_spatial_anchor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_spatial_anchor_)));
          set_has_auto_spatial_anchor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_expected_pos_num;
        break;
      }
      
      // optional int32 expected_pos_num = 11 [default = -1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expected_pos_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expected_pos_num_)));
          set_has_expected_pos_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_expected_neg_num;
        break;
      }
      
      // optional int32 expected_neg_num = 12 [default = -1];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expected_neg_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expected_neg_num_)));
          set_has_expected_neg_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClsLocLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float cls_coeff = 1 [default = 1];
  if (has_cls_coeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->cls_coeff(), output);
  }
  
  // optional float loc_coeff = 2 [default = 1];
  if (has_loc_coeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->loc_coeff(), output);
  }
  
  // optional .caffepro.ClsLocLossParameter.LocType loc_type = 3 [default = PCR];
  if (has_loc_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->loc_type(), output);
  }
  
  // optional string user_def_file = 4;
  if (has_user_def_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_def_file().data(), this->user_def_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user_def_file(), output);
  }
  
  // optional .caffepro.ClsLocLossParameter.LossTransform loss_transform = 5 [default = LTRB];
  if (has_loss_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->loss_transform(), output);
  }
  
  // optional float assign_reject_iou = 6 [default = 0.2];
  if (has_assign_reject_iou()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->assign_reject_iou(), output);
  }
  
  // optional float cls_pos_iou = 7 [default = 0.5];
  if (has_cls_pos_iou()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->cls_pos_iou(), output);
  }
  
  // optional float cls_neg_iou = 8 [default = 0.2];
  if (has_cls_neg_iou()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->cls_neg_iou(), output);
  }
  
  // optional bool prediction_box_classification = 9 [default = false];
  if (has_prediction_box_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->prediction_box_classification(), output);
  }
  
  // optional bool auto_spatial_anchor = 10 [default = false];
  if (has_auto_spatial_anchor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->auto_spatial_anchor(), output);
  }
  
  // optional int32 expected_pos_num = 11 [default = -1];
  if (has_expected_pos_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->expected_pos_num(), output);
  }
  
  // optional int32 expected_neg_num = 12 [default = -1];
  if (has_expected_neg_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->expected_neg_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClsLocLossParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float cls_coeff = 1 [default = 1];
  if (has_cls_coeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->cls_coeff(), target);
  }
  
  // optional float loc_coeff = 2 [default = 1];
  if (has_loc_coeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->loc_coeff(), target);
  }
  
  // optional .caffepro.ClsLocLossParameter.LocType loc_type = 3 [default = PCR];
  if (has_loc_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->loc_type(), target);
  }
  
  // optional string user_def_file = 4;
  if (has_user_def_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_def_file().data(), this->user_def_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_def_file(), target);
  }
  
  // optional .caffepro.ClsLocLossParameter.LossTransform loss_transform = 5 [default = LTRB];
  if (has_loss_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->loss_transform(), target);
  }
  
  // optional float assign_reject_iou = 6 [default = 0.2];
  if (has_assign_reject_iou()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->assign_reject_iou(), target);
  }
  
  // optional float cls_pos_iou = 7 [default = 0.5];
  if (has_cls_pos_iou()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->cls_pos_iou(), target);
  }
  
  // optional float cls_neg_iou = 8 [default = 0.2];
  if (has_cls_neg_iou()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->cls_neg_iou(), target);
  }
  
  // optional bool prediction_box_classification = 9 [default = false];
  if (has_prediction_box_classification()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->prediction_box_classification(), target);
  }
  
  // optional bool auto_spatial_anchor = 10 [default = false];
  if (has_auto_spatial_anchor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->auto_spatial_anchor(), target);
  }
  
  // optional int32 expected_pos_num = 11 [default = -1];
  if (has_expected_pos_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->expected_pos_num(), target);
  }
  
  // optional int32 expected_neg_num = 12 [default = -1];
  if (has_expected_neg_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->expected_neg_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClsLocLossParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float cls_coeff = 1 [default = 1];
    if (has_cls_coeff()) {
      total_size += 1 + 4;
    }
    
    // optional float loc_coeff = 2 [default = 1];
    if (has_loc_coeff()) {
      total_size += 1 + 4;
    }
    
    // optional .caffepro.ClsLocLossParameter.LocType loc_type = 3 [default = PCR];
    if (has_loc_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->loc_type());
    }
    
    // optional string user_def_file = 4;
    if (has_user_def_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_def_file());
    }
    
    // optional .caffepro.ClsLocLossParameter.LossTransform loss_transform = 5 [default = LTRB];
    if (has_loss_transform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->loss_transform());
    }
    
    // optional float assign_reject_iou = 6 [default = 0.2];
    if (has_assign_reject_iou()) {
      total_size += 1 + 4;
    }
    
    // optional float cls_pos_iou = 7 [default = 0.5];
    if (has_cls_pos_iou()) {
      total_size += 1 + 4;
    }
    
    // optional float cls_neg_iou = 8 [default = 0.2];
    if (has_cls_neg_iou()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool prediction_box_classification = 9 [default = false];
    if (has_prediction_box_classification()) {
      total_size += 1 + 1;
    }
    
    // optional bool auto_spatial_anchor = 10 [default = false];
    if (has_auto_spatial_anchor()) {
      total_size += 1 + 1;
    }
    
    // optional int32 expected_pos_num = 11 [default = -1];
    if (has_expected_pos_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expected_pos_num());
    }
    
    // optional int32 expected_neg_num = 12 [default = -1];
    if (has_expected_neg_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expected_neg_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClsLocLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClsLocLossParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClsLocLossParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClsLocLossParameter::MergeFrom(const ClsLocLossParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cls_coeff()) {
      set_cls_coeff(from.cls_coeff());
    }
    if (from.has_loc_coeff()) {
      set_loc_coeff(from.loc_coeff());
    }
    if (from.has_loc_type()) {
      set_loc_type(from.loc_type());
    }
    if (from.has_user_def_file()) {
      set_user_def_file(from.user_def_file());
    }
    if (from.has_loss_transform()) {
      set_loss_transform(from.loss_transform());
    }
    if (from.has_assign_reject_iou()) {
      set_assign_reject_iou(from.assign_reject_iou());
    }
    if (from.has_cls_pos_iou()) {
      set_cls_pos_iou(from.cls_pos_iou());
    }
    if (from.has_cls_neg_iou()) {
      set_cls_neg_iou(from.cls_neg_iou());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_prediction_box_classification()) {
      set_prediction_box_classification(from.prediction_box_classification());
    }
    if (from.has_auto_spatial_anchor()) {
      set_auto_spatial_anchor(from.auto_spatial_anchor());
    }
    if (from.has_expected_pos_num()) {
      set_expected_pos_num(from.expected_pos_num());
    }
    if (from.has_expected_neg_num()) {
      set_expected_neg_num(from.expected_neg_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClsLocLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClsLocLossParameter::CopyFrom(const ClsLocLossParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClsLocLossParameter::IsInitialized() const {
  
  return true;
}

void ClsLocLossParameter::Swap(ClsLocLossParameter* other) {
  if (other != this) {
    std::swap(cls_coeff_, other->cls_coeff_);
    std::swap(loc_coeff_, other->loc_coeff_);
    std::swap(loc_type_, other->loc_type_);
    std::swap(user_def_file_, other->user_def_file_);
    std::swap(loss_transform_, other->loss_transform_);
    std::swap(assign_reject_iou_, other->assign_reject_iou_);
    std::swap(cls_pos_iou_, other->cls_pos_iou_);
    std::swap(cls_neg_iou_, other->cls_neg_iou_);
    std::swap(prediction_box_classification_, other->prediction_box_classification_);
    std::swap(auto_spatial_anchor_, other->auto_spatial_anchor_);
    std::swap(expected_pos_num_, other->expected_pos_num_);
    std::swap(expected_neg_num_, other->expected_neg_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClsLocLossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClsLocLossParameter_descriptor_;
  metadata.reflection = ClsLocLossParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InnerProductParameter::kNumOutputFieldNumber;
const int InnerProductParameter::kBiasTermFieldNumber;
const int InnerProductParameter::kWeightFillerFieldNumber;
const int InnerProductParameter::kBiasFillerFieldNumber;
const int InnerProductParameter::kUpdateInplaceFieldNumber;
#endif  // !_MSC_VER

InnerProductParameter::InnerProductParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InnerProductParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffepro::FillerParameter*>(&::caffepro::FillerParameter::default_instance());
  bias_filler_ = const_cast< ::caffepro::FillerParameter*>(&::caffepro::FillerParameter::default_instance());
}

InnerProductParameter::InnerProductParameter(const InnerProductParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InnerProductParameter::SharedCtor() {
  _cached_size_ = 0;
  num_output_ = 0u;
  bias_term_ = true;
  weight_filler_ = NULL;
  bias_filler_ = NULL;
  update_inplace_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InnerProductParameter::~InnerProductParameter() {
  SharedDtor();
}

void InnerProductParameter::SharedDtor() {
  if (this != default_instance_) {
    delete weight_filler_;
    delete bias_filler_;
  }
}

void InnerProductParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnerProductParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InnerProductParameter_descriptor_;
}

const InnerProductParameter& InnerProductParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

InnerProductParameter* InnerProductParameter::default_instance_ = NULL;

InnerProductParameter* InnerProductParameter::New() const {
  return new InnerProductParameter;
}

void InnerProductParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_output_ = 0u;
    bias_term_ = true;
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffepro::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffepro::FillerParameter::Clear();
    }
    update_inplace_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InnerProductParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bias_term;
        break;
      }
      
      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bias_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
          set_has_bias_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weight_filler;
        break;
      }
      
      // optional .caffepro.FillerParameter weight_filler = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bias_filler;
        break;
      }
      
      // optional .caffepro.FillerParameter bias_filler = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_update_inplace;
        break;
      }
      
      // optional bool update_inplace = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_inplace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_inplace_)));
          set_has_update_inplace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InnerProductParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }
  
  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }
  
  // optional .caffepro.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->weight_filler(), output);
  }
  
  // optional .caffepro.FillerParameter bias_filler = 4;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bias_filler(), output);
  }
  
  // optional bool update_inplace = 5 [default = false];
  if (has_update_inplace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->update_inplace(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InnerProductParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }
  
  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }
  
  // optional .caffepro.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->weight_filler(), target);
  }
  
  // optional .caffepro.FillerParameter bias_filler = 4;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bias_filler(), target);
  }
  
  // optional bool update_inplace = 5 [default = false];
  if (has_update_inplace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->update_inplace(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InnerProductParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }
    
    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }
    
    // optional .caffepro.FillerParameter weight_filler = 3;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weight_filler());
    }
    
    // optional .caffepro.FillerParameter bias_filler = 4;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bias_filler());
    }
    
    // optional bool update_inplace = 5 [default = false];
    if (has_update_inplace()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnerProductParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InnerProductParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InnerProductParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InnerProductParameter::MergeFrom(const InnerProductParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_bias_term()) {
      set_bias_term(from.bias_term());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffepro::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffepro::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (from.has_update_inplace()) {
      set_update_inplace(from.update_inplace());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InnerProductParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerProductParameter::CopyFrom(const InnerProductParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerProductParameter::IsInitialized() const {
  
  return true;
}

void InnerProductParameter::Swap(InnerProductParameter* other) {
  if (other != this) {
    std::swap(num_output_, other->num_output_);
    std::swap(bias_term_, other->bias_term_);
    std::swap(weight_filler_, other->weight_filler_);
    std::swap(bias_filler_, other->bias_filler_);
    std::swap(update_inplace_, other->update_inplace_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InnerProductParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InnerProductParameter_descriptor_;
  metadata.reflection = InnerProductParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LRNParameter_NormRegion_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LRNParameter_NormRegion_descriptor_;
}
bool LRNParameter_NormRegion_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LRNParameter_NormRegion LRNParameter::ACROSS_CHANNELS;
const LRNParameter_NormRegion LRNParameter::WITHIN_CHANNEL;
const LRNParameter_NormRegion LRNParameter::NormRegion_MIN;
const LRNParameter_NormRegion LRNParameter::NormRegion_MAX;
const int LRNParameter::NormRegion_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LRNParameter::kLocalSizeFieldNumber;
const int LRNParameter::kAlphaFieldNumber;
const int LRNParameter::kBetaFieldNumber;
const int LRNParameter::kNormRegionFieldNumber;
#endif  // !_MSC_VER

LRNParameter::LRNParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LRNParameter::InitAsDefaultInstance() {
}

LRNParameter::LRNParameter(const LRNParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LRNParameter::SharedCtor() {
  _cached_size_ = 0;
  local_size_ = 5u;
  alpha_ = 1;
  beta_ = 0.75f;
  norm_region_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LRNParameter::~LRNParameter() {
  SharedDtor();
}

void LRNParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LRNParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LRNParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LRNParameter_descriptor_;
}

const LRNParameter& LRNParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

LRNParameter* LRNParameter::default_instance_ = NULL;

LRNParameter* LRNParameter::New() const {
  return new LRNParameter;
}

void LRNParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    local_size_ = 5u;
    alpha_ = 1;
    beta_ = 0.75f;
    norm_region_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LRNParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 local_size = 1 [default = 5];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_size_)));
          set_has_local_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_alpha;
        break;
      }
      
      // optional float alpha = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_beta;
        break;
      }
      
      // optional float beta = 3 [default = 0.75];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_beta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
          set_has_beta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_norm_region;
        break;
      }
      
      // optional .caffepro.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_norm_region:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffepro::LRNParameter_NormRegion_IsValid(value)) {
            set_norm_region(static_cast< ::caffepro::LRNParameter_NormRegion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LRNParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 local_size = 1 [default = 5];
  if (has_local_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->local_size(), output);
  }
  
  // optional float alpha = 2 [default = 1];
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->alpha(), output);
  }
  
  // optional float beta = 3 [default = 0.75];
  if (has_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->beta(), output);
  }
  
  // optional .caffepro.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  if (has_norm_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->norm_region(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LRNParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 local_size = 1 [default = 5];
  if (has_local_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->local_size(), target);
  }
  
  // optional float alpha = 2 [default = 1];
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->alpha(), target);
  }
  
  // optional float beta = 3 [default = 0.75];
  if (has_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->beta(), target);
  }
  
  // optional .caffepro.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  if (has_norm_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->norm_region(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LRNParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 local_size = 1 [default = 5];
    if (has_local_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_size());
    }
    
    // optional float alpha = 2 [default = 1];
    if (has_alpha()) {
      total_size += 1 + 4;
    }
    
    // optional float beta = 3 [default = 0.75];
    if (has_beta()) {
      total_size += 1 + 4;
    }
    
    // optional .caffepro.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
    if (has_norm_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->norm_region());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LRNParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LRNParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LRNParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LRNParameter::MergeFrom(const LRNParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_size()) {
      set_local_size(from.local_size());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_beta()) {
      set_beta(from.beta());
    }
    if (from.has_norm_region()) {
      set_norm_region(from.norm_region());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LRNParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LRNParameter::CopyFrom(const LRNParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LRNParameter::IsInitialized() const {
  
  return true;
}

void LRNParameter::Swap(LRNParameter* other) {
  if (other != this) {
    std::swap(local_size_, other->local_size_);
    std::swap(alpha_, other->alpha_);
    std::swap(beta_, other->beta_);
    std::swap(norm_region_, other->norm_region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LRNParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LRNParameter_descriptor_;
  metadata.reflection = LRNParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoolingParameter_PoolMethod_descriptor_;
}
bool PoolingParameter_PoolMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PoolingParameter_PoolMethod PoolingParameter::MAX;
const PoolingParameter_PoolMethod PoolingParameter::AVE;
const PoolingParameter_PoolMethod PoolingParameter::STOCHASTIC;
const PoolingParameter_PoolMethod PoolingParameter::PoolMethod_MIN;
const PoolingParameter_PoolMethod PoolingParameter::PoolMethod_MAX;
const int PoolingParameter::PoolMethod_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PoolingParameter::kPoolFieldNumber;
const int PoolingParameter::kKernelSizeFieldNumber;
const int PoolingParameter::kStrideFieldNumber;
const int PoolingParameter::kSizeFloorFieldNumber;
const int PoolingParameter::kPadFieldNumber;
const int PoolingParameter::kPadXFieldNumber;
const int PoolingParameter::kPadYFieldNumber;
const int PoolingParameter::kKernelSizeXFieldNumber;
const int PoolingParameter::kKernelSizeYFieldNumber;
const int PoolingParameter::kStrideXFieldNumber;
const int PoolingParameter::kStrideYFieldNumber;
#endif  // !_MSC_VER

PoolingParameter::PoolingParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PoolingParameter::InitAsDefaultInstance() {
}

PoolingParameter::PoolingParameter(const PoolingParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PoolingParameter::SharedCtor() {
  _cached_size_ = 0;
  pool_ = 0;
  kernel_size_ = 0u;
  stride_ = 1u;
  size_floor_ = false;
  pad_ = 0;
  pad_x_ = 0;
  pad_y_ = 0;
  kernel_size_x_ = 0;
  kernel_size_y_ = 0;
  stride_x_ = 1;
  stride_y_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PoolingParameter::~PoolingParameter() {
  SharedDtor();
}

void PoolingParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PoolingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoolingParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoolingParameter_descriptor_;
}

const PoolingParameter& PoolingParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

PoolingParameter* PoolingParameter::default_instance_ = NULL;

PoolingParameter* PoolingParameter::New() const {
  return new PoolingParameter;
}

void PoolingParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pool_ = 0;
    kernel_size_ = 0u;
    stride_ = 1u;
    size_floor_ = false;
    pad_ = 0;
    pad_x_ = 0;
    pad_y_ = 0;
    kernel_size_x_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    kernel_size_y_ = 0;
    stride_x_ = 1;
    stride_y_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PoolingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffepro.PoolingParameter.PoolMethod pool = 1 [default = MAX];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffepro::PoolingParameter_PoolMethod_IsValid(value)) {
            set_pool(static_cast< ::caffepro::PoolingParameter_PoolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kernel_size;
        break;
      }
      
      // optional uint32 kernel_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kernel_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_size_)));
          set_has_kernel_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stride;
        break;
      }
      
      // optional uint32 stride = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
          set_has_stride();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size_floor;
        break;
      }
      
      // optional bool size_floor = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &size_floor_)));
          set_has_size_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pad;
        break;
      }
      
      // optional int32 pad = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_)));
          set_has_pad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pad_x;
        break;
      }
      
      // optional int32 pad_x = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pad_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_x_)));
          set_has_pad_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pad_y;
        break;
      }
      
      // optional int32 pad_y = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pad_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_y_)));
          set_has_pad_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_kernel_size_x;
        break;
      }
      
      // optional int32 kernel_size_x = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kernel_size_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernel_size_x_)));
          set_has_kernel_size_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_kernel_size_y;
        break;
      }
      
      // optional int32 kernel_size_y = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kernel_size_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernel_size_y_)));
          set_has_kernel_size_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_stride_x;
        break;
      }
      
      // optional int32 stride_x = 10 [default = 1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stride_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_x_)));
          set_has_stride_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_stride_y;
        break;
      }
      
      // optional int32 stride_y = 11 [default = 1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stride_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_y_)));
          set_has_stride_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PoolingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .caffepro.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  if (has_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pool(), output);
  }
  
  // optional uint32 kernel_size = 2;
  if (has_kernel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kernel_size(), output);
  }
  
  // optional uint32 stride = 3 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stride(), output);
  }
  
  // optional bool size_floor = 4 [default = false];
  if (has_size_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->size_floor(), output);
  }
  
  // optional int32 pad = 5 [default = 0];
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pad(), output);
  }
  
  // optional int32 pad_x = 6 [default = 0];
  if (has_pad_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pad_x(), output);
  }
  
  // optional int32 pad_y = 7 [default = 0];
  if (has_pad_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pad_y(), output);
  }
  
  // optional int32 kernel_size_x = 8 [default = 0];
  if (has_kernel_size_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->kernel_size_x(), output);
  }
  
  // optional int32 kernel_size_y = 9 [default = 0];
  if (has_kernel_size_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->kernel_size_y(), output);
  }
  
  // optional int32 stride_x = 10 [default = 1];
  if (has_stride_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->stride_x(), output);
  }
  
  // optional int32 stride_y = 11 [default = 1];
  if (has_stride_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->stride_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PoolingParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .caffepro.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  if (has_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pool(), target);
  }
  
  // optional uint32 kernel_size = 2;
  if (has_kernel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kernel_size(), target);
  }
  
  // optional uint32 stride = 3 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stride(), target);
  }
  
  // optional bool size_floor = 4 [default = false];
  if (has_size_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->size_floor(), target);
  }
  
  // optional int32 pad = 5 [default = 0];
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pad(), target);
  }
  
  // optional int32 pad_x = 6 [default = 0];
  if (has_pad_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pad_x(), target);
  }
  
  // optional int32 pad_y = 7 [default = 0];
  if (has_pad_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pad_y(), target);
  }
  
  // optional int32 kernel_size_x = 8 [default = 0];
  if (has_kernel_size_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->kernel_size_x(), target);
  }
  
  // optional int32 kernel_size_y = 9 [default = 0];
  if (has_kernel_size_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->kernel_size_y(), target);
  }
  
  // optional int32 stride_x = 10 [default = 1];
  if (has_stride_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->stride_x(), target);
  }
  
  // optional int32 stride_y = 11 [default = 1];
  if (has_stride_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->stride_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PoolingParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffepro.PoolingParameter.PoolMethod pool = 1 [default = MAX];
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
    }
    
    // optional uint32 kernel_size = 2;
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_size());
    }
    
    // optional uint32 stride = 3 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride());
    }
    
    // optional bool size_floor = 4 [default = false];
    if (has_size_floor()) {
      total_size += 1 + 1;
    }
    
    // optional int32 pad = 5 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pad());
    }
    
    // optional int32 pad_x = 6 [default = 0];
    if (has_pad_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pad_x());
    }
    
    // optional int32 pad_y = 7 [default = 0];
    if (has_pad_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pad_y());
    }
    
    // optional int32 kernel_size_x = 8 [default = 0];
    if (has_kernel_size_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kernel_size_x());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 kernel_size_y = 9 [default = 0];
    if (has_kernel_size_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kernel_size_y());
    }
    
    // optional int32 stride_x = 10 [default = 1];
    if (has_stride_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stride_x());
    }
    
    // optional int32 stride_y = 11 [default = 1];
    if (has_stride_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stride_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoolingParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PoolingParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PoolingParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PoolingParameter::MergeFrom(const PoolingParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pool()) {
      set_pool(from.pool());
    }
    if (from.has_kernel_size()) {
      set_kernel_size(from.kernel_size());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_size_floor()) {
      set_size_floor(from.size_floor());
    }
    if (from.has_pad()) {
      set_pad(from.pad());
    }
    if (from.has_pad_x()) {
      set_pad_x(from.pad_x());
    }
    if (from.has_pad_y()) {
      set_pad_y(from.pad_y());
    }
    if (from.has_kernel_size_x()) {
      set_kernel_size_x(from.kernel_size_x());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_kernel_size_y()) {
      set_kernel_size_y(from.kernel_size_y());
    }
    if (from.has_stride_x()) {
      set_stride_x(from.stride_x());
    }
    if (from.has_stride_y()) {
      set_stride_y(from.stride_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PoolingParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolingParameter::CopyFrom(const PoolingParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolingParameter::IsInitialized() const {
  
  return true;
}

void PoolingParameter::Swap(PoolingParameter* other) {
  if (other != this) {
    std::swap(pool_, other->pool_);
    std::swap(kernel_size_, other->kernel_size_);
    std::swap(stride_, other->stride_);
    std::swap(size_floor_, other->size_floor_);
    std::swap(pad_, other->pad_);
    std::swap(pad_x_, other->pad_x_);
    std::swap(pad_y_, other->pad_y_);
    std::swap(kernel_size_x_, other->kernel_size_x_);
    std::swap(kernel_size_y_, other->kernel_size_y_);
    std::swap(stride_x_, other->stride_x_);
    std::swap(stride_y_, other->stride_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PoolingParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PoolingParameter_descriptor_;
  metadata.reflection = PoolingParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SPMParameter_PoolMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPMParameter_PoolMethod_descriptor_;
}
bool SPMParameter_PoolMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SPMParameter_PoolMethod SPMParameter::MAX;
const SPMParameter_PoolMethod SPMParameter::AVE;
const SPMParameter_PoolMethod SPMParameter::STOCHASTIC;
const SPMParameter_PoolMethod SPMParameter::PoolMethod_MIN;
const SPMParameter_PoolMethod SPMParameter::PoolMethod_MAX;
const int SPMParameter::PoolMethod_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SPMParameter::kPoolFieldNumber;
const int SPMParameter::kCellXFieldNumber;
const int SPMParameter::kCellYFieldNumber;
#endif  // !_MSC_VER

SPMParameter::SPMParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPMParameter::InitAsDefaultInstance() {
}

SPMParameter::SPMParameter(const SPMParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPMParameter::SharedCtor() {
  _cached_size_ = 0;
  pool_ = 0;
  cell_x_ = 0u;
  cell_y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPMParameter::~SPMParameter() {
  SharedDtor();
}

void SPMParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPMParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPMParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPMParameter_descriptor_;
}

const SPMParameter& SPMParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

SPMParameter* SPMParameter::default_instance_ = NULL;

SPMParameter* SPMParameter::New() const {
  return new SPMParameter;
}

void SPMParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pool_ = 0;
    cell_x_ = 0u;
    cell_y_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPMParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffepro.SPMParameter.PoolMethod pool = 1 [default = MAX];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffepro::SPMParameter_PoolMethod_IsValid(value)) {
            set_pool(static_cast< ::caffepro::SPMParameter_PoolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cell_x;
        break;
      }
      
      // optional uint32 cell_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_x_)));
          set_has_cell_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cell_y;
        break;
      }
      
      // optional uint32 cell_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_y_)));
          set_has_cell_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SPMParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .caffepro.SPMParameter.PoolMethod pool = 1 [default = MAX];
  if (has_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pool(), output);
  }
  
  // optional uint32 cell_x = 2;
  if (has_cell_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cell_x(), output);
  }
  
  // optional uint32 cell_y = 3;
  if (has_cell_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cell_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPMParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .caffepro.SPMParameter.PoolMethod pool = 1 [default = MAX];
  if (has_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pool(), target);
  }
  
  // optional uint32 cell_x = 2;
  if (has_cell_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cell_x(), target);
  }
  
  // optional uint32 cell_y = 3;
  if (has_cell_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cell_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPMParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffepro.SPMParameter.PoolMethod pool = 1 [default = MAX];
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
    }
    
    // optional uint32 cell_x = 2;
    if (has_cell_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_x());
    }
    
    // optional uint32 cell_y = 3;
    if (has_cell_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPMParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPMParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPMParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPMParameter::MergeFrom(const SPMParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pool()) {
      set_pool(from.pool());
    }
    if (from.has_cell_x()) {
      set_cell_x(from.cell_x());
    }
    if (from.has_cell_y()) {
      set_cell_y(from.cell_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPMParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPMParameter::CopyFrom(const SPMParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPMParameter::IsInitialized() const {
  
  return true;
}

void SPMParameter::Swap(SPMParameter* other) {
  if (other != this) {
    std::swap(pool_, other->pool_);
    std::swap(cell_x_, other->cell_x_);
    std::swap(cell_y_, other->cell_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPMParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPMParameter_descriptor_;
  metadata.reflection = SPMParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PowerParameter::kPowerFieldNumber;
const int PowerParameter::kScaleFieldNumber;
const int PowerParameter::kShiftFieldNumber;
#endif  // !_MSC_VER

PowerParameter::PowerParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PowerParameter::InitAsDefaultInstance() {
}

PowerParameter::PowerParameter(const PowerParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PowerParameter::SharedCtor() {
  _cached_size_ = 0;
  power_ = 1;
  scale_ = 1;
  shift_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PowerParameter::~PowerParameter() {
  SharedDtor();
}

void PowerParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PowerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PowerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PowerParameter_descriptor_;
}

const PowerParameter& PowerParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

PowerParameter* PowerParameter::default_instance_ = NULL;

PowerParameter* PowerParameter::New() const {
  return new PowerParameter;
}

void PowerParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    power_ = 1;
    scale_ = 1;
    shift_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PowerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float power = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }
      
      // optional float scale = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_shift;
        break;
      }
      
      // optional float shift = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_shift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shift_)));
          set_has_shift();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PowerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float power = 1 [default = 1];
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->power(), output);
  }
  
  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }
  
  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->shift(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PowerParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float power = 1 [default = 1];
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->power(), target);
  }
  
  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }
  
  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->shift(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PowerParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float power = 1 [default = 1];
    if (has_power()) {
      total_size += 1 + 4;
    }
    
    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }
    
    // optional float shift = 3 [default = 0];
    if (has_shift()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PowerParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PowerParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PowerParameter::MergeFrom(const PowerParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_shift()) {
      set_shift(from.shift());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PowerParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerParameter::CopyFrom(const PowerParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerParameter::IsInitialized() const {
  
  return true;
}

void PowerParameter::Swap(PowerParameter* other) {
  if (other != this) {
    std::swap(power_, other->power_);
    std::swap(scale_, other->scale_);
    std::swap(shift_, other->shift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PowerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PowerParameter_descriptor_;
  metadata.reflection = PowerParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LayerConnection::kLayerFieldNumber;
const int LayerConnection::kBottomFieldNumber;
const int LayerConnection::kTopFieldNumber;
#endif  // !_MSC_VER

LayerConnection::LayerConnection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LayerConnection::InitAsDefaultInstance() {
  layer_ = const_cast< ::caffepro::LayerParameter*>(&::caffepro::LayerParameter::default_instance());
}

LayerConnection::LayerConnection(const LayerConnection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LayerConnection::SharedCtor() {
  _cached_size_ = 0;
  layer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayerConnection::~LayerConnection() {
  SharedDtor();
}

void LayerConnection::SharedDtor() {
  if (this != default_instance_) {
    delete layer_;
  }
}

void LayerConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerConnection_descriptor_;
}

const LayerConnection& LayerConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

LayerConnection* LayerConnection::default_instance_ = NULL;

LayerConnection* LayerConnection::New() const {
  return new LayerConnection;
}

void LayerConnection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_layer()) {
      if (layer_ != NULL) layer_->::caffepro::LayerParameter::Clear();
    }
  }
  bottom_.Clear();
  top_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LayerConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffepro.LayerParameter layer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bottom;
        break;
      }
      
      // repeated string bottom = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bottom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bottom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bottom(0).data(), this->bottom(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bottom;
        if (input->ExpectTag(26)) goto parse_top;
        break;
      }
      
      // repeated string top = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_top:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_top()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->top(0).data(), this->top(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_top;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LayerConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .caffepro.LayerParameter layer = 1;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->layer(), output);
  }
  
  // repeated string bottom = 2;
  for (int i = 0; i < this->bottom_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->bottom(i).data(), this->bottom(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bottom(i), output);
  }
  
  // repeated string top = 3;
  for (int i = 0; i < this->top_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->top(i).data(), this->top(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->top(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LayerConnection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .caffepro.LayerParameter layer = 1;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->layer(), target);
  }
  
  // repeated string bottom = 2;
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->bottom(i), target);
  }
  
  // repeated string top = 3;
  for (int i = 0; i < this->top_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->top(i).data(), this->top(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->top(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LayerConnection::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffepro.LayerParameter layer = 1;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layer());
    }
    
  }
  // repeated string bottom = 2;
  total_size += 1 * this->bottom_size();
  for (int i = 0; i < this->bottom_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bottom(i));
  }
  
  // repeated string top = 3;
  total_size += 1 * this->top_size();
  for (int i = 0; i < this->top_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->top(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerConnection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LayerConnection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LayerConnection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LayerConnection::MergeFrom(const LayerConnection& from) {
  GOOGLE_CHECK_NE(&from, this);
  bottom_.MergeFrom(from.bottom_);
  top_.MergeFrom(from.top_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer()) {
      mutable_layer()->::caffepro::LayerParameter::MergeFrom(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LayerConnection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerConnection::CopyFrom(const LayerConnection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerConnection::IsInitialized() const {
  
  if (has_layer()) {
    if (!this->layer().IsInitialized()) return false;
  }
  return true;
}

void LayerConnection::Swap(LayerConnection* other) {
  if (other != this) {
    std::swap(layer_, other->layer_);
    bottom_.Swap(&other->bottom_);
    top_.Swap(&other->top_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LayerConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayerConnection_descriptor_;
  metadata.reflection = LayerConnection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetParameter::kNameFieldNumber;
const int NetParameter::kLayersFieldNumber;
const int NetParameter::kInputFieldNumber;
const int NetParameter::kInputDimFieldNumber;
const int NetParameter::kForceBackwardFieldNumber;
const int NetParameter::kConfigFileFieldNumber;
const int NetParameter::kDataProviderNameFieldNumber;
#endif  // !_MSC_VER

NetParameter::NetParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetParameter::InitAsDefaultInstance() {
}

NetParameter::NetParameter(const NetParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetParameter::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  force_backward_ = false;
  config_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_provider_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetParameter::~NetParameter() {
  SharedDtor();
}

void NetParameter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (config_file_ != &::google::protobuf::internal::kEmptyString) {
    delete config_file_;
  }
  if (data_provider_name_ != &::google::protobuf::internal::kEmptyString) {
    delete data_provider_name_;
  }
  if (this != default_instance_) {
  }
}

void NetParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetParameter_descriptor_;
}

const NetParameter& NetParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

NetParameter* NetParameter::default_instance_ = NULL;

NetParameter* NetParameter::New() const {
  return new NetParameter;
}

void NetParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    force_backward_ = false;
    if (has_config_file()) {
      if (config_file_ != &::google::protobuf::internal::kEmptyString) {
        config_file_->clear();
      }
    }
    if (has_data_provider_name()) {
      if (data_provider_name_ != &::google::protobuf::internal::kEmptyString) {
        data_provider_name_->clear();
      }
    }
  }
  layers_.Clear();
  input_.Clear();
  input_dim_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_layers;
        break;
      }
      
      // repeated .caffepro.LayerConnection layers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_layers;
        if (input->ExpectTag(26)) goto parse_input;
        break;
      }
      
      // repeated string input = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->input(0).data(), this->input(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_input;
        if (input->ExpectTag(32)) goto parse_input_dim;
        break;
      }
      
      // repeated int32 input_dim = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_input_dim())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_input_dim())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_input_dim;
        if (input->ExpectTag(40)) goto parse_force_backward;
        break;
      }
      
      // optional bool force_backward = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force_backward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_backward_)));
          set_has_force_backward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_config_file;
        break;
      }
      
      // optional string config_file = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->config_file().data(), this->config_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_data_provider_name;
        break;
      }
      
      // optional string data_provider_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_provider_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_provider_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_provider_name().data(), this->data_provider_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // repeated .caffepro.LayerConnection layers = 2;
  for (int i = 0; i < this->layers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->layers(i), output);
  }
  
  // repeated string input = 3;
  for (int i = 0; i < this->input_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->input(i).data(), this->input(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->input(i), output);
  }
  
  // repeated int32 input_dim = 4;
  for (int i = 0; i < this->input_dim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->input_dim(i), output);
  }
  
  // optional bool force_backward = 5 [default = false];
  if (has_force_backward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->force_backward(), output);
  }
  
  // optional string config_file = 6;
  if (has_config_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config_file().data(), this->config_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->config_file(), output);
  }
  
  // optional string data_provider_name = 7;
  if (has_data_provider_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_provider_name().data(), this->data_provider_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->data_provider_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // repeated .caffepro.LayerConnection layers = 2;
  for (int i = 0; i < this->layers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->layers(i), target);
  }
  
  // repeated string input = 3;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input(i).data(), this->input(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->input(i), target);
  }
  
  // repeated int32 input_dim = 4;
  for (int i = 0; i < this->input_dim_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->input_dim(i), target);
  }
  
  // optional bool force_backward = 5 [default = false];
  if (has_force_backward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->force_backward(), target);
  }
  
  // optional string config_file = 6;
  if (has_config_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config_file().data(), this->config_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->config_file(), target);
  }
  
  // optional string data_provider_name = 7;
  if (has_data_provider_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_provider_name().data(), this->data_provider_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->data_provider_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional bool force_backward = 5 [default = false];
    if (has_force_backward()) {
      total_size += 1 + 1;
    }
    
    // optional string config_file = 6;
    if (has_config_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config_file());
    }
    
    // optional string data_provider_name = 7;
    if (has_data_provider_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_provider_name());
    }
    
  }
  // repeated .caffepro.LayerConnection layers = 2;
  total_size += 1 * this->layers_size();
  for (int i = 0; i < this->layers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layers(i));
  }
  
  // repeated string input = 3;
  total_size += 1 * this->input_size();
  for (int i = 0; i < this->input_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input(i));
  }
  
  // repeated int32 input_dim = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->input_dim_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->input_dim(i));
    }
    total_size += 1 * this->input_dim_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetParameter::MergeFrom(const NetParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  layers_.MergeFrom(from.layers_);
  input_.MergeFrom(from.input_);
  input_dim_.MergeFrom(from.input_dim_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_force_backward()) {
      set_force_backward(from.force_backward());
    }
    if (from.has_config_file()) {
      set_config_file(from.config_file());
    }
    if (from.has_data_provider_name()) {
      set_data_provider_name(from.data_provider_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParameter::CopyFrom(const NetParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParameter::IsInitialized() const {
  
  for (int i = 0; i < layers_size(); i++) {
    if (!this->layers(i).IsInitialized()) return false;
  }
  return true;
}

void NetParameter::Swap(NetParameter* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    layers_.Swap(&other->layers_);
    input_.Swap(&other->input_);
    input_dim_.Swap(&other->input_dim_);
    std::swap(force_backward_, other->force_backward_);
    std::swap(config_file_, other->config_file_);
    std::swap(data_provider_name_, other->data_provider_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetParameter_descriptor_;
  metadata.reflection = NetParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SolverParameter::kTrainNetFieldNumber;
const int SolverParameter::kTestNetFieldNumber;
const int SolverParameter::kTestIterFieldNumber;
const int SolverParameter::kTestIntervalFieldNumber;
const int SolverParameter::kBaseLrFieldNumber;
const int SolverParameter::kDisplayFieldNumber;
const int SolverParameter::kMaxIterFieldNumber;
const int SolverParameter::kLrPolicyFieldNumber;
const int SolverParameter::kGammaFieldNumber;
const int SolverParameter::kPowerFieldNumber;
const int SolverParameter::kMomentumFieldNumber;
const int SolverParameter::kWeightDecayFieldNumber;
const int SolverParameter::kStepsizeFieldNumber;
const int SolverParameter::kSnapshotFieldNumber;
const int SolverParameter::kSnapshotPrefixFieldNumber;
const int SolverParameter::kSnapshotDiffFieldNumber;
const int SolverParameter::kSolverModeFieldNumber;
const int SolverParameter::kDeviceIdFieldNumber;
const int SolverParameter::kVstepLrFieldNumber;
const int SolverParameter::kVstepSizeFieldNumber;
const int SolverParameter::kNumThreadsFieldNumber;
const int SolverParameter::kTrainPrimaryOutputIndexFieldNumber;
const int SolverParameter::kTestPrimaryOutputIndexFieldNumber;
const int SolverParameter::kUpdateIntervalFieldNumber;
const int SolverParameter::kOhemNetFieldNumber;
const int SolverParameter::kDumpIntervalFieldNumber;
const int SolverParameter::kSimUpdateIntervalFieldNumber;
const int SolverParameter::kDataSplitFieldNumber;
const int SolverParameter::kBmufMethodFieldNumber;
const int SolverParameter::kBmufLrFieldNumber;
const int SolverParameter::kBmufMomentumFieldNumber;
const int SolverParameter::kBmufIntervalFieldNumber;
#endif  // !_MSC_VER

SolverParameter::SolverParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SolverParameter::InitAsDefaultInstance() {
}

SolverParameter::SolverParameter(const SolverParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SolverParameter::SharedCtor() {
  _cached_size_ = 0;
  train_net_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  test_net_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  test_iter_ = 0;
  test_interval_ = 0;
  base_lr_ = 0;
  display_ = 0;
  max_iter_ = 0;
  lr_policy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gamma_ = 0;
  power_ = 0;
  momentum_ = 0;
  weight_decay_ = 0;
  stepsize_ = 0;
  snapshot_ = 0;
  snapshot_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  snapshot_diff_ = false;
  solver_mode_ = 1;
  device_id_ = 0;
  num_threads_ = 0;
  train_primary_output_index_ = 0;
  test_primary_output_index_ = 0;
  update_interval_ = 1;
  ohem_net_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dump_interval_ = 0;
  sim_update_interval_ = 1;
  data_split_ = false;
  bmuf_method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bmuf_lr_ = 1;
  bmuf_momentum_ = 0;
  bmuf_interval_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SolverParameter::~SolverParameter() {
  SharedDtor();
}

void SolverParameter::SharedDtor() {
  if (train_net_ != &::google::protobuf::internal::kEmptyString) {
    delete train_net_;
  }
  if (test_net_ != &::google::protobuf::internal::kEmptyString) {
    delete test_net_;
  }
  if (lr_policy_ != &::google::protobuf::internal::kEmptyString) {
    delete lr_policy_;
  }
  if (snapshot_prefix_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshot_prefix_;
  }
  if (ohem_net_ != &::google::protobuf::internal::kEmptyString) {
    delete ohem_net_;
  }
  if (bmuf_method_ != &::google::protobuf::internal::kEmptyString) {
    delete bmuf_method_;
  }
  if (this != default_instance_) {
  }
}

void SolverParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverParameter_descriptor_;
}

const SolverParameter& SolverParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

SolverParameter* SolverParameter::default_instance_ = NULL;

SolverParameter* SolverParameter::New() const {
  return new SolverParameter;
}

void SolverParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_train_net()) {
      if (train_net_ != &::google::protobuf::internal::kEmptyString) {
        train_net_->clear();
      }
    }
    if (has_test_net()) {
      if (test_net_ != &::google::protobuf::internal::kEmptyString) {
        test_net_->clear();
      }
    }
    test_iter_ = 0;
    test_interval_ = 0;
    base_lr_ = 0;
    display_ = 0;
    max_iter_ = 0;
    if (has_lr_policy()) {
      if (lr_policy_ != &::google::protobuf::internal::kEmptyString) {
        lr_policy_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gamma_ = 0;
    power_ = 0;
    momentum_ = 0;
    weight_decay_ = 0;
    stepsize_ = 0;
    snapshot_ = 0;
    if (has_snapshot_prefix()) {
      if (snapshot_prefix_ != &::google::protobuf::internal::kEmptyString) {
        snapshot_prefix_->clear();
      }
    }
    snapshot_diff_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    solver_mode_ = 1;
    device_id_ = 0;
    num_threads_ = 0;
    train_primary_output_index_ = 0;
    test_primary_output_index_ = 0;
    update_interval_ = 1;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_ohem_net()) {
      if (ohem_net_ != &::google::protobuf::internal::kEmptyString) {
        ohem_net_->clear();
      }
    }
    dump_interval_ = 0;
    sim_update_interval_ = 1;
    data_split_ = false;
    if (has_bmuf_method()) {
      if (bmuf_method_ != &::google::protobuf::internal::kEmptyString) {
        bmuf_method_->clear();
      }
    }
    bmuf_lr_ = 1;
    bmuf_momentum_ = 0;
    bmuf_interval_ = 1;
  }
  vstep_lr_.Clear();
  vstep_size_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SolverParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string train_net = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_train_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->train_net().data(), this->train_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_test_net;
        break;
      }
      
      // optional string test_net = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_test_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->test_net().data(), this->test_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_test_iter;
        break;
      }
      
      // optional int32 test_iter = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_test_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_iter_)));
          set_has_test_iter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_test_interval;
        break;
      }
      
      // optional int32 test_interval = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_test_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_interval_)));
          set_has_test_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_base_lr;
        break;
      }
      
      // optional float base_lr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_base_lr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_lr_)));
          set_has_base_lr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_display;
        break;
      }
      
      // optional int32 display = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_)));
          set_has_display();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_max_iter;
        break;
      }
      
      // optional int32 max_iter = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iter_)));
          set_has_max_iter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_lr_policy;
        break;
      }
      
      // optional string lr_policy = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lr_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lr_policy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lr_policy().data(), this->lr_policy().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_gamma;
        break;
      }
      
      // optional float gamma = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
          set_has_gamma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_power;
        break;
      }
      
      // optional float power = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_momentum;
        break;
      }
      
      // optional float momentum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_momentum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_)));
          set_has_momentum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_weight_decay;
        break;
      }
      
      // optional float weight_decay = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weight_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_decay_)));
          set_has_weight_decay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_stepsize;
        break;
      }
      
      // optional int32 stepsize = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stepsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stepsize_)));
          set_has_stepsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_snapshot;
        break;
      }
      
      // optional int32 snapshot = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_snapshot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snapshot_)));
          set_has_snapshot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_snapshot_prefix;
        break;
      }
      
      // optional string snapshot_prefix = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snapshot_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapshot_prefix().data(), this->snapshot_prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_snapshot_diff;
        break;
      }
      
      // optional bool snapshot_diff = 16 [default = false];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_snapshot_diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &snapshot_diff_)));
          set_has_snapshot_diff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_solver_mode;
        break;
      }
      
      // optional int32 solver_mode = 17 [default = 1];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_solver_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &solver_mode_)));
          set_has_solver_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_device_id;
        break;
      }
      
      // optional int32 device_id = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_vstep_lr;
        break;
      }
      
      // repeated float vstep_lr = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vstep_lr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 157, input, this->mutable_vstep_lr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_vstep_lr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_vstep_lr;
        if (input->ExpectTag(160)) goto parse_vstep_size;
        break;
      }
      
      // repeated int32 vstep_size = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vstep_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_vstep_size())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vstep_size())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_vstep_size;
        if (input->ExpectTag(168)) goto parse_num_threads;
        break;
      }
      
      // optional int32 num_threads = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_threads_)));
          set_has_num_threads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_train_primary_output_index;
        break;
      }
      
      // optional int32 train_primary_output_index = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_primary_output_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_primary_output_index_)));
          set_has_train_primary_output_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_test_primary_output_index;
        break;
      }
      
      // optional int32 test_primary_output_index = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_test_primary_output_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_primary_output_index_)));
          set_has_test_primary_output_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_update_interval;
        break;
      }
      
      // optional int32 update_interval = 24 [default = 1];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_interval_)));
          set_has_update_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_ohem_net;
        break;
      }
      
      // optional string ohem_net = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ohem_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ohem_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ohem_net().data(), this->ohem_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_dump_interval;
        break;
      }
      
      // optional int32 dump_interval = 26 [default = 0];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dump_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dump_interval_)));
          set_has_dump_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_sim_update_interval;
        break;
      }
      
      // optional int32 sim_update_interval = 27 [default = 1];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sim_update_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sim_update_interval_)));
          set_has_sim_update_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_data_split;
        break;
      }
      
      // optional bool data_split = 28 [default = false];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_split:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &data_split_)));
          set_has_data_split();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_bmuf_method;
        break;
      }
      
      // optional string bmuf_method = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bmuf_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bmuf_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bmuf_method().data(), this->bmuf_method().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(245)) goto parse_bmuf_lr;
        break;
      }
      
      // optional float bmuf_lr = 30 [default = 1];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bmuf_lr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bmuf_lr_)));
          set_has_bmuf_lr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(253)) goto parse_bmuf_momentum;
        break;
      }
      
      // optional float bmuf_momentum = 31 [default = 0];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bmuf_momentum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bmuf_momentum_)));
          set_has_bmuf_momentum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_bmuf_interval;
        break;
      }
      
      // optional int32 bmuf_interval = 32 [default = 1];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bmuf_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bmuf_interval_)));
          set_has_bmuf_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SolverParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string train_net = 1;
  if (has_train_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->train_net().data(), this->train_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->train_net(), output);
  }
  
  // optional string test_net = 2;
  if (has_test_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test_net().data(), this->test_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->test_net(), output);
  }
  
  // optional int32 test_iter = 3 [default = 0];
  if (has_test_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->test_iter(), output);
  }
  
  // optional int32 test_interval = 4 [default = 0];
  if (has_test_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->test_interval(), output);
  }
  
  // optional float base_lr = 5;
  if (has_base_lr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->base_lr(), output);
  }
  
  // optional int32 display = 6;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->display(), output);
  }
  
  // optional int32 max_iter = 7;
  if (has_max_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_iter(), output);
  }
  
  // optional string lr_policy = 8;
  if (has_lr_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lr_policy().data(), this->lr_policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->lr_policy(), output);
  }
  
  // optional float gamma = 9;
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->gamma(), output);
  }
  
  // optional float power = 10;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->power(), output);
  }
  
  // optional float momentum = 11;
  if (has_momentum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->momentum(), output);
  }
  
  // optional float weight_decay = 12;
  if (has_weight_decay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->weight_decay(), output);
  }
  
  // optional int32 stepsize = 13;
  if (has_stepsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->stepsize(), output);
  }
  
  // optional int32 snapshot = 14 [default = 0];
  if (has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->snapshot(), output);
  }
  
  // optional string snapshot_prefix = 15;
  if (has_snapshot_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshot_prefix().data(), this->snapshot_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->snapshot_prefix(), output);
  }
  
  // optional bool snapshot_diff = 16 [default = false];
  if (has_snapshot_diff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->snapshot_diff(), output);
  }
  
  // optional int32 solver_mode = 17 [default = 1];
  if (has_solver_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->solver_mode(), output);
  }
  
  // optional int32 device_id = 18 [default = 0];
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->device_id(), output);
  }
  
  // repeated float vstep_lr = 19;
  for (int i = 0; i < this->vstep_lr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      19, this->vstep_lr(i), output);
  }
  
  // repeated int32 vstep_size = 20;
  for (int i = 0; i < this->vstep_size_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->vstep_size(i), output);
  }
  
  // optional int32 num_threads = 21 [default = 0];
  if (has_num_threads()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->num_threads(), output);
  }
  
  // optional int32 train_primary_output_index = 22 [default = 0];
  if (has_train_primary_output_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->train_primary_output_index(), output);
  }
  
  // optional int32 test_primary_output_index = 23 [default = 0];
  if (has_test_primary_output_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->test_primary_output_index(), output);
  }
  
  // optional int32 update_interval = 24 [default = 1];
  if (has_update_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->update_interval(), output);
  }
  
  // optional string ohem_net = 25;
  if (has_ohem_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ohem_net().data(), this->ohem_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->ohem_net(), output);
  }
  
  // optional int32 dump_interval = 26 [default = 0];
  if (has_dump_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->dump_interval(), output);
  }
  
  // optional int32 sim_update_interval = 27 [default = 1];
  if (has_sim_update_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->sim_update_interval(), output);
  }
  
  // optional bool data_split = 28 [default = false];
  if (has_data_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->data_split(), output);
  }
  
  // optional string bmuf_method = 29;
  if (has_bmuf_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bmuf_method().data(), this->bmuf_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->bmuf_method(), output);
  }
  
  // optional float bmuf_lr = 30 [default = 1];
  if (has_bmuf_lr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->bmuf_lr(), output);
  }
  
  // optional float bmuf_momentum = 31 [default = 0];
  if (has_bmuf_momentum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->bmuf_momentum(), output);
  }
  
  // optional int32 bmuf_interval = 32 [default = 1];
  if (has_bmuf_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->bmuf_interval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SolverParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string train_net = 1;
  if (has_train_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->train_net().data(), this->train_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->train_net(), target);
  }
  
  // optional string test_net = 2;
  if (has_test_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test_net().data(), this->test_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->test_net(), target);
  }
  
  // optional int32 test_iter = 3 [default = 0];
  if (has_test_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->test_iter(), target);
  }
  
  // optional int32 test_interval = 4 [default = 0];
  if (has_test_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->test_interval(), target);
  }
  
  // optional float base_lr = 5;
  if (has_base_lr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->base_lr(), target);
  }
  
  // optional int32 display = 6;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->display(), target);
  }
  
  // optional int32 max_iter = 7;
  if (has_max_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_iter(), target);
  }
  
  // optional string lr_policy = 8;
  if (has_lr_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lr_policy().data(), this->lr_policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->lr_policy(), target);
  }
  
  // optional float gamma = 9;
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->gamma(), target);
  }
  
  // optional float power = 10;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->power(), target);
  }
  
  // optional float momentum = 11;
  if (has_momentum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->momentum(), target);
  }
  
  // optional float weight_decay = 12;
  if (has_weight_decay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->weight_decay(), target);
  }
  
  // optional int32 stepsize = 13;
  if (has_stepsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->stepsize(), target);
  }
  
  // optional int32 snapshot = 14 [default = 0];
  if (has_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->snapshot(), target);
  }
  
  // optional string snapshot_prefix = 15;
  if (has_snapshot_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshot_prefix().data(), this->snapshot_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->snapshot_prefix(), target);
  }
  
  // optional bool snapshot_diff = 16 [default = false];
  if (has_snapshot_diff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->snapshot_diff(), target);
  }
  
  // optional int32 solver_mode = 17 [default = 1];
  if (has_solver_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->solver_mode(), target);
  }
  
  // optional int32 device_id = 18 [default = 0];
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->device_id(), target);
  }
  
  // repeated float vstep_lr = 19;
  for (int i = 0; i < this->vstep_lr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(19, this->vstep_lr(i), target);
  }
  
  // repeated int32 vstep_size = 20;
  for (int i = 0; i < this->vstep_size_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->vstep_size(i), target);
  }
  
  // optional int32 num_threads = 21 [default = 0];
  if (has_num_threads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->num_threads(), target);
  }
  
  // optional int32 train_primary_output_index = 22 [default = 0];
  if (has_train_primary_output_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->train_primary_output_index(), target);
  }
  
  // optional int32 test_primary_output_index = 23 [default = 0];
  if (has_test_primary_output_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->test_primary_output_index(), target);
  }
  
  // optional int32 update_interval = 24 [default = 1];
  if (has_update_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->update_interval(), target);
  }
  
  // optional string ohem_net = 25;
  if (has_ohem_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ohem_net().data(), this->ohem_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->ohem_net(), target);
  }
  
  // optional int32 dump_interval = 26 [default = 0];
  if (has_dump_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->dump_interval(), target);
  }
  
  // optional int32 sim_update_interval = 27 [default = 1];
  if (has_sim_update_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->sim_update_interval(), target);
  }
  
  // optional bool data_split = 28 [default = false];
  if (has_data_split()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->data_split(), target);
  }
  
  // optional string bmuf_method = 29;
  if (has_bmuf_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bmuf_method().data(), this->bmuf_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->bmuf_method(), target);
  }
  
  // optional float bmuf_lr = 30 [default = 1];
  if (has_bmuf_lr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->bmuf_lr(), target);
  }
  
  // optional float bmuf_momentum = 31 [default = 0];
  if (has_bmuf_momentum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->bmuf_momentum(), target);
  }
  
  // optional int32 bmuf_interval = 32 [default = 1];
  if (has_bmuf_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->bmuf_interval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SolverParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string train_net = 1;
    if (has_train_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->train_net());
    }
    
    // optional string test_net = 2;
    if (has_test_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test_net());
    }
    
    // optional int32 test_iter = 3 [default = 0];
    if (has_test_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_iter());
    }
    
    // optional int32 test_interval = 4 [default = 0];
    if (has_test_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_interval());
    }
    
    // optional float base_lr = 5;
    if (has_base_lr()) {
      total_size += 1 + 4;
    }
    
    // optional int32 display = 6;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display());
    }
    
    // optional int32 max_iter = 7;
    if (has_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iter());
    }
    
    // optional string lr_policy = 8;
    if (has_lr_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lr_policy());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float gamma = 9;
    if (has_gamma()) {
      total_size += 1 + 4;
    }
    
    // optional float power = 10;
    if (has_power()) {
      total_size += 1 + 4;
    }
    
    // optional float momentum = 11;
    if (has_momentum()) {
      total_size += 1 + 4;
    }
    
    // optional float weight_decay = 12;
    if (has_weight_decay()) {
      total_size += 1 + 4;
    }
    
    // optional int32 stepsize = 13;
    if (has_stepsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stepsize());
    }
    
    // optional int32 snapshot = 14 [default = 0];
    if (has_snapshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snapshot());
    }
    
    // optional string snapshot_prefix = 15;
    if (has_snapshot_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapshot_prefix());
    }
    
    // optional bool snapshot_diff = 16 [default = false];
    if (has_snapshot_diff()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 solver_mode = 17 [default = 1];
    if (has_solver_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->solver_mode());
    }
    
    // optional int32 device_id = 18 [default = 0];
    if (has_device_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_id());
    }
    
    // optional int32 num_threads = 21 [default = 0];
    if (has_num_threads()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_threads());
    }
    
    // optional int32 train_primary_output_index = 22 [default = 0];
    if (has_train_primary_output_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train_primary_output_index());
    }
    
    // optional int32 test_primary_output_index = 23 [default = 0];
    if (has_test_primary_output_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_primary_output_index());
    }
    
    // optional int32 update_interval = 24 [default = 1];
    if (has_update_interval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_interval());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string ohem_net = 25;
    if (has_ohem_net()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ohem_net());
    }
    
    // optional int32 dump_interval = 26 [default = 0];
    if (has_dump_interval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dump_interval());
    }
    
    // optional int32 sim_update_interval = 27 [default = 1];
    if (has_sim_update_interval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sim_update_interval());
    }
    
    // optional bool data_split = 28 [default = false];
    if (has_data_split()) {
      total_size += 2 + 1;
    }
    
    // optional string bmuf_method = 29;
    if (has_bmuf_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bmuf_method());
    }
    
    // optional float bmuf_lr = 30 [default = 1];
    if (has_bmuf_lr()) {
      total_size += 2 + 4;
    }
    
    // optional float bmuf_momentum = 31 [default = 0];
    if (has_bmuf_momentum()) {
      total_size += 2 + 4;
    }
    
    // optional int32 bmuf_interval = 32 [default = 1];
    if (has_bmuf_interval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bmuf_interval());
    }
    
  }
  // repeated float vstep_lr = 19;
  {
    int data_size = 0;
    data_size = 4 * this->vstep_lr_size();
    total_size += 2 * this->vstep_lr_size() + data_size;
  }
  
  // repeated int32 vstep_size = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->vstep_size_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vstep_size(i));
    }
    total_size += 2 * this->vstep_size_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SolverParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SolverParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SolverParameter::MergeFrom(const SolverParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  vstep_lr_.MergeFrom(from.vstep_lr_);
  vstep_size_.MergeFrom(from.vstep_size_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_train_net()) {
      set_train_net(from.train_net());
    }
    if (from.has_test_net()) {
      set_test_net(from.test_net());
    }
    if (from.has_test_iter()) {
      set_test_iter(from.test_iter());
    }
    if (from.has_test_interval()) {
      set_test_interval(from.test_interval());
    }
    if (from.has_base_lr()) {
      set_base_lr(from.base_lr());
    }
    if (from.has_display()) {
      set_display(from.display());
    }
    if (from.has_max_iter()) {
      set_max_iter(from.max_iter());
    }
    if (from.has_lr_policy()) {
      set_lr_policy(from.lr_policy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_momentum()) {
      set_momentum(from.momentum());
    }
    if (from.has_weight_decay()) {
      set_weight_decay(from.weight_decay());
    }
    if (from.has_stepsize()) {
      set_stepsize(from.stepsize());
    }
    if (from.has_snapshot()) {
      set_snapshot(from.snapshot());
    }
    if (from.has_snapshot_prefix()) {
      set_snapshot_prefix(from.snapshot_prefix());
    }
    if (from.has_snapshot_diff()) {
      set_snapshot_diff(from.snapshot_diff());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_solver_mode()) {
      set_solver_mode(from.solver_mode());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_num_threads()) {
      set_num_threads(from.num_threads());
    }
    if (from.has_train_primary_output_index()) {
      set_train_primary_output_index(from.train_primary_output_index());
    }
    if (from.has_test_primary_output_index()) {
      set_test_primary_output_index(from.test_primary_output_index());
    }
    if (from.has_update_interval()) {
      set_update_interval(from.update_interval());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ohem_net()) {
      set_ohem_net(from.ohem_net());
    }
    if (from.has_dump_interval()) {
      set_dump_interval(from.dump_interval());
    }
    if (from.has_sim_update_interval()) {
      set_sim_update_interval(from.sim_update_interval());
    }
    if (from.has_data_split()) {
      set_data_split(from.data_split());
    }
    if (from.has_bmuf_method()) {
      set_bmuf_method(from.bmuf_method());
    }
    if (from.has_bmuf_lr()) {
      set_bmuf_lr(from.bmuf_lr());
    }
    if (from.has_bmuf_momentum()) {
      set_bmuf_momentum(from.bmuf_momentum());
    }
    if (from.has_bmuf_interval()) {
      set_bmuf_interval(from.bmuf_interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SolverParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverParameter::CopyFrom(const SolverParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverParameter::IsInitialized() const {
  
  return true;
}

void SolverParameter::Swap(SolverParameter* other) {
  if (other != this) {
    std::swap(train_net_, other->train_net_);
    std::swap(test_net_, other->test_net_);
    std::swap(test_iter_, other->test_iter_);
    std::swap(test_interval_, other->test_interval_);
    std::swap(base_lr_, other->base_lr_);
    std::swap(display_, other->display_);
    std::swap(max_iter_, other->max_iter_);
    std::swap(lr_policy_, other->lr_policy_);
    std::swap(gamma_, other->gamma_);
    std::swap(power_, other->power_);
    std::swap(momentum_, other->momentum_);
    std::swap(weight_decay_, other->weight_decay_);
    std::swap(stepsize_, other->stepsize_);
    std::swap(snapshot_, other->snapshot_);
    std::swap(snapshot_prefix_, other->snapshot_prefix_);
    std::swap(snapshot_diff_, other->snapshot_diff_);
    std::swap(solver_mode_, other->solver_mode_);
    std::swap(device_id_, other->device_id_);
    vstep_lr_.Swap(&other->vstep_lr_);
    vstep_size_.Swap(&other->vstep_size_);
    std::swap(num_threads_, other->num_threads_);
    std::swap(train_primary_output_index_, other->train_primary_output_index_);
    std::swap(test_primary_output_index_, other->test_primary_output_index_);
    std::swap(update_interval_, other->update_interval_);
    std::swap(ohem_net_, other->ohem_net_);
    std::swap(dump_interval_, other->dump_interval_);
    std::swap(sim_update_interval_, other->sim_update_interval_);
    std::swap(data_split_, other->data_split_);
    std::swap(bmuf_method_, other->bmuf_method_);
    std::swap(bmuf_lr_, other->bmuf_lr_);
    std::swap(bmuf_momentum_, other->bmuf_momentum_);
    std::swap(bmuf_interval_, other->bmuf_interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SolverParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SolverParameter_descriptor_;
  metadata.reflection = SolverParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SolverState::kIterFieldNumber;
const int SolverState::kLearnedNetFieldNumber;
const int SolverState::kHistoryFieldNumber;
#endif  // !_MSC_VER

SolverState::SolverState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SolverState::InitAsDefaultInstance() {
}

SolverState::SolverState(const SolverState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SolverState::SharedCtor() {
  _cached_size_ = 0;
  iter_ = 0;
  learned_net_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SolverState::~SolverState() {
  SharedDtor();
}

void SolverState::SharedDtor() {
  if (learned_net_ != &::google::protobuf::internal::kEmptyString) {
    delete learned_net_;
  }
  if (this != default_instance_) {
  }
}

void SolverState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverState_descriptor_;
}

const SolverState& SolverState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

SolverState* SolverState::default_instance_ = NULL;

SolverState* SolverState::New() const {
  return new SolverState;
}

void SolverState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iter_ = 0;
    if (has_learned_net()) {
      if (learned_net_ != &::google::protobuf::internal::kEmptyString) {
        learned_net_->clear();
      }
    }
  }
  history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SolverState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iter_)));
          set_has_iter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_learned_net;
        break;
      }
      
      // optional string learned_net = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_learned_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_learned_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->learned_net().data(), this->learned_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_history;
        break;
      }
      
      // repeated .caffepro.BlobProto history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SolverState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iter = 1;
  if (has_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iter(), output);
  }
  
  // optional string learned_net = 2;
  if (has_learned_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->learned_net().data(), this->learned_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->learned_net(), output);
  }
  
  // repeated .caffepro.BlobProto history = 3;
  for (int i = 0; i < this->history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->history(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SolverState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iter = 1;
  if (has_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iter(), target);
  }
  
  // optional string learned_net = 2;
  if (has_learned_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->learned_net().data(), this->learned_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->learned_net(), target);
  }
  
  // repeated .caffepro.BlobProto history = 3;
  for (int i = 0; i < this->history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->history(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SolverState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iter = 1;
    if (has_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iter());
    }
    
    // optional string learned_net = 2;
    if (has_learned_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->learned_net());
    }
    
  }
  // repeated .caffepro.BlobProto history = 3;
  total_size += 1 * this->history_size();
  for (int i = 0; i < this->history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SolverState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SolverState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SolverState::MergeFrom(const SolverState& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_.MergeFrom(from.history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iter()) {
      set_iter(from.iter());
    }
    if (from.has_learned_net()) {
      set_learned_net(from.learned_net());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SolverState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverState::CopyFrom(const SolverState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverState::IsInitialized() const {
  
  return true;
}

void SolverState::Swap(SolverState* other) {
  if (other != this) {
    std::swap(iter_, other->iter_);
    std::swap(learned_net_, other->learned_net_);
    history_.Swap(&other->history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SolverState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SolverState_descriptor_;
  metadata.reflection = SolverState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScaleBiasParameter::kWeightFillerFieldNumber;
const int ScaleBiasParameter::kBiasFillerFieldNumber;
#endif  // !_MSC_VER

ScaleBiasParameter::ScaleBiasParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScaleBiasParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffepro::FillerParameter*>(&::caffepro::FillerParameter::default_instance());
  bias_filler_ = const_cast< ::caffepro::FillerParameter*>(&::caffepro::FillerParameter::default_instance());
}

ScaleBiasParameter::ScaleBiasParameter(const ScaleBiasParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScaleBiasParameter::SharedCtor() {
  _cached_size_ = 0;
  weight_filler_ = NULL;
  bias_filler_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScaleBiasParameter::~ScaleBiasParameter() {
  SharedDtor();
}

void ScaleBiasParameter::SharedDtor() {
  if (this != default_instance_) {
    delete weight_filler_;
    delete bias_filler_;
  }
}

void ScaleBiasParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScaleBiasParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScaleBiasParameter_descriptor_;
}

const ScaleBiasParameter& ScaleBiasParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

ScaleBiasParameter* ScaleBiasParameter::default_instance_ = NULL;

ScaleBiasParameter* ScaleBiasParameter::New() const {
  return new ScaleBiasParameter;
}

void ScaleBiasParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffepro::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffepro::FillerParameter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScaleBiasParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffepro.FillerParameter weight_filler = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bias_filler;
        break;
      }
      
      // optional .caffepro.FillerParameter bias_filler = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScaleBiasParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .caffepro.FillerParameter weight_filler = 1;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->weight_filler(), output);
  }
  
  // optional .caffepro.FillerParameter bias_filler = 2;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bias_filler(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScaleBiasParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .caffepro.FillerParameter weight_filler = 1;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->weight_filler(), target);
  }
  
  // optional .caffepro.FillerParameter bias_filler = 2;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bias_filler(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScaleBiasParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffepro.FillerParameter weight_filler = 1;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weight_filler());
    }
    
    // optional .caffepro.FillerParameter bias_filler = 2;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bias_filler());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScaleBiasParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScaleBiasParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScaleBiasParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScaleBiasParameter::MergeFrom(const ScaleBiasParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffepro::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffepro::FillerParameter::MergeFrom(from.bias_filler());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScaleBiasParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScaleBiasParameter::CopyFrom(const ScaleBiasParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScaleBiasParameter::IsInitialized() const {
  
  return true;
}

void ScaleBiasParameter::Swap(ScaleBiasParameter* other) {
  if (other != this) {
    std::swap(weight_filler_, other->weight_filler_);
    std::swap(bias_filler_, other->bias_filler_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScaleBiasParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScaleBiasParameter_descriptor_;
  metadata.reflection = ScaleBiasParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CropParameter_CropType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CropParameter_CropType_descriptor_;
}
bool CropParameter_CropType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CropParameter_CropType CropParameter::ViewDense;
const CropParameter_CropType CropParameter::View10;
const CropParameter_CropType CropParameter::CropType_MIN;
const CropParameter_CropType CropParameter::CropType_MAX;
const int CropParameter::CropType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CropParameter::kCropTypeFieldNumber;
const int CropParameter::kStrideFieldNumber;
const int CropParameter::kCropWidthFieldNumber;
const int CropParameter::kCropHeightFieldNumber;
#endif  // !_MSC_VER

CropParameter::CropParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CropParameter::InitAsDefaultInstance() {
}

CropParameter::CropParameter(const CropParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CropParameter::SharedCtor() {
  _cached_size_ = 0;
  crop_type_ = 0;
  stride_ = 1u;
  crop_width_ = 0u;
  crop_height_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CropParameter::~CropParameter() {
  SharedDtor();
}

void CropParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CropParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CropParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CropParameter_descriptor_;
}

const CropParameter& CropParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

CropParameter* CropParameter::default_instance_ = NULL;

CropParameter* CropParameter::New() const {
  return new CropParameter;
}

void CropParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    crop_type_ = 0;
    stride_ = 1u;
    crop_width_ = 0u;
    crop_height_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CropParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .caffepro.CropParameter.CropType crop_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffepro::CropParameter_CropType_IsValid(value)) {
            set_crop_type(static_cast< ::caffepro::CropParameter_CropType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stride;
        break;
      }
      
      // optional uint32 stride = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
          set_has_stride();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_crop_width;
        break;
      }
      
      // required uint32 crop_width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crop_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_width_)));
          set_has_crop_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_crop_height;
        break;
      }
      
      // required uint32 crop_height = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crop_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_height_)));
          set_has_crop_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CropParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .caffepro.CropParameter.CropType crop_type = 1;
  if (has_crop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->crop_type(), output);
  }
  
  // optional uint32 stride = 2 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stride(), output);
  }
  
  // required uint32 crop_width = 3;
  if (has_crop_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crop_width(), output);
  }
  
  // required uint32 crop_height = 4;
  if (has_crop_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crop_height(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CropParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .caffepro.CropParameter.CropType crop_type = 1;
  if (has_crop_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->crop_type(), target);
  }
  
  // optional uint32 stride = 2 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stride(), target);
  }
  
  // required uint32 crop_width = 3;
  if (has_crop_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crop_width(), target);
  }
  
  // required uint32 crop_height = 4;
  if (has_crop_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crop_height(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CropParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .caffepro.CropParameter.CropType crop_type = 1;
    if (has_crop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->crop_type());
    }
    
    // optional uint32 stride = 2 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride());
    }
    
    // required uint32 crop_width = 3;
    if (has_crop_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_width());
    }
    
    // required uint32 crop_height = 4;
    if (has_crop_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_height());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CropParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CropParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CropParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CropParameter::MergeFrom(const CropParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crop_type()) {
      set_crop_type(from.crop_type());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_crop_width()) {
      set_crop_width(from.crop_width());
    }
    if (from.has_crop_height()) {
      set_crop_height(from.crop_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CropParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CropParameter::CopyFrom(const CropParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CropParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  return true;
}

void CropParameter::Swap(CropParameter* other) {
  if (other != this) {
    std::swap(crop_type_, other->crop_type_);
    std::swap(stride_, other->stride_);
    std::swap(crop_width_, other->crop_width_);
    std::swap(crop_height_, other->crop_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CropParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CropParameter_descriptor_;
  metadata.reflection = CropParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReduceDimParameter_ReduceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReduceDimParameter_ReduceType_descriptor_;
}
bool ReduceDimParameter_ReduceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReduceDimParameter_ReduceType ReduceDimParameter::AVE;
const ReduceDimParameter_ReduceType ReduceDimParameter::SUM;
const ReduceDimParameter_ReduceType ReduceDimParameter::ReduceType_MIN;
const ReduceDimParameter_ReduceType ReduceDimParameter::ReduceType_MAX;
const int ReduceDimParameter::ReduceType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReduceDimParameter::kDimFieldNumber;
const int ReduceDimParameter::kGroupFieldNumber;
const int ReduceDimParameter::kReduceTypeFieldNumber;
#endif  // !_MSC_VER

ReduceDimParameter::ReduceDimParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReduceDimParameter::InitAsDefaultInstance() {
}

ReduceDimParameter::ReduceDimParameter(const ReduceDimParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReduceDimParameter::SharedCtor() {
  _cached_size_ = 0;
  dim_ = 0u;
  group_ = 1u;
  reduce_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReduceDimParameter::~ReduceDimParameter() {
  SharedDtor();
}

void ReduceDimParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReduceDimParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReduceDimParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReduceDimParameter_descriptor_;
}

const ReduceDimParameter& ReduceDimParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

ReduceDimParameter* ReduceDimParameter::default_instance_ = NULL;

ReduceDimParameter* ReduceDimParameter::New() const {
  return new ReduceDimParameter;
}

void ReduceDimParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dim_ = 0u;
    group_ = 1u;
    reduce_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReduceDimParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dim = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dim_)));
          set_has_dim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group;
        break;
      }
      
      // optional uint32 group = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reduce_type;
        break;
      }
      
      // required .caffepro.ReduceDimParameter.ReduceType reduce_type = 3 [default = AVE];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reduce_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffepro::ReduceDimParameter_ReduceType_IsValid(value)) {
            set_reduce_type(static_cast< ::caffepro::ReduceDimParameter_ReduceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReduceDimParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dim = 1;
  if (has_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dim(), output);
  }
  
  // optional uint32 group = 2 [default = 1];
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group(), output);
  }
  
  // required .caffepro.ReduceDimParameter.ReduceType reduce_type = 3 [default = AVE];
  if (has_reduce_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->reduce_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReduceDimParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dim = 1;
  if (has_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dim(), target);
  }
  
  // optional uint32 group = 2 [default = 1];
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group(), target);
  }
  
  // required .caffepro.ReduceDimParameter.ReduceType reduce_type = 3 [default = AVE];
  if (has_reduce_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->reduce_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReduceDimParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dim = 1;
    if (has_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dim());
    }
    
    // optional uint32 group = 2 [default = 1];
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }
    
    // required .caffepro.ReduceDimParameter.ReduceType reduce_type = 3 [default = AVE];
    if (has_reduce_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reduce_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReduceDimParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReduceDimParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReduceDimParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReduceDimParameter::MergeFrom(const ReduceDimParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dim()) {
      set_dim(from.dim());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_reduce_type()) {
      set_reduce_type(from.reduce_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReduceDimParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReduceDimParameter::CopyFrom(const ReduceDimParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReduceDimParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void ReduceDimParameter::Swap(ReduceDimParameter* other) {
  if (other != this) {
    std::swap(dim_, other->dim_);
    std::swap(group_, other->group_);
    std::swap(reduce_type_, other->reduce_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReduceDimParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReduceDimParameter_descriptor_;
  metadata.reflection = ReduceDimParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlipParameter::kKeepOriginalFieldNumber;
#endif  // !_MSC_VER

FlipParameter::FlipParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlipParameter::InitAsDefaultInstance() {
}

FlipParameter::FlipParameter(const FlipParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlipParameter::SharedCtor() {
  _cached_size_ = 0;
  keep_original_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlipParameter::~FlipParameter() {
  SharedDtor();
}

void FlipParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlipParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlipParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlipParameter_descriptor_;
}

const FlipParameter& FlipParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

FlipParameter* FlipParameter::default_instance_ = NULL;

FlipParameter* FlipParameter::New() const {
  return new FlipParameter;
}

void FlipParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    keep_original_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlipParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool keep_original = 1 [default = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_original_)));
          set_has_keep_original();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlipParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool keep_original = 1 [default = true];
  if (has_keep_original()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->keep_original(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlipParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool keep_original = 1 [default = true];
  if (has_keep_original()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->keep_original(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlipParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool keep_original = 1 [default = true];
    if (has_keep_original()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlipParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlipParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlipParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlipParameter::MergeFrom(const FlipParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keep_original()) {
      set_keep_original(from.keep_original());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlipParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlipParameter::CopyFrom(const FlipParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlipParameter::IsInitialized() const {
  
  return true;
}

void FlipParameter::Swap(FlipParameter* other) {
  if (other != this) {
    std::swap(keep_original_, other->keep_original_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlipParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlipParameter_descriptor_;
  metadata.reflection = FlipParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StepGateParameter::kInitValueFieldNumber;
const int StepGateParameter::kStepValueFieldNumber;
const int StepGateParameter::kMaxValueFieldNumber;
const int StepGateParameter::kKeepBackwardFieldNumber;
const int StepGateParameter::kKeepForwardFieldNumber;
const int StepGateParameter::kStartIterFieldNumber;
#endif  // !_MSC_VER

StepGateParameter::StepGateParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StepGateParameter::InitAsDefaultInstance() {
}

StepGateParameter::StepGateParameter(const StepGateParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StepGateParameter::SharedCtor() {
  _cached_size_ = 0;
  init_value_ = 0;
  step_value_ = 0;
  max_value_ = 0;
  keep_backward_ = false;
  keep_forward_ = false;
  start_iter_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StepGateParameter::~StepGateParameter() {
  SharedDtor();
}

void StepGateParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StepGateParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StepGateParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StepGateParameter_descriptor_;
}

const StepGateParameter& StepGateParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

StepGateParameter* StepGateParameter::default_instance_ = NULL;

StepGateParameter* StepGateParameter::New() const {
  return new StepGateParameter;
}

void StepGateParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    init_value_ = 0;
    step_value_ = 0;
    max_value_ = 0;
    keep_backward_ = false;
    keep_forward_ = false;
    start_iter_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StepGateParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float init_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &init_value_)));
          set_has_init_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_step_value;
        break;
      }
      
      // required float step_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_step_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_value_)));
          set_has_step_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_max_value;
        break;
      }
      
      // required float max_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_value_)));
          set_has_max_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_keep_backward;
        break;
      }
      
      // optional bool keep_backward = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keep_backward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_backward_)));
          set_has_keep_backward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_keep_forward;
        break;
      }
      
      // optional bool keep_forward = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keep_forward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_forward_)));
          set_has_keep_forward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_start_iter;
        break;
      }
      
      // optional uint32 start_iter = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_iter_)));
          set_has_start_iter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StepGateParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float init_value = 1;
  if (has_init_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->init_value(), output);
  }
  
  // required float step_value = 2;
  if (has_step_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->step_value(), output);
  }
  
  // required float max_value = 3;
  if (has_max_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_value(), output);
  }
  
  // optional bool keep_backward = 4 [default = false];
  if (has_keep_backward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->keep_backward(), output);
  }
  
  // optional bool keep_forward = 5 [default = false];
  if (has_keep_forward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->keep_forward(), output);
  }
  
  // optional uint32 start_iter = 6;
  if (has_start_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->start_iter(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StepGateParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float init_value = 1;
  if (has_init_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->init_value(), target);
  }
  
  // required float step_value = 2;
  if (has_step_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->step_value(), target);
  }
  
  // required float max_value = 3;
  if (has_max_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_value(), target);
  }
  
  // optional bool keep_backward = 4 [default = false];
  if (has_keep_backward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->keep_backward(), target);
  }
  
  // optional bool keep_forward = 5 [default = false];
  if (has_keep_forward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->keep_forward(), target);
  }
  
  // optional uint32 start_iter = 6;
  if (has_start_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->start_iter(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StepGateParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float init_value = 1;
    if (has_init_value()) {
      total_size += 1 + 4;
    }
    
    // required float step_value = 2;
    if (has_step_value()) {
      total_size += 1 + 4;
    }
    
    // required float max_value = 3;
    if (has_max_value()) {
      total_size += 1 + 4;
    }
    
    // optional bool keep_backward = 4 [default = false];
    if (has_keep_backward()) {
      total_size += 1 + 1;
    }
    
    // optional bool keep_forward = 5 [default = false];
    if (has_keep_forward()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 start_iter = 6;
    if (has_start_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_iter());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StepGateParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StepGateParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StepGateParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StepGateParameter::MergeFrom(const StepGateParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_init_value()) {
      set_init_value(from.init_value());
    }
    if (from.has_step_value()) {
      set_step_value(from.step_value());
    }
    if (from.has_max_value()) {
      set_max_value(from.max_value());
    }
    if (from.has_keep_backward()) {
      set_keep_backward(from.keep_backward());
    }
    if (from.has_keep_forward()) {
      set_keep_forward(from.keep_forward());
    }
    if (from.has_start_iter()) {
      set_start_iter(from.start_iter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StepGateParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepGateParameter::CopyFrom(const StepGateParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepGateParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void StepGateParameter::Swap(StepGateParameter* other) {
  if (other != this) {
    std::swap(init_value_, other->init_value_);
    std::swap(step_value_, other->step_value_);
    std::swap(max_value_, other->max_value_);
    std::swap(keep_backward_, other->keep_backward_);
    std::swap(keep_forward_, other->keep_forward_);
    std::swap(start_iter_, other->start_iter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StepGateParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StepGateParameter_descriptor_;
  metadata.reflection = StepGateParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HouseholderParameter::kSourceFieldNumber;
#endif  // !_MSC_VER

HouseholderParameter::HouseholderParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HouseholderParameter::InitAsDefaultInstance() {
}

HouseholderParameter::HouseholderParameter(const HouseholderParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HouseholderParameter::SharedCtor() {
  _cached_size_ = 0;
  source_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HouseholderParameter::~HouseholderParameter() {
  SharedDtor();
}

void HouseholderParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HouseholderParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HouseholderParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HouseholderParameter_descriptor_;
}

const HouseholderParameter& HouseholderParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

HouseholderParameter* HouseholderParameter::default_instance_ = NULL;

HouseholderParameter* HouseholderParameter::New() const {
  return new HouseholderParameter;
}

void HouseholderParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HouseholderParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 source = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HouseholderParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 source = 1 [default = 0];
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HouseholderParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 source = 1 [default = 0];
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->source(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HouseholderParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 source = 1 [default = 0];
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HouseholderParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HouseholderParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HouseholderParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HouseholderParameter::MergeFrom(const HouseholderParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HouseholderParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HouseholderParameter::CopyFrom(const HouseholderParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HouseholderParameter::IsInitialized() const {
  
  return true;
}

void HouseholderParameter::Swap(HouseholderParameter* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HouseholderParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HouseholderParameter_descriptor_;
  metadata.reflection = HouseholderParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* InstanceSampleParameter_SampleMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceSampleParameter_SampleMethod_descriptor_;
}
bool InstanceSampleParameter_SampleMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InstanceSampleParameter_SampleMethod InstanceSampleParameter::SEQ;
const InstanceSampleParameter_SampleMethod InstanceSampleParameter::RAND;
const InstanceSampleParameter_SampleMethod InstanceSampleParameter::SampleMethod_MIN;
const InstanceSampleParameter_SampleMethod InstanceSampleParameter::SampleMethod_MAX;
const int InstanceSampleParameter::SampleMethod_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int InstanceSampleParameter::kSampleMethodFieldNumber;
const int InstanceSampleParameter::kNumFieldNumber;
#endif  // !_MSC_VER

InstanceSampleParameter::InstanceSampleParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceSampleParameter::InitAsDefaultInstance() {
}

InstanceSampleParameter::InstanceSampleParameter(const InstanceSampleParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceSampleParameter::SharedCtor() {
  _cached_size_ = 0;
  sample_method_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceSampleParameter::~InstanceSampleParameter() {
  SharedDtor();
}

void InstanceSampleParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceSampleParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceSampleParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceSampleParameter_descriptor_;
}

const InstanceSampleParameter& InstanceSampleParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

InstanceSampleParameter* InstanceSampleParameter::default_instance_ = NULL;

InstanceSampleParameter* InstanceSampleParameter::New() const {
  return new InstanceSampleParameter;
}

void InstanceSampleParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sample_method_ = 0;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceSampleParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffepro.InstanceSampleParameter.SampleMethod sample_method = 1 [default = SEQ];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffepro::InstanceSampleParameter_SampleMethod_IsValid(value)) {
            set_sample_method(static_cast< ::caffepro::InstanceSampleParameter_SampleMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // required uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceSampleParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .caffepro.InstanceSampleParameter.SampleMethod sample_method = 1 [default = SEQ];
  if (has_sample_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sample_method(), output);
  }
  
  // required uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceSampleParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .caffepro.InstanceSampleParameter.SampleMethod sample_method = 1 [default = SEQ];
  if (has_sample_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->sample_method(), target);
  }
  
  // required uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceSampleParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffepro.InstanceSampleParameter.SampleMethod sample_method = 1 [default = SEQ];
    if (has_sample_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sample_method());
    }
    
    // required uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceSampleParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceSampleParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceSampleParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceSampleParameter::MergeFrom(const InstanceSampleParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sample_method()) {
      set_sample_method(from.sample_method());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceSampleParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceSampleParameter::CopyFrom(const InstanceSampleParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceSampleParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void InstanceSampleParameter::Swap(InstanceSampleParameter* other) {
  if (other != this) {
    std::swap(sample_method_, other->sample_method_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceSampleParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceSampleParameter_descriptor_;
  metadata.reflection = InstanceSampleParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatrixMulParameter::kTransAFieldNumber;
const int MatrixMulParameter::kTransBFieldNumber;
#endif  // !_MSC_VER

MatrixMulParameter::MatrixMulParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatrixMulParameter::InitAsDefaultInstance() {
}

MatrixMulParameter::MatrixMulParameter(const MatrixMulParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatrixMulParameter::SharedCtor() {
  _cached_size_ = 0;
  trans_a_ = false;
  trans_b_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatrixMulParameter::~MatrixMulParameter() {
  SharedDtor();
}

void MatrixMulParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatrixMulParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatrixMulParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatrixMulParameter_descriptor_;
}

const MatrixMulParameter& MatrixMulParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

MatrixMulParameter* MatrixMulParameter::default_instance_ = NULL;

MatrixMulParameter* MatrixMulParameter::New() const {
  return new MatrixMulParameter;
}

void MatrixMulParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trans_a_ = false;
    trans_b_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatrixMulParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool trans_A = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trans_a_)));
          set_has_trans_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trans_B;
        break;
      }
      
      // optional bool trans_B = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trans_B:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trans_b_)));
          set_has_trans_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatrixMulParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool trans_A = 1 [default = false];
  if (has_trans_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->trans_a(), output);
  }
  
  // optional bool trans_B = 2 [default = true];
  if (has_trans_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->trans_b(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatrixMulParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool trans_A = 1 [default = false];
  if (has_trans_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->trans_a(), target);
  }
  
  // optional bool trans_B = 2 [default = true];
  if (has_trans_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->trans_b(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatrixMulParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool trans_A = 1 [default = false];
    if (has_trans_a()) {
      total_size += 1 + 1;
    }
    
    // optional bool trans_B = 2 [default = true];
    if (has_trans_b()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatrixMulParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatrixMulParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatrixMulParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatrixMulParameter::MergeFrom(const MatrixMulParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trans_a()) {
      set_trans_a(from.trans_a());
    }
    if (from.has_trans_b()) {
      set_trans_b(from.trans_b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatrixMulParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatrixMulParameter::CopyFrom(const MatrixMulParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatrixMulParameter::IsInitialized() const {
  
  return true;
}

void MatrixMulParameter::Swap(MatrixMulParameter* other) {
  if (other != this) {
    std::swap(trans_a_, other->trans_a_);
    std::swap(trans_b_, other->trans_b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatrixMulParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatrixMulParameter_descriptor_;
  metadata.reflection = MatrixMulParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatrixMulStackParameter::kNumFieldNumber;
const int MatrixMulStackParameter::kTransOddFieldNumber;
const int MatrixMulStackParameter::kTransEvenFieldNumber;
#endif  // !_MSC_VER

MatrixMulStackParameter::MatrixMulStackParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatrixMulStackParameter::InitAsDefaultInstance() {
}

MatrixMulStackParameter::MatrixMulStackParameter(const MatrixMulStackParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatrixMulStackParameter::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  trans_odd_ = false;
  trans_even_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatrixMulStackParameter::~MatrixMulStackParameter() {
  SharedDtor();
}

void MatrixMulStackParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatrixMulStackParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatrixMulStackParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatrixMulStackParameter_descriptor_;
}

const MatrixMulStackParameter& MatrixMulStackParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

MatrixMulStackParameter* MatrixMulStackParameter::default_instance_ = NULL;

MatrixMulStackParameter* MatrixMulStackParameter::New() const {
  return new MatrixMulStackParameter;
}

void MatrixMulStackParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
    trans_odd_ = false;
    trans_even_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatrixMulStackParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trans_odd;
        break;
      }
      
      // optional bool trans_odd = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trans_odd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trans_odd_)));
          set_has_trans_odd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_trans_even;
        break;
      }
      
      // optional bool trans_even = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trans_even:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trans_even_)));
          set_has_trans_even();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatrixMulStackParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }
  
  // optional bool trans_odd = 2 [default = false];
  if (has_trans_odd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->trans_odd(), output);
  }
  
  // optional bool trans_even = 3 [default = true];
  if (has_trans_even()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->trans_even(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatrixMulStackParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }
  
  // optional bool trans_odd = 2 [default = false];
  if (has_trans_odd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->trans_odd(), target);
  }
  
  // optional bool trans_even = 3 [default = true];
  if (has_trans_even()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->trans_even(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatrixMulStackParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }
    
    // optional bool trans_odd = 2 [default = false];
    if (has_trans_odd()) {
      total_size += 1 + 1;
    }
    
    // optional bool trans_even = 3 [default = true];
    if (has_trans_even()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatrixMulStackParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatrixMulStackParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatrixMulStackParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatrixMulStackParameter::MergeFrom(const MatrixMulStackParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_trans_odd()) {
      set_trans_odd(from.trans_odd());
    }
    if (from.has_trans_even()) {
      set_trans_even(from.trans_even());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatrixMulStackParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatrixMulStackParameter::CopyFrom(const MatrixMulStackParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatrixMulStackParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MatrixMulStackParameter::Swap(MatrixMulStackParameter* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(trans_odd_, other->trans_odd_);
    std::swap(trans_even_, other->trans_even_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatrixMulStackParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatrixMulStackParameter_descriptor_;
  metadata.reflection = MatrixMulStackParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransposeParameter::kLeadDimFieldNumber;
const int TransposeParameter::kOutputDimsFieldNumber;
#endif  // !_MSC_VER

TransposeParameter::TransposeParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransposeParameter::InitAsDefaultInstance() {
}

TransposeParameter::TransposeParameter(const TransposeParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransposeParameter::SharedCtor() {
  _cached_size_ = 0;
  lead_dim_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransposeParameter::~TransposeParameter() {
  SharedDtor();
}

void TransposeParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransposeParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransposeParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransposeParameter_descriptor_;
}

const TransposeParameter& TransposeParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

TransposeParameter* TransposeParameter::default_instance_ = NULL;

TransposeParameter* TransposeParameter::New() const {
  return new TransposeParameter;
}

void TransposeParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lead_dim_ = 0u;
  }
  output_dims_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransposeParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 lead_dim = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lead_dim_)));
          set_has_lead_dim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_output_dims;
        break;
      }
      
      // repeated int32 output_dims = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_output_dims:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_output_dims())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_output_dims())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_output_dims;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransposeParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 lead_dim = 1;
  if (has_lead_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lead_dim(), output);
  }
  
  // repeated int32 output_dims = 2;
  for (int i = 0; i < this->output_dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->output_dims(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransposeParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 lead_dim = 1;
  if (has_lead_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lead_dim(), target);
  }
  
  // repeated int32 output_dims = 2;
  for (int i = 0; i < this->output_dims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->output_dims(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransposeParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 lead_dim = 1;
    if (has_lead_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lead_dim());
    }
    
  }
  // repeated int32 output_dims = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->output_dims_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->output_dims(i));
    }
    total_size += 1 * this->output_dims_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransposeParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransposeParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransposeParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransposeParameter::MergeFrom(const TransposeParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  output_dims_.MergeFrom(from.output_dims_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lead_dim()) {
      set_lead_dim(from.lead_dim());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransposeParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransposeParameter::CopyFrom(const TransposeParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransposeParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TransposeParameter::Swap(TransposeParameter* other) {
  if (other != this) {
    std::swap(lead_dim_, other->lead_dim_);
    output_dims_.Swap(&other->output_dims_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransposeParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransposeParameter_descriptor_;
  metadata.reflection = TransposeParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReshapeParameter::kDimsFieldNumber;
#endif  // !_MSC_VER

ReshapeParameter::ReshapeParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReshapeParameter::InitAsDefaultInstance() {
}

ReshapeParameter::ReshapeParameter(const ReshapeParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReshapeParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReshapeParameter::~ReshapeParameter() {
  SharedDtor();
}

void ReshapeParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReshapeParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReshapeParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReshapeParameter_descriptor_;
}

const ReshapeParameter& ReshapeParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

ReshapeParameter* ReshapeParameter::default_instance_ = NULL;

ReshapeParameter* ReshapeParameter::New() const {
  return new ReshapeParameter;
}

void ReshapeParameter::Clear() {
  dims_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReshapeParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 dims = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dims:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_dims())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dims())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_dims;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReshapeParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 dims = 1;
  for (int i = 0; i < this->dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->dims(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReshapeParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 dims = 1;
  for (int i = 0; i < this->dims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->dims(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReshapeParameter::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 dims = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->dims_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dims(i));
    }
    total_size += 1 * this->dims_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReshapeParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReshapeParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReshapeParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReshapeParameter::MergeFrom(const ReshapeParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  dims_.MergeFrom(from.dims_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReshapeParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReshapeParameter::CopyFrom(const ReshapeParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReshapeParameter::IsInitialized() const {
  
  return true;
}

void ReshapeParameter::Swap(ReshapeParameter* other) {
  if (other != this) {
    dims_.Swap(&other->dims_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReshapeParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReshapeParameter_descriptor_;
  metadata.reflection = ReshapeParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LearnableDropoutParameter::kInitValueFieldNumber;
#endif  // !_MSC_VER

LearnableDropoutParameter::LearnableDropoutParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LearnableDropoutParameter::InitAsDefaultInstance() {
}

LearnableDropoutParameter::LearnableDropoutParameter(const LearnableDropoutParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LearnableDropoutParameter::SharedCtor() {
  _cached_size_ = 0;
  init_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LearnableDropoutParameter::~LearnableDropoutParameter() {
  SharedDtor();
}

void LearnableDropoutParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LearnableDropoutParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LearnableDropoutParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LearnableDropoutParameter_descriptor_;
}

const LearnableDropoutParameter& LearnableDropoutParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

LearnableDropoutParameter* LearnableDropoutParameter::default_instance_ = NULL;

LearnableDropoutParameter* LearnableDropoutParameter::New() const {
  return new LearnableDropoutParameter;
}

void LearnableDropoutParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    init_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LearnableDropoutParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float init_value = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &init_value_)));
          set_has_init_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LearnableDropoutParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float init_value = 1 [default = 0];
  if (has_init_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->init_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LearnableDropoutParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float init_value = 1 [default = 0];
  if (has_init_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->init_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LearnableDropoutParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float init_value = 1 [default = 0];
    if (has_init_value()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearnableDropoutParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LearnableDropoutParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LearnableDropoutParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LearnableDropoutParameter::MergeFrom(const LearnableDropoutParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_init_value()) {
      set_init_value(from.init_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LearnableDropoutParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearnableDropoutParameter::CopyFrom(const LearnableDropoutParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearnableDropoutParameter::IsInitialized() const {
  
  return true;
}

void LearnableDropoutParameter::Swap(LearnableDropoutParameter* other) {
  if (other != this) {
    std::swap(init_value_, other->init_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LearnableDropoutParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LearnableDropoutParameter_descriptor_;
  metadata.reflection = LearnableDropoutParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DimInnerProductParameter::kDimFieldNumber;
#endif  // !_MSC_VER

DimInnerProductParameter::DimInnerProductParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DimInnerProductParameter::InitAsDefaultInstance() {
}

DimInnerProductParameter::DimInnerProductParameter(const DimInnerProductParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DimInnerProductParameter::SharedCtor() {
  _cached_size_ = 0;
  dim_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DimInnerProductParameter::~DimInnerProductParameter() {
  SharedDtor();
}

void DimInnerProductParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DimInnerProductParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DimInnerProductParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DimInnerProductParameter_descriptor_;
}

const DimInnerProductParameter& DimInnerProductParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

DimInnerProductParameter* DimInnerProductParameter::default_instance_ = NULL;

DimInnerProductParameter* DimInnerProductParameter::New() const {
  return new DimInnerProductParameter;
}

void DimInnerProductParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dim_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DimInnerProductParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dim = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dim_)));
          set_has_dim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DimInnerProductParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dim = 1;
  if (has_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dim(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DimInnerProductParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dim = 1;
  if (has_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dim(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DimInnerProductParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dim = 1;
    if (has_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dim());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DimInnerProductParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DimInnerProductParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DimInnerProductParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DimInnerProductParameter::MergeFrom(const DimInnerProductParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dim()) {
      set_dim(from.dim());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DimInnerProductParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DimInnerProductParameter::CopyFrom(const DimInnerProductParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DimInnerProductParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DimInnerProductParameter::Swap(DimInnerProductParameter* other) {
  if (other != this) {
    std::swap(dim_, other->dim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DimInnerProductParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DimInnerProductParameter_descriptor_;
  metadata.reflection = DimInnerProductParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoftthrParameter::kSoftthrThrFieldNumber;
#endif  // !_MSC_VER

SoftthrParameter::SoftthrParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SoftthrParameter::InitAsDefaultInstance() {
}

SoftthrParameter::SoftthrParameter(const SoftthrParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SoftthrParameter::SharedCtor() {
  _cached_size_ = 0;
  softthr_thr_ = 0.1f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoftthrParameter::~SoftthrParameter() {
  SharedDtor();
}

void SoftthrParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoftthrParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftthrParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftthrParameter_descriptor_;
}

const SoftthrParameter& SoftthrParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

SoftthrParameter* SoftthrParameter::default_instance_ = NULL;

SoftthrParameter* SoftthrParameter::New() const {
  return new SoftthrParameter;
}

void SoftthrParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    softthr_thr_ = 0.1f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoftthrParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float softthr_thr = 1 [default = 0.1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &softthr_thr_)));
          set_has_softthr_thr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SoftthrParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float softthr_thr = 1 [default = 0.1];
  if (has_softthr_thr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->softthr_thr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SoftthrParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float softthr_thr = 1 [default = 0.1];
  if (has_softthr_thr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->softthr_thr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SoftthrParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float softthr_thr = 1 [default = 0.1];
    if (has_softthr_thr()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftthrParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoftthrParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoftthrParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoftthrParameter::MergeFrom(const SoftthrParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_softthr_thr()) {
      set_softthr_thr(from.softthr_thr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoftthrParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftthrParameter::CopyFrom(const SoftthrParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftthrParameter::IsInitialized() const {
  
  return true;
}

void SoftthrParameter::Swap(SoftthrParameter* other) {
  if (other != this) {
    std::swap(softthr_thr_, other->softthr_thr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoftthrParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoftthrParameter_descriptor_;
  metadata.reflection = SoftthrParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DropoutsameParameter::kDropoutRatioFieldNumber;
const int DropoutsameParameter::kForceRandomFieldNumber;
#endif  // !_MSC_VER

DropoutsameParameter::DropoutsameParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DropoutsameParameter::InitAsDefaultInstance() {
}

DropoutsameParameter::DropoutsameParameter(const DropoutsameParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DropoutsameParameter::SharedCtor() {
  _cached_size_ = 0;
  dropout_ratio_ = 0.5f;
  force_random_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropoutsameParameter::~DropoutsameParameter() {
  SharedDtor();
}

void DropoutsameParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DropoutsameParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropoutsameParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropoutsameParameter_descriptor_;
}

const DropoutsameParameter& DropoutsameParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

DropoutsameParameter* DropoutsameParameter::default_instance_ = NULL;

DropoutsameParameter* DropoutsameParameter::New() const {
  return new DropoutsameParameter;
}

void DropoutsameParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dropout_ratio_ = 0.5f;
    force_random_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DropoutsameParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float dropout_ratio = 1 [default = 0.5];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_ratio_)));
          set_has_dropout_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_force_random;
        break;
      }
      
      // optional bool force_random = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force_random:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_random_)));
          set_has_force_random();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DropoutsameParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float dropout_ratio = 1 [default = 0.5];
  if (has_dropout_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dropout_ratio(), output);
  }
  
  // optional bool force_random = 2 [default = false];
  if (has_force_random()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->force_random(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DropoutsameParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float dropout_ratio = 1 [default = 0.5];
  if (has_dropout_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dropout_ratio(), target);
  }
  
  // optional bool force_random = 2 [default = false];
  if (has_force_random()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->force_random(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DropoutsameParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float dropout_ratio = 1 [default = 0.5];
    if (has_dropout_ratio()) {
      total_size += 1 + 4;
    }
    
    // optional bool force_random = 2 [default = false];
    if (has_force_random()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropoutsameParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DropoutsameParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DropoutsameParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DropoutsameParameter::MergeFrom(const DropoutsameParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dropout_ratio()) {
      set_dropout_ratio(from.dropout_ratio());
    }
    if (from.has_force_random()) {
      set_force_random(from.force_random());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DropoutsameParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropoutsameParameter::CopyFrom(const DropoutsameParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropoutsameParameter::IsInitialized() const {
  
  return true;
}

void DropoutsameParameter::Swap(DropoutsameParameter* other) {
  if (other != this) {
    std::swap(dropout_ratio_, other->dropout_ratio_);
    std::swap(force_random_, other->force_random_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DropoutsameParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DropoutsameParameter_descriptor_;
  metadata.reflection = DropoutsameParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiagOperationParameter::kScaleFieldNumber;
const int DiagOperationParameter::kShiftFieldNumber;
#endif  // !_MSC_VER

DiagOperationParameter::DiagOperationParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DiagOperationParameter::InitAsDefaultInstance() {
}

DiagOperationParameter::DiagOperationParameter(const DiagOperationParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DiagOperationParameter::SharedCtor() {
  _cached_size_ = 0;
  scale_ = 1;
  shift_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiagOperationParameter::~DiagOperationParameter() {
  SharedDtor();
}

void DiagOperationParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiagOperationParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiagOperationParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiagOperationParameter_descriptor_;
}

const DiagOperationParameter& DiagOperationParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

DiagOperationParameter* DiagOperationParameter::default_instance_ = NULL;

DiagOperationParameter* DiagOperationParameter::New() const {
  return new DiagOperationParameter;
}

void DiagOperationParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scale_ = 1;
    shift_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiagOperationParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float scale = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_shift;
        break;
      }
      
      // optional float shift = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_shift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shift_)));
          set_has_shift();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DiagOperationParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float scale = 1 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->scale(), output);
  }
  
  // optional float shift = 2 [default = 0];
  if (has_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->shift(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DiagOperationParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float scale = 1 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->scale(), target);
  }
  
  // optional float shift = 2 [default = 0];
  if (has_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->shift(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DiagOperationParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float scale = 1 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }
    
    // optional float shift = 2 [default = 0];
    if (has_shift()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiagOperationParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiagOperationParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiagOperationParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiagOperationParameter::MergeFrom(const DiagOperationParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_shift()) {
      set_shift(from.shift());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiagOperationParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagOperationParameter::CopyFrom(const DiagOperationParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagOperationParameter::IsInitialized() const {
  
  return true;
}

void DiagOperationParameter::Swap(DiagOperationParameter* other) {
  if (other != this) {
    std::swap(scale_, other->scale_);
    std::swap(shift_, other->shift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiagOperationParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiagOperationParameter_descriptor_;
  metadata.reflection = DiagOperationParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoftMaxLossOHEMParameter::kOhemSizeFieldNumber;
const int SoftMaxLossOHEMParameter::kForceRandomFieldNumber;
#endif  // !_MSC_VER

SoftMaxLossOHEMParameter::SoftMaxLossOHEMParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SoftMaxLossOHEMParameter::InitAsDefaultInstance() {
}

SoftMaxLossOHEMParameter::SoftMaxLossOHEMParameter(const SoftMaxLossOHEMParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SoftMaxLossOHEMParameter::SharedCtor() {
  _cached_size_ = 0;
  ohem_size_ = 64;
  force_random_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoftMaxLossOHEMParameter::~SoftMaxLossOHEMParameter() {
  SharedDtor();
}

void SoftMaxLossOHEMParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoftMaxLossOHEMParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftMaxLossOHEMParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftMaxLossOHEMParameter_descriptor_;
}

const SoftMaxLossOHEMParameter& SoftMaxLossOHEMParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

SoftMaxLossOHEMParameter* SoftMaxLossOHEMParameter::default_instance_ = NULL;

SoftMaxLossOHEMParameter* SoftMaxLossOHEMParameter::New() const {
  return new SoftMaxLossOHEMParameter;
}

void SoftMaxLossOHEMParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ohem_size_ = 64;
    force_random_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoftMaxLossOHEMParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ohem_size = 1 [default = 64];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ohem_size_)));
          set_has_ohem_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_force_random;
        break;
      }
      
      // optional bool force_random = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force_random:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_random_)));
          set_has_force_random();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SoftMaxLossOHEMParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ohem_size = 1 [default = 64];
  if (has_ohem_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ohem_size(), output);
  }
  
  // optional bool force_random = 2 [default = false];
  if (has_force_random()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->force_random(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SoftMaxLossOHEMParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ohem_size = 1 [default = 64];
  if (has_ohem_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ohem_size(), target);
  }
  
  // optional bool force_random = 2 [default = false];
  if (has_force_random()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->force_random(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SoftMaxLossOHEMParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ohem_size = 1 [default = 64];
    if (has_ohem_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ohem_size());
    }
    
    // optional bool force_random = 2 [default = false];
    if (has_force_random()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftMaxLossOHEMParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoftMaxLossOHEMParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoftMaxLossOHEMParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoftMaxLossOHEMParameter::MergeFrom(const SoftMaxLossOHEMParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ohem_size()) {
      set_ohem_size(from.ohem_size());
    }
    if (from.has_force_random()) {
      set_force_random(from.force_random());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoftMaxLossOHEMParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftMaxLossOHEMParameter::CopyFrom(const SoftMaxLossOHEMParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftMaxLossOHEMParameter::IsInitialized() const {
  
  return true;
}

void SoftMaxLossOHEMParameter::Swap(SoftMaxLossOHEMParameter* other) {
  if (other != this) {
    std::swap(ohem_size_, other->ohem_size_);
    std::swap(force_random_, other->force_random_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoftMaxLossOHEMParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoftMaxLossOHEMParameter_descriptor_;
  metadata.reflection = SoftMaxLossOHEMParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoftMaxOHEMParameter::kOhemSizeFieldNumber;
const int SoftMaxOHEMParameter::kForceRandomFieldNumber;
const int SoftMaxOHEMParameter::kUseMaxLossFieldNumber;
#endif  // !_MSC_VER

SoftMaxOHEMParameter::SoftMaxOHEMParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SoftMaxOHEMParameter::InitAsDefaultInstance() {
}

SoftMaxOHEMParameter::SoftMaxOHEMParameter(const SoftMaxOHEMParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SoftMaxOHEMParameter::SharedCtor() {
  _cached_size_ = 0;
  ohem_size_ = 64;
  force_random_ = false;
  use_max_loss_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoftMaxOHEMParameter::~SoftMaxOHEMParameter() {
  SharedDtor();
}

void SoftMaxOHEMParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoftMaxOHEMParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftMaxOHEMParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftMaxOHEMParameter_descriptor_;
}

const SoftMaxOHEMParameter& SoftMaxOHEMParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

SoftMaxOHEMParameter* SoftMaxOHEMParameter::default_instance_ = NULL;

SoftMaxOHEMParameter* SoftMaxOHEMParameter::New() const {
  return new SoftMaxOHEMParameter;
}

void SoftMaxOHEMParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ohem_size_ = 64;
    force_random_ = false;
    use_max_loss_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoftMaxOHEMParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ohem_size = 1 [default = 64];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ohem_size_)));
          set_has_ohem_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_force_random;
        break;
      }
      
      // optional bool force_random = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force_random:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_random_)));
          set_has_force_random();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_use_max_loss;
        break;
      }
      
      // optional bool use_max_loss = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_max_loss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_max_loss_)));
          set_has_use_max_loss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SoftMaxOHEMParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ohem_size = 1 [default = 64];
  if (has_ohem_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ohem_size(), output);
  }
  
  // optional bool force_random = 2 [default = false];
  if (has_force_random()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->force_random(), output);
  }
  
  // optional bool use_max_loss = 3 [default = false];
  if (has_use_max_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_max_loss(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SoftMaxOHEMParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ohem_size = 1 [default = 64];
  if (has_ohem_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ohem_size(), target);
  }
  
  // optional bool force_random = 2 [default = false];
  if (has_force_random()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->force_random(), target);
  }
  
  // optional bool use_max_loss = 3 [default = false];
  if (has_use_max_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_max_loss(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SoftMaxOHEMParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ohem_size = 1 [default = 64];
    if (has_ohem_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ohem_size());
    }
    
    // optional bool force_random = 2 [default = false];
    if (has_force_random()) {
      total_size += 1 + 1;
    }
    
    // optional bool use_max_loss = 3 [default = false];
    if (has_use_max_loss()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftMaxOHEMParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoftMaxOHEMParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoftMaxOHEMParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoftMaxOHEMParameter::MergeFrom(const SoftMaxOHEMParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ohem_size()) {
      set_ohem_size(from.ohem_size());
    }
    if (from.has_force_random()) {
      set_force_random(from.force_random());
    }
    if (from.has_use_max_loss()) {
      set_use_max_loss(from.use_max_loss());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoftMaxOHEMParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftMaxOHEMParameter::CopyFrom(const SoftMaxOHEMParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftMaxOHEMParameter::IsInitialized() const {
  
  return true;
}

void SoftMaxOHEMParameter::Swap(SoftMaxOHEMParameter* other) {
  if (other != this) {
    std::swap(ohem_size_, other->ohem_size_);
    std::swap(force_random_, other->force_random_);
    std::swap(use_max_loss_, other->use_max_loss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoftMaxOHEMParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoftMaxOHEMParameter_descriptor_;
  metadata.reflection = SoftMaxOHEMParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoftMaxOHEMSplitParameter::kOhemSizeFieldNumber;
const int SoftMaxOHEMSplitParameter::kForceRandomFieldNumber;
const int SoftMaxOHEMSplitParameter::kUseMaxLossFieldNumber;
#endif  // !_MSC_VER

SoftMaxOHEMSplitParameter::SoftMaxOHEMSplitParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SoftMaxOHEMSplitParameter::InitAsDefaultInstance() {
}

SoftMaxOHEMSplitParameter::SoftMaxOHEMSplitParameter(const SoftMaxOHEMSplitParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SoftMaxOHEMSplitParameter::SharedCtor() {
  _cached_size_ = 0;
  ohem_size_ = 64;
  force_random_ = false;
  use_max_loss_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoftMaxOHEMSplitParameter::~SoftMaxOHEMSplitParameter() {
  SharedDtor();
}

void SoftMaxOHEMSplitParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoftMaxOHEMSplitParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftMaxOHEMSplitParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftMaxOHEMSplitParameter_descriptor_;
}

const SoftMaxOHEMSplitParameter& SoftMaxOHEMSplitParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();  return *default_instance_;
}

SoftMaxOHEMSplitParameter* SoftMaxOHEMSplitParameter::default_instance_ = NULL;

SoftMaxOHEMSplitParameter* SoftMaxOHEMSplitParameter::New() const {
  return new SoftMaxOHEMSplitParameter;
}

void SoftMaxOHEMSplitParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ohem_size_ = 64;
    force_random_ = false;
    use_max_loss_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoftMaxOHEMSplitParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ohem_size = 1 [default = 64];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ohem_size_)));
          set_has_ohem_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_force_random;
        break;
      }
      
      // optional bool force_random = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force_random:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_random_)));
          set_has_force_random();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_use_max_loss;
        break;
      }
      
      // optional bool use_max_loss = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_max_loss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_max_loss_)));
          set_has_use_max_loss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SoftMaxOHEMSplitParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ohem_size = 1 [default = 64];
  if (has_ohem_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ohem_size(), output);
  }
  
  // optional bool force_random = 2 [default = false];
  if (has_force_random()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->force_random(), output);
  }
  
  // optional bool use_max_loss = 3 [default = false];
  if (has_use_max_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_max_loss(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SoftMaxOHEMSplitParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ohem_size = 1 [default = 64];
  if (has_ohem_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ohem_size(), target);
  }
  
  // optional bool force_random = 2 [default = false];
  if (has_force_random()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->force_random(), target);
  }
  
  // optional bool use_max_loss = 3 [default = false];
  if (has_use_max_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_max_loss(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SoftMaxOHEMSplitParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ohem_size = 1 [default = 64];
    if (has_ohem_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ohem_size());
    }
    
    // optional bool force_random = 2 [default = false];
    if (has_force_random()) {
      total_size += 1 + 1;
    }
    
    // optional bool use_max_loss = 3 [default = false];
    if (has_use_max_loss()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftMaxOHEMSplitParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoftMaxOHEMSplitParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoftMaxOHEMSplitParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoftMaxOHEMSplitParameter::MergeFrom(const SoftMaxOHEMSplitParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ohem_size()) {
      set_ohem_size(from.ohem_size());
    }
    if (from.has_force_random()) {
      set_force_random(from.force_random());
    }
    if (from.has_use_max_loss()) {
      set_use_max_loss(from.use_max_loss());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoftMaxOHEMSplitParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftMaxOHEMSplitParameter::CopyFrom(const SoftMaxOHEMSplitParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftMaxOHEMSplitParameter::IsInitialized() const {
  
  return true;
}

void SoftMaxOHEMSplitParameter::Swap(SoftMaxOHEMSplitParameter* other) {
  if (other != this) {
    std::swap(ohem_size_, other->ohem_size_);
    std::swap(force_random_, other->force_random_);
    std::swap(use_max_loss_, other->use_max_loss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoftMaxOHEMSplitParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoftMaxOHEMSplitParameter_descriptor_;
  metadata.reflection = SoftMaxOHEMSplitParameter_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffepro

#ifdef _MSC_VER
#  pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)
